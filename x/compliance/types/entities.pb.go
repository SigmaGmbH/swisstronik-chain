// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: swisstronik/compliance/entities.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VerificationType int32

const (
	VerificationType_VT_KYC      VerificationType = 0
	VerificationType_VT_KYB      VerificationType = 1
	VerificationType_VT_KYW      VerificationType = 2
	VerificationType_VT_HUMANITY VerificationType = 3
	VerificationType_VT_AML      VerificationType = 4
	VerificationType_VT_ADDRESS  VerificationType = 5
	VerificationType_VT_CUSTOM   VerificationType = 6
)

var VerificationType_name = map[int32]string{
	0: "VT_KYC",
	1: "VT_KYB",
	2: "VT_KYW",
	3: "VT_HUMANITY",
	4: "VT_AML",
	5: "VT_ADDRESS",
	6: "VT_CUSTOM",
}

var VerificationType_value = map[string]int32{
	"VT_KYC":      0,
	"VT_KYB":      1,
	"VT_KYW":      2,
	"VT_HUMANITY": 3,
	"VT_AML":      4,
	"VT_ADDRESS":  5,
	"VT_CUSTOM":   6,
}

func (x VerificationType) String() string {
	return proto.EnumName(VerificationType_name, int32(x))
}

func (VerificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{0}
}

type BanStatus struct {
	IsBanned      bool   `protobuf:"varint,1,opt,name=is_banned,json=isBanned,proto3" json:"is_banned,omitempty"`
	Timestamp     uint32 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ReferenceInfo string `protobuf:"bytes,3,opt,name=reference_info,json=referenceInfo,proto3" json:"reference_info,omitempty"`
}

func (m *BanStatus) Reset()         { *m = BanStatus{} }
func (m *BanStatus) String() string { return proto.CompactTextString(m) }
func (*BanStatus) ProtoMessage()    {}
func (*BanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{0}
}
func (m *BanStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BanStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BanStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BanStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanStatus.Merge(m, src)
}
func (m *BanStatus) XXX_Size() int {
	return m.Size()
}
func (m *BanStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_BanStatus.DiscardUnknown(m)
}

var xxx_messageInfo_BanStatus proto.InternalMessageInfo

func (m *BanStatus) GetIsBanned() bool {
	if m != nil {
		return m.IsBanned
	}
	return false
}

func (m *BanStatus) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BanStatus) GetReferenceInfo() string {
	if m != nil {
		return m.ReferenceInfo
	}
	return ""
}

type AddressInfo struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// This field is used during community verification of some address.
	// Only smart contract can be verified by community.
	IsVerified bool `protobuf:"varint,2,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	// This field contains information about address ban. Ban can be done
	// only by community decision
	BanData       *BanStatus          `protobuf:"bytes,3,opt,name=ban_data,json=banData,proto3" json:"ban_data,omitempty"`
	Verifications []*VerificationData `protobuf:"bytes,4,rep,name=verifications,proto3" json:"verifications,omitempty"`
}

func (m *AddressInfo) Reset()         { *m = AddressInfo{} }
func (m *AddressInfo) String() string { return proto.CompactTextString(m) }
func (*AddressInfo) ProtoMessage()    {}
func (*AddressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{1}
}
func (m *AddressInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressInfo.Merge(m, src)
}
func (m *AddressInfo) XXX_Size() int {
	return m.Size()
}
func (m *AddressInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AddressInfo proto.InternalMessageInfo

func (m *AddressInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddressInfo) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *AddressInfo) GetBanData() *BanStatus {
	if m != nil {
		return m.BanData
	}
	return nil
}

func (m *AddressInfo) GetVerifications() []*VerificationData {
	if m != nil {
		return m.Verifications
	}
	return nil
}

type VerificationData struct {
	VerificationType VerificationType     `protobuf:"varint,1,opt,name=verification_type,json=verificationType,proto3,enum=swisstronik.compliance.VerificationType" json:"verification_type,omitempty"`
	Entries          []*VerificationEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (m *VerificationData) Reset()         { *m = VerificationData{} }
func (m *VerificationData) String() string { return proto.CompactTextString(m) }
func (*VerificationData) ProtoMessage()    {}
func (*VerificationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{2}
}
func (m *VerificationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationData.Merge(m, src)
}
func (m *VerificationData) XXX_Size() int {
	return m.Size()
}
func (m *VerificationData) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationData.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationData proto.InternalMessageInfo

func (m *VerificationData) GetVerificationType() VerificationType {
	if m != nil {
		return m.VerificationType
	}
	return VerificationType_VT_KYC
}

func (m *VerificationData) GetEntries() []*VerificationEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type VerificationEntry struct {
	AdapterData *IssuerAdapterContractDetail `protobuf:"bytes,1,opt,name=adapter_data,json=adapterData,proto3" json:"adapter_data,omitempty"`
	// On which chain verification was passed
	OriginChain string `protobuf:"bytes,2,opt,name=origin_chain,json=originChain,proto3" json:"origin_chain,omitempty"`
	// Original issuance timestamp
	IssuanceTimestamp uint32 `protobuf:"varint,3,opt,name=issuance_timestamp,json=issuanceTimestamp,proto3" json:"issuance_timestamp,omitempty"`
	// Original expiration timestamp
	ExpirationTimestamp uint32 `protobuf:"varint,4,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// Original zk proof
	OriginalData []byte `protobuf:"bytes,5,opt,name=original_data,json=originalData,proto3" json:"original_data,omitempty"`
}

func (m *VerificationEntry) Reset()         { *m = VerificationEntry{} }
func (m *VerificationEntry) String() string { return proto.CompactTextString(m) }
func (*VerificationEntry) ProtoMessage()    {}
func (*VerificationEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{3}
}
func (m *VerificationEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationEntry.Merge(m, src)
}
func (m *VerificationEntry) XXX_Size() int {
	return m.Size()
}
func (m *VerificationEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationEntry.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationEntry proto.InternalMessageInfo

func (m *VerificationEntry) GetAdapterData() *IssuerAdapterContractDetail {
	if m != nil {
		return m.AdapterData
	}
	return nil
}

func (m *VerificationEntry) GetOriginChain() string {
	if m != nil {
		return m.OriginChain
	}
	return ""
}

func (m *VerificationEntry) GetIssuanceTimestamp() uint32 {
	if m != nil {
		return m.IssuanceTimestamp
	}
	return 0
}

func (m *VerificationEntry) GetExpirationTimestamp() uint32 {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return 0
}

func (m *VerificationEntry) GetOriginalData() []byte {
	if m != nil {
		return m.OriginalData
	}
	return nil
}

type IssuerDetails struct {
	IssuerAlias string `protobuf:"bytes,1,opt,name=issuer_alias,json=issuerAlias,proto3" json:"issuer_alias,omitempty"`
}

func (m *IssuerDetails) Reset()         { *m = IssuerDetails{} }
func (m *IssuerDetails) String() string { return proto.CompactTextString(m) }
func (*IssuerDetails) ProtoMessage()    {}
func (*IssuerDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{4}
}
func (m *IssuerDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssuerDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssuerDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssuerDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuerDetails.Merge(m, src)
}
func (m *IssuerDetails) XXX_Size() int {
	return m.Size()
}
func (m *IssuerDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuerDetails.DiscardUnknown(m)
}

var xxx_messageInfo_IssuerDetails proto.InternalMessageInfo

func (m *IssuerDetails) GetIssuerAlias() string {
	if m != nil {
		return m.IssuerAlias
	}
	return ""
}

type IssuerAdapterContractDetail struct {
	// Issuer company name
	IssuerAlias string `protobuf:"bytes,1,opt,name=issuer_alias,json=issuerAlias,proto3" json:"issuer_alias,omitempty"`
	// Adapter contract address
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
}

func (m *IssuerAdapterContractDetail) Reset()         { *m = IssuerAdapterContractDetail{} }
func (m *IssuerAdapterContractDetail) String() string { return proto.CompactTextString(m) }
func (*IssuerAdapterContractDetail) ProtoMessage()    {}
func (*IssuerAdapterContractDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{5}
}
func (m *IssuerAdapterContractDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssuerAdapterContractDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssuerAdapterContractDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssuerAdapterContractDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuerAdapterContractDetail.Merge(m, src)
}
func (m *IssuerAdapterContractDetail) XXX_Size() int {
	return m.Size()
}
func (m *IssuerAdapterContractDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuerAdapterContractDetail.DiscardUnknown(m)
}

var xxx_messageInfo_IssuerAdapterContractDetail proto.InternalMessageInfo

func (m *IssuerAdapterContractDetail) GetIssuerAlias() string {
	if m != nil {
		return m.IssuerAlias
	}
	return ""
}

func (m *IssuerAdapterContractDetail) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("swisstronik.compliance.VerificationType", VerificationType_name, VerificationType_value)
	proto.RegisterType((*BanStatus)(nil), "swisstronik.compliance.BanStatus")
	proto.RegisterType((*AddressInfo)(nil), "swisstronik.compliance.AddressInfo")
	proto.RegisterType((*VerificationData)(nil), "swisstronik.compliance.VerificationData")
	proto.RegisterType((*VerificationEntry)(nil), "swisstronik.compliance.VerificationEntry")
	proto.RegisterType((*IssuerDetails)(nil), "swisstronik.compliance.IssuerDetails")
	proto.RegisterType((*IssuerAdapterContractDetail)(nil), "swisstronik.compliance.IssuerAdapterContractDetail")
}

func init() {
	proto.RegisterFile("swisstronik/compliance/entities.proto", fileDescriptor_a6b6c3ec8e3c39ee)
}

var fileDescriptor_a6b6c3ec8e3c39ee = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0x8e, 0x13, 0x7e, 0xe2, 0x71, 0x02, 0x66, 0x8b, 0xaa, 0x08, 0x2a, 0x37, 0x04, 0x21, 0x85,
	0x4a, 0x0d, 0x2a, 0x5c, 0x7a, 0xe8, 0x25, 0x3f, 0x48, 0x45, 0x2d, 0x54, 0xda, 0x98, 0x54, 0xf4,
	0x62, 0x6d, 0x9c, 0x0d, 0x5d, 0x91, 0xac, 0xad, 0xdd, 0x85, 0xc2, 0x5b, 0xf4, 0xd2, 0xd7, 0xe8,
	0x73, 0xf4, 0xc8, 0xa9, 0xea, 0xb1, 0x82, 0x17, 0xa9, 0xbc, 0x6b, 0x27, 0x81, 0x96, 0x8a, 0xdb,
	0xce, 0x37, 0x33, 0xdf, 0xec, 0x7c, 0xfe, 0xbc, 0xb0, 0x25, 0xbf, 0x30, 0x29, 0x95, 0x88, 0x38,
	0x3b, 0xdb, 0x09, 0xa3, 0x71, 0x3c, 0x62, 0x84, 0x87, 0x74, 0x87, 0x72, 0xc5, 0x14, 0xa3, 0xb2,
	0x11, 0x8b, 0x48, 0x45, 0xe8, 0xe9, 0x4c, 0x59, 0x63, 0x5a, 0xb6, 0xb6, 0x7a, 0x1a, 0x9d, 0x46,
	0xba, 0x64, 0x27, 0x39, 0x99, 0xea, 0xb5, 0xcd, 0x07, 0x48, 0x63, 0x22, 0xc8, 0x38, 0xa5, 0xac,
	0x8d, 0xc1, 0x6e, 0x11, 0xde, 0x55, 0x44, 0x9d, 0x4b, 0xb4, 0x0e, 0x36, 0x93, 0x41, 0x9f, 0x70,
	0x4e, 0x07, 0x15, 0xab, 0x6a, 0xd5, 0x8b, 0xb8, 0xc8, 0x64, 0x4b, 0xc7, 0xe8, 0x19, 0xd8, 0x8a,
	0x8d, 0xa9, 0x54, 0x64, 0x1c, 0x57, 0xf2, 0x55, 0xab, 0x5e, 0xc6, 0x53, 0x00, 0x6d, 0xc1, 0x92,
	0xa0, 0x43, 0x2a, 0x28, 0x0f, 0x69, 0xc0, 0xf8, 0x30, 0xaa, 0x14, 0xaa, 0x56, 0xdd, 0xc6, 0xe5,
	0x09, 0x7a, 0xc0, 0x87, 0x51, 0xed, 0xa7, 0x05, 0x4e, 0x73, 0x30, 0x10, 0x54, 0xca, 0x24, 0x46,
	0x15, 0x58, 0x24, 0x26, 0xd4, 0xf3, 0x6c, 0x9c, 0x85, 0xe8, 0x39, 0x38, 0x4c, 0x06, 0x17, 0x54,
	0xb0, 0x21, 0xa3, 0x03, 0x3d, 0xb0, 0x88, 0x81, 0xc9, 0x5e, 0x8a, 0xa0, 0x37, 0x50, 0xec, 0x13,
	0x1e, 0x0c, 0x88, 0x22, 0x7a, 0x96, 0xb3, 0xbb, 0xd1, 0xf8, 0xb7, 0x3e, 0x8d, 0xc9, 0x86, 0x78,
	0xb1, 0x4f, 0x78, 0x87, 0x28, 0x82, 0x8e, 0xa0, 0x6c, 0xb8, 0x43, 0xa2, 0x58, 0xc4, 0x65, 0x65,
	0xae, 0x5a, 0xa8, 0x3b, 0xbb, 0xf5, 0x87, 0x28, 0x7a, 0x33, 0xc5, 0x09, 0x01, 0xbe, 0xdb, 0x5e,
	0xfb, 0x6e, 0x81, 0x7b, 0xbf, 0x06, 0x1d, 0xc3, 0xca, 0x6c, 0x55, 0xa0, 0xae, 0x62, 0xaa, 0xf7,
	0x5c, 0x7a, 0xdc, 0x20, 0xff, 0x2a, 0xa6, 0xd8, 0xbd, 0xb8, 0x87, 0xa0, 0x36, 0x2c, 0x52, 0xae,
	0x04, 0xa3, 0xb2, 0x92, 0xd7, 0xb7, 0xde, 0x7e, 0x0c, 0xd9, 0x3e, 0x57, 0xe2, 0x0a, 0x67, 0x9d,
	0xb5, 0x6f, 0x79, 0x58, 0xf9, 0x2b, 0x8d, 0x7a, 0x50, 0x22, 0x03, 0x12, 0x2b, 0x2a, 0x8c, 0xb0,
	0x96, 0x16, 0x76, 0xef, 0x21, 0xfe, 0x03, 0x29, 0xcf, 0xa9, 0x68, 0x9a, 0x8e, 0x76, 0xc4, 0x95,
	0x20, 0xa1, 0xea, 0x50, 0x45, 0xd8, 0x08, 0x3b, 0x29, 0x91, 0x56, 0x62, 0x03, 0x4a, 0x91, 0x60,
	0xa7, 0x8c, 0x07, 0xe1, 0x67, 0xc2, 0xb8, 0xfe, 0x9c, 0x36, 0x76, 0x0c, 0xd6, 0x4e, 0x20, 0xf4,
	0x12, 0x10, 0x93, 0xf2, 0x3c, 0xe1, 0x0d, 0xa6, 0x46, 0x2b, 0x68, 0xa3, 0xad, 0x64, 0x19, 0x7f,
	0x62, 0xb8, 0x57, 0xb0, 0x4a, 0x2f, 0x63, 0x26, 0x52, 0x65, 0x27, 0x0d, 0x73, 0xba, 0xe1, 0xc9,
	0x34, 0x37, 0x6d, 0xd9, 0x84, 0xb2, 0x19, 0x48, 0x46, 0x66, 0xbb, 0xf9, 0xaa, 0x55, 0x2f, 0xe1,
	0x52, 0x06, 0x26, 0x37, 0xad, 0xed, 0x42, 0xd9, 0x6c, 0x65, 0xd6, 0x90, 0xc9, 0xd5, 0x99, 0x06,
	0x02, 0x32, 0x62, 0x24, 0xf3, 0xa9, 0x63, 0xb0, 0x66, 0x02, 0xd5, 0xce, 0x60, 0xfd, 0x3f, 0x4a,
	0x3c, 0x82, 0x01, 0x6d, 0x83, 0x1b, 0xa6, 0x4d, 0x41, 0xf6, 0x43, 0x18, 0x8d, 0x96, 0x33, 0x3c,
	0xfd, 0x6d, 0x5e, 0x88, 0xbb, 0x46, 0xd3, 0x8e, 0x00, 0x58, 0xe8, 0xf9, 0xc1, 0xbb, 0x93, 0xb6,
	0x9b, 0x9b, 0x9c, 0x5b, 0xae, 0x35, 0x39, 0x7f, 0x74, 0xf3, 0x68, 0x19, 0x9c, 0x9e, 0x1f, 0xbc,
	0x3d, 0x3e, 0x6c, 0x1e, 0x1d, 0xf8, 0x27, 0x6e, 0x21, 0x4d, 0x36, 0x0f, 0xdf, 0xbb, 0x73, 0x68,
	0x09, 0x20, 0x39, 0x77, 0x3a, 0x78, 0xbf, 0xdb, 0x75, 0xe7, 0x51, 0x19, 0xec, 0x9e, 0x1f, 0xb4,
	0x8f, 0xbb, 0xfe, 0x87, 0x43, 0x77, 0xa1, 0xf5, 0xfa, 0xc7, 0x8d, 0x67, 0x5d, 0xdf, 0x78, 0xd6,
	0xef, 0x1b, 0xcf, 0xfa, 0x7a, 0xeb, 0xe5, 0xae, 0x6f, 0xbd, 0xdc, 0xaf, 0x5b, 0x2f, 0xf7, 0xc9,
	0x9b, 0x7d, 0x64, 0x2e, 0x67, 0x9f, 0x99, 0xc4, 0xec, 0xb2, 0xbf, 0xa0, 0x9f, 0x99, 0xbd, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x62, 0x62, 0x03, 0x34, 0xe2, 0x04, 0x00, 0x00,
}

func (m *BanStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BanStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BanStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReferenceInfo) > 0 {
		i -= len(m.ReferenceInfo)
		copy(dAtA[i:], m.ReferenceInfo)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.ReferenceInfo)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.IsBanned {
		i--
		if m.IsBanned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddressInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Verifications) > 0 {
		for iNdEx := len(m.Verifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Verifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntities(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.BanData != nil {
		{
			size, err := m.BanData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntities(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerificationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntities(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.VerificationType != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.VerificationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerificationEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OriginalData) > 0 {
		i -= len(m.OriginalData)
		copy(dAtA[i:], m.OriginalData)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.OriginalData)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if m.IssuanceTimestamp != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.IssuanceTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OriginChain) > 0 {
		i -= len(m.OriginChain)
		copy(dAtA[i:], m.OriginChain)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.OriginChain)))
		i--
		dAtA[i] = 0x12
	}
	if m.AdapterData != nil {
		{
			size, err := m.AdapterData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntities(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IssuerDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssuerDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssuerDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerAlias) > 0 {
		i -= len(m.IssuerAlias)
		copy(dAtA[i:], m.IssuerAlias)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.IssuerAlias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IssuerAdapterContractDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssuerAdapterContractDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssuerAdapterContractDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerAlias) > 0 {
		i -= len(m.IssuerAlias)
		copy(dAtA[i:], m.IssuerAlias)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.IssuerAlias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntities(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntities(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BanStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsBanned {
		n += 2
	}
	if m.Timestamp != 0 {
		n += 1 + sovEntities(uint64(m.Timestamp))
	}
	l = len(m.ReferenceInfo)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	return n
}

func (m *AddressInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.BanData != nil {
		l = m.BanData.Size()
		n += 1 + l + sovEntities(uint64(l))
	}
	if len(m.Verifications) > 0 {
		for _, e := range m.Verifications {
			l = e.Size()
			n += 1 + l + sovEntities(uint64(l))
		}
	}
	return n
}

func (m *VerificationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerificationType != 0 {
		n += 1 + sovEntities(uint64(m.VerificationType))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovEntities(uint64(l))
		}
	}
	return n
}

func (m *VerificationEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AdapterData != nil {
		l = m.AdapterData.Size()
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.OriginChain)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	if m.IssuanceTimestamp != 0 {
		n += 1 + sovEntities(uint64(m.IssuanceTimestamp))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovEntities(uint64(m.ExpirationTimestamp))
	}
	l = len(m.OriginalData)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	return n
}

func (m *IssuerDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerAlias)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	return n
}

func (m *IssuerAdapterContractDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerAlias)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	return n
}

func sovEntities(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntities(x uint64) (n int) {
	return sovEntities(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BanStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BanStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BanStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBanned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBanned = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferenceInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanData == nil {
				m.BanData = &BanStatus{}
			}
			if err := m.BanData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifications = append(m.Verifications, &VerificationData{})
			if err := m.Verifications[len(m.Verifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerificationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationType", wireType)
			}
			m.VerificationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationType |= VerificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, &VerificationEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerificationEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdapterData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdapterData == nil {
				m.AdapterData = &IssuerAdapterContractDetail{}
			}
			if err := m.AdapterData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceTimestamp", wireType)
			}
			m.IssuanceTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuanceTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalData = append(m.OriginalData[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalData == nil {
				m.OriginalData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssuerDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssuerDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssuerDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssuerAdapterContractDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssuerAdapterContractDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssuerAdapterContractDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntities(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntities
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntities
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntities
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntities        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntities          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntities = fmt.Errorf("proto: unexpected end of group")
)
