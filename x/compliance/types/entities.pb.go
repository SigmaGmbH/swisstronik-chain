// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: swisstronik/compliance/entities.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Contains information about address
type AddressData struct {
	// This field is used during community verification of some address.
	// Only smart contract can be verified by community.
	IsVerified bool `protobuf:"varint,1,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	// This field contains information about address ban. Ban can be done
	// only by community decision
	BanData *BanStatus `protobuf:"bytes,2,opt,name=ban_data,json=banData,proto3" json:"ban_data,omitempty"`
}

func (m *AddressData) Reset()         { *m = AddressData{} }
func (m *AddressData) String() string { return proto.CompactTextString(m) }
func (*AddressData) ProtoMessage()    {}
func (*AddressData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{0}
}
func (m *AddressData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressData.Merge(m, src)
}
func (m *AddressData) XXX_Size() int {
	return m.Size()
}
func (m *AddressData) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressData.DiscardUnknown(m)
}

var xxx_messageInfo_AddressData proto.InternalMessageInfo

func (m *AddressData) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *AddressData) GetBanData() *BanStatus {
	if m != nil {
		return m.BanData
	}
	return nil
}

// Contains information about ban, such as timestamp and ban status
type BanStatus struct {
	IsBanned  bool   `protobuf:"varint,1,opt,name=is_banned,json=isBanned,proto3" json:"is_banned,omitempty"`
	Timestamp uint32 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *BanStatus) Reset()         { *m = BanStatus{} }
func (m *BanStatus) String() string { return proto.CompactTextString(m) }
func (*BanStatus) ProtoMessage()    {}
func (*BanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{1}
}
func (m *BanStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BanStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BanStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BanStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanStatus.Merge(m, src)
}
func (m *BanStatus) XXX_Size() int {
	return m.Size()
}
func (m *BanStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_BanStatus.DiscardUnknown(m)
}

var xxx_messageInfo_BanStatus proto.InternalMessageInfo

func (m *BanStatus) GetIsBanned() bool {
	if m != nil {
		return m.IsBanned
	}
	return false
}

func (m *BanStatus) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// Contains verification info
type VerificationData struct {
	// On which chain verification was passed
	OriginChain string `protobuf:"bytes,1,opt,name=origin_chain,json=originChain,proto3" json:"origin_chain,omitempty"`
	// Original issuance timestamp
	IssuanceTimestamp uint32 `protobuf:"varint,2,opt,name=issuance_timestamp,json=issuanceTimestamp,proto3" json:"issuance_timestamp,omitempty"`
	// Original expiration timestamp
	ExpirationTimestamp uint32 `protobuf:"varint,3,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
}

func (m *VerificationData) Reset()         { *m = VerificationData{} }
func (m *VerificationData) String() string { return proto.CompactTextString(m) }
func (*VerificationData) ProtoMessage()    {}
func (*VerificationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{2}
}
func (m *VerificationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationData.Merge(m, src)
}
func (m *VerificationData) XXX_Size() int {
	return m.Size()
}
func (m *VerificationData) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationData.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationData proto.InternalMessageInfo

func (m *VerificationData) GetOriginChain() string {
	if m != nil {
		return m.OriginChain
	}
	return ""
}

func (m *VerificationData) GetIssuanceTimestamp() uint32 {
	if m != nil {
		return m.IssuanceTimestamp
	}
	return 0
}

func (m *VerificationData) GetExpirationTimestamp() uint32 {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return 0
}

// Contains information about issuer alias
type IssuerAlias struct {
	// Issuer company name
	IssuerAlias string `protobuf:"bytes,1,opt,name=issuer_alias,json=issuerAlias,proto3" json:"issuer_alias,omitempty"`
}

func (m *IssuerAlias) Reset()         { *m = IssuerAlias{} }
func (m *IssuerAlias) String() string { return proto.CompactTextString(m) }
func (*IssuerAlias) ProtoMessage()    {}
func (*IssuerAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{3}
}
func (m *IssuerAlias) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssuerAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssuerAlias.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssuerAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuerAlias.Merge(m, src)
}
func (m *IssuerAlias) XXX_Size() int {
	return m.Size()
}
func (m *IssuerAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuerAlias.DiscardUnknown(m)
}

var xxx_messageInfo_IssuerAlias proto.InternalMessageInfo

func (m *IssuerAlias) GetIssuerAlias() string {
	if m != nil {
		return m.IssuerAlias
	}
	return ""
}

func init() {
	proto.RegisterType((*AddressData)(nil), "swisstronik.compliance.AddressData")
	proto.RegisterType((*BanStatus)(nil), "swisstronik.compliance.BanStatus")
	proto.RegisterType((*VerificationData)(nil), "swisstronik.compliance.VerificationData")
	proto.RegisterType((*IssuerAlias)(nil), "swisstronik.compliance.IssuerAlias")
}

func init() {
	proto.RegisterFile("swisstronik/compliance/entities.proto", fileDescriptor_a6b6c3ec8e3c39ee)
}

var fileDescriptor_a6b6c3ec8e3c39ee = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x4e, 0xdb, 0x40,
	0x10, 0xc6, 0xe3, 0x56, 0x6a, 0xe3, 0x75, 0x2b, 0xb5, 0xdb, 0xa8, 0x8a, 0xd2, 0xca, 0x4d, 0x5c,
	0x55, 0xca, 0xa5, 0x4e, 0x0b, 0x17, 0x0e, 0x5c, 0x12, 0x10, 0x12, 0x57, 0x83, 0x38, 0x70, 0xb1,
	0xc6, 0xf6, 0x12, 0x46, 0xc4, 0xbb, 0xd6, 0xce, 0x06, 0xc2, 0x5b, 0x70, 0xe3, 0x95, 0x38, 0xe6,
	0xc8, 0x11, 0x25, 0x2f, 0x82, 0xbc, 0xf9, 0x63, 0x0b, 0xc1, 0x6d, 0xe6, 0x9b, 0x6f, 0x7e, 0xf3,
	0x49, 0xc3, 0xfe, 0xd0, 0x0d, 0x12, 0x19, 0xad, 0x24, 0x5e, 0x0d, 0x52, 0x95, 0x17, 0x13, 0x04,
	0x99, 0x8a, 0x81, 0x90, 0x06, 0x0d, 0x0a, 0x0a, 0x0b, 0xad, 0x8c, 0xe2, 0xdf, 0x6b, 0xb6, 0xb0,
	0xb2, 0x75, 0x5a, 0x63, 0x35, 0x56, 0xd6, 0x32, 0x28, 0xab, 0x95, 0xbb, 0xf3, 0xfb, 0x0d, 0x68,
	0x01, 0x1a, 0xf2, 0x35, 0x32, 0x98, 0x30, 0x6f, 0x98, 0x65, 0x5a, 0x10, 0x1d, 0x82, 0x01, 0xfe,
	0x8b, 0x79, 0x48, 0xf1, 0xb5, 0xd0, 0x78, 0x81, 0x22, 0x6b, 0x3b, 0x5d, 0xa7, 0xdf, 0x8c, 0x18,
	0xd2, 0xd9, 0x5a, 0xe1, 0xfb, 0xac, 0x99, 0x80, 0x8c, 0x33, 0x30, 0xd0, 0x7e, 0xd7, 0x75, 0xfa,
	0xde, 0x4e, 0x2f, 0x7c, 0x3d, 0x55, 0x38, 0x02, 0x79, 0x62, 0xc0, 0x4c, 0x29, 0xfa, 0x98, 0x80,
	0x2c, 0xf1, 0xc1, 0x11, 0x73, 0xb7, 0x2a, 0xff, 0xc1, 0x5c, 0xa4, 0x38, 0x01, 0x29, 0xb7, 0x97,
	0x9a, 0x48, 0x23, 0xdb, 0xf3, 0x9f, 0xcc, 0x35, 0x98, 0x0b, 0x32, 0x90, 0x17, 0xf6, 0xd0, 0xe7,
	0xa8, 0x12, 0x82, 0x7b, 0x87, 0x7d, 0x59, 0x45, 0x4a, 0xc1, 0xa0, 0xb2, 0x70, 0xde, 0x63, 0x9f,
	0x94, 0xc6, 0x31, 0xca, 0x38, 0xbd, 0x04, 0x94, 0x16, 0xe9, 0x46, 0xde, 0x4a, 0x3b, 0x28, 0x25,
	0xfe, 0x97, 0x71, 0x24, 0x9a, 0x96, 0xf1, 0xe2, 0x97, 0xf8, 0xaf, 0x9b, 0xc9, 0xe9, 0x66, 0xc0,
	0xff, 0xb3, 0x96, 0x98, 0x15, 0xa8, 0xed, 0x8d, 0xda, 0xc2, 0x7b, 0xbb, 0xf0, 0xad, 0x9a, 0x6d,
	0x57, 0x82, 0x7f, 0xcc, 0x3b, 0x26, 0x9a, 0x0a, 0x3d, 0x9c, 0x20, 0x50, 0x99, 0x09, 0x6d, 0x1b,
	0x43, 0xd9, 0x6f, 0x32, 0x61, 0x65, 0x19, 0xed, 0x3d, 0x2c, 0x7c, 0x67, 0xbe, 0xf0, 0x9d, 0xa7,
	0x85, 0xef, 0xdc, 0x2d, 0xfd, 0xc6, 0x7c, 0xe9, 0x37, 0x1e, 0x97, 0x7e, 0xe3, 0xdc, 0xaf, 0x3f,
	0x70, 0x56, 0x7f, 0xa1, 0xb9, 0x2d, 0x04, 0x25, 0x1f, 0xec, 0x0b, 0x77, 0x9f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x1d, 0xe3, 0x61, 0x51, 0x3e, 0x02, 0x00, 0x00,
}

func (m *AddressData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BanData != nil {
		{
			size, err := m.BanData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEntities(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BanStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BanStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BanStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.IsBanned {
		i--
		if m.IsBanned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerificationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.IssuanceTimestamp != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.IssuanceTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OriginChain) > 0 {
		i -= len(m.OriginChain)
		copy(dAtA[i:], m.OriginChain)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.OriginChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IssuerAlias) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssuerAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssuerAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerAlias) > 0 {
		i -= len(m.IssuerAlias)
		copy(dAtA[i:], m.IssuerAlias)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.IssuerAlias)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntities(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntities(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AddressData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsVerified {
		n += 2
	}
	if m.BanData != nil {
		l = m.BanData.Size()
		n += 1 + l + sovEntities(uint64(l))
	}
	return n
}

func (m *BanStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsBanned {
		n += 2
	}
	if m.Timestamp != 0 {
		n += 1 + sovEntities(uint64(m.Timestamp))
	}
	return n
}

func (m *VerificationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OriginChain)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	if m.IssuanceTimestamp != 0 {
		n += 1 + sovEntities(uint64(m.IssuanceTimestamp))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovEntities(uint64(m.ExpirationTimestamp))
	}
	return n
}

func (m *IssuerAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerAlias)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	return n
}

func sovEntities(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntities(x uint64) (n int) {
	return sovEntities(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddressData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BanData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BanData == nil {
				m.BanData = &BanStatus{}
			}
			if err := m.BanData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BanStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BanStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BanStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBanned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBanned = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerificationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceTimestamp", wireType)
			}
			m.IssuanceTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuanceTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssuerAlias) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssuerAlias: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssuerAlias: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAlias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAlias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntities(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntities
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntities
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntities
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntities        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntities          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntities = fmt.Errorf("proto: unexpected end of group")
)
