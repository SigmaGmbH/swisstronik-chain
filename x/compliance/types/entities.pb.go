// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: swisstronik/compliance/entities.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VerificationType int32

const (
	// VT_UNSPECIFIED defines an invalid/undefined verification type.
	VerificationType_VT_UNSPECIFIED  VerificationType = 0
	VerificationType_VT_KYC          VerificationType = 1
	VerificationType_VT_KYB          VerificationType = 2
	VerificationType_VT_KYW          VerificationType = 3
	VerificationType_VT_HUMANITY     VerificationType = 4
	VerificationType_VT_AML          VerificationType = 5
	VerificationType_VT_ADDRESS      VerificationType = 6
	VerificationType_VT_CUSTOM       VerificationType = 7
	VerificationType_VT_CREDIT_SCORE VerificationType = 8
)

var VerificationType_name = map[int32]string{
	0: "VT_UNSPECIFIED",
	1: "VT_KYC",
	2: "VT_KYB",
	3: "VT_KYW",
	4: "VT_HUMANITY",
	5: "VT_AML",
	6: "VT_ADDRESS",
	7: "VT_CUSTOM",
	8: "VT_CREDIT_SCORE",
}

var VerificationType_value = map[string]int32{
	"VT_UNSPECIFIED":  0,
	"VT_KYC":          1,
	"VT_KYB":          2,
	"VT_KYW":          3,
	"VT_HUMANITY":     4,
	"VT_AML":          5,
	"VT_ADDRESS":      6,
	"VT_CUSTOM":       7,
	"VT_CREDIT_SCORE": 8,
}

func (x VerificationType) String() string {
	return proto.EnumName(VerificationType_name, int32(x))
}

func (VerificationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{0}
}

type OperatorType int32

const (
	// OT_UNSPECIFIED defines an invalid/undefined operator type.
	OperatorType_OT_UNSPECIFIED OperatorType = 0
	// Initial Operator, can't be removed from the list of operators.
	// Both initial (constant) and regular operators can add or remove regular operators.
	OperatorType_OT_INITIAL OperatorType = 1
	OperatorType_OT_REGULAR OperatorType = 2
)

var OperatorType_name = map[int32]string{
	0: "OT_UNSPECIFIED",
	1: "OT_INITIAL",
	2: "OT_REGULAR",
}

var OperatorType_value = map[string]int32{
	"OT_UNSPECIFIED": 0,
	"OT_INITIAL":     1,
	"OT_REGULAR":     2,
}

func (x OperatorType) String() string {
	return proto.EnumName(OperatorType_name, int32(x))
}

func (OperatorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{1}
}

type OperatorDetails struct {
	// Operator address, who can add / update / remove issuers
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// Operator type
	OperatorType OperatorType `protobuf:"varint,2,opt,name=operator_type,json=operatorType,proto3,enum=swisstronik.compliance.OperatorType" json:"operator_type,omitempty"`
}

func (m *OperatorDetails) Reset()         { *m = OperatorDetails{} }
func (m *OperatorDetails) String() string { return proto.CompactTextString(m) }
func (*OperatorDetails) ProtoMessage()    {}
func (*OperatorDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{0}
}
func (m *OperatorDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorDetails.Merge(m, src)
}
func (m *OperatorDetails) XXX_Size() int {
	return m.Size()
}
func (m *OperatorDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorDetails.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorDetails proto.InternalMessageInfo

func (m *OperatorDetails) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *OperatorDetails) GetOperatorType() OperatorType {
	if m != nil {
		return m.OperatorType
	}
	return OperatorType_OT_UNSPECIFIED
}

type IssuerDetails struct {
	// Allows to easily understand
	// what entity can be associated with issuer address.
	// Issuer name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Basic issuer description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// URL to issuer website
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	// URL to issuer logo
	Logo string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	// Legal entity name
	LegalEntity string `protobuf:"bytes,5,opt,name=legalEntity,proto3" json:"legalEntity,omitempty"`
	// Issuer creator who created current issuer
	Creator string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *IssuerDetails) Reset()         { *m = IssuerDetails{} }
func (m *IssuerDetails) String() string { return proto.CompactTextString(m) }
func (*IssuerDetails) ProtoMessage()    {}
func (*IssuerDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{1}
}
func (m *IssuerDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssuerDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssuerDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssuerDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuerDetails.Merge(m, src)
}
func (m *IssuerDetails) XXX_Size() int {
	return m.Size()
}
func (m *IssuerDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuerDetails.DiscardUnknown(m)
}

var xxx_messageInfo_IssuerDetails proto.InternalMessageInfo

func (m *IssuerDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IssuerDetails) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *IssuerDetails) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *IssuerDetails) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *IssuerDetails) GetLegalEntity() string {
	if m != nil {
		return m.LegalEntity
	}
	return ""
}

func (m *IssuerDetails) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type AddressDetails struct {
	// Marks if contract deployed under this address is verified
	// by community. Only verified contracts will be allowed to write
	// to x/compliance module.
	IsVerified bool `protobuf:"varint,1,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	// Marks if verification for this address was revoked.
	IsRevoked bool `protobuf:"varint,2,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	// Verifications passed by this address
	Verifications []*Verification `protobuf:"bytes,3,rep,name=verifications,proto3" json:"verifications,omitempty"`
}

func (m *AddressDetails) Reset()         { *m = AddressDetails{} }
func (m *AddressDetails) String() string { return proto.CompactTextString(m) }
func (*AddressDetails) ProtoMessage()    {}
func (*AddressDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{2}
}
func (m *AddressDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressDetails.Merge(m, src)
}
func (m *AddressDetails) XXX_Size() int {
	return m.Size()
}
func (m *AddressDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressDetails.DiscardUnknown(m)
}

var xxx_messageInfo_AddressDetails proto.InternalMessageInfo

func (m *AddressDetails) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *AddressDetails) GetIsRevoked() bool {
	if m != nil {
		return m.IsRevoked
	}
	return false
}

func (m *AddressDetails) GetVerifications() []*Verification {
	if m != nil {
		return m.Verifications
	}
	return nil
}

type Verification struct {
	// Contains information about verification type (KYC, proof-of-humanity, etc).
	Type VerificationType `protobuf:"varint,1,opt,name=type,proto3,enum=swisstronik.compliance.VerificationType" json:"type,omitempty"`
	// Contains ID of details of passed verification in storage.
	VerificationId []byte `protobuf:"bytes,2,opt,name=verification_id,json=verificationId,proto3" json:"verification_id,omitempty"`
	// Issuer of verification
	IssuerAddress string `protobuf:"bytes,3,opt,name=issuer_address,json=issuerAddress,proto3" json:"issuer_address,omitempty"`
}

func (m *Verification) Reset()         { *m = Verification{} }
func (m *Verification) String() string { return proto.CompactTextString(m) }
func (*Verification) ProtoMessage()    {}
func (*Verification) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{3}
}
func (m *Verification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Verification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Verification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Verification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Verification.Merge(m, src)
}
func (m *Verification) XXX_Size() int {
	return m.Size()
}
func (m *Verification) XXX_DiscardUnknown() {
	xxx_messageInfo_Verification.DiscardUnknown(m)
}

var xxx_messageInfo_Verification proto.InternalMessageInfo

func (m *Verification) GetType() VerificationType {
	if m != nil {
		return m.Type
	}
	return VerificationType_VT_UNSPECIFIED
}

func (m *Verification) GetVerificationId() []byte {
	if m != nil {
		return m.VerificationId
	}
	return nil
}

func (m *Verification) GetIssuerAddress() string {
	if m != nil {
		return m.IssuerAddress
	}
	return ""
}

// VerificationDetails must have same members with VerificationDetails in "proto/swisstronik/compliance/entities.proto"
// But the member types can be different, such as string(address) to bytes
type VerificationDetails struct {
	// Verification type
	Type VerificationType `protobuf:"varint,1,opt,name=type,proto3,enum=swisstronik.compliance.VerificationType" json:"type,omitempty"`
	// Verification issuer address
	IssuerAddress string `protobuf:"bytes,2,opt,name=issuer_address,json=issuerAddress,proto3" json:"issuer_address,omitempty"`
	// From which chain proof was transferred
	OriginChain string `protobuf:"bytes,3,opt,name=origin_chain,json=originChain,proto3" json:"origin_chain,omitempty"`
	// Original issuance timestamp
	IssuanceTimestamp uint32 `protobuf:"varint,4,opt,name=issuance_timestamp,json=issuanceTimestamp,proto3" json:"issuance_timestamp,omitempty"`
	// Original expiration timestamp
	ExpirationTimestamp uint32 `protobuf:"varint,5,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// Original proof data (ZK-proof)
	OriginalData []byte `protobuf:"bytes,6,opt,name=original_data,json=originalData,proto3" json:"original_data,omitempty"`
	// ZK-proof original schema
	Schema string `protobuf:"bytes,7,opt,name=schema,proto3" json:"schema,omitempty"`
	// Verification id for checking(KYC/KYB/AML etc) from issuer side
	IssuerVerificationId string `protobuf:"bytes,8,opt,name=issuer_verification_id,json=issuerVerificationId,proto3" json:"issuer_verification_id,omitempty"`
	// Version
	Version uint32 `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *VerificationDetails) Reset()         { *m = VerificationDetails{} }
func (m *VerificationDetails) String() string { return proto.CompactTextString(m) }
func (*VerificationDetails) ProtoMessage()    {}
func (*VerificationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b6c3ec8e3c39ee, []int{4}
}
func (m *VerificationDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationDetails.Merge(m, src)
}
func (m *VerificationDetails) XXX_Size() int {
	return m.Size()
}
func (m *VerificationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationDetails proto.InternalMessageInfo

func (m *VerificationDetails) GetType() VerificationType {
	if m != nil {
		return m.Type
	}
	return VerificationType_VT_UNSPECIFIED
}

func (m *VerificationDetails) GetIssuerAddress() string {
	if m != nil {
		return m.IssuerAddress
	}
	return ""
}

func (m *VerificationDetails) GetOriginChain() string {
	if m != nil {
		return m.OriginChain
	}
	return ""
}

func (m *VerificationDetails) GetIssuanceTimestamp() uint32 {
	if m != nil {
		return m.IssuanceTimestamp
	}
	return 0
}

func (m *VerificationDetails) GetExpirationTimestamp() uint32 {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return 0
}

func (m *VerificationDetails) GetOriginalData() []byte {
	if m != nil {
		return m.OriginalData
	}
	return nil
}

func (m *VerificationDetails) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *VerificationDetails) GetIssuerVerificationId() string {
	if m != nil {
		return m.IssuerVerificationId
	}
	return ""
}

func (m *VerificationDetails) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterEnum("swisstronik.compliance.VerificationType", VerificationType_name, VerificationType_value)
	proto.RegisterEnum("swisstronik.compliance.OperatorType", OperatorType_name, OperatorType_value)
	proto.RegisterType((*OperatorDetails)(nil), "swisstronik.compliance.OperatorDetails")
	proto.RegisterType((*IssuerDetails)(nil), "swisstronik.compliance.IssuerDetails")
	proto.RegisterType((*AddressDetails)(nil), "swisstronik.compliance.AddressDetails")
	proto.RegisterType((*Verification)(nil), "swisstronik.compliance.Verification")
	proto.RegisterType((*VerificationDetails)(nil), "swisstronik.compliance.VerificationDetails")
}

func init() {
	proto.RegisterFile("swisstronik/compliance/entities.proto", fileDescriptor_a6b6c3ec8e3c39ee)
}

var fileDescriptor_a6b6c3ec8e3c39ee = []byte{
	// 718 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x8e, 0x93, 0x34, 0x1f, 0x93, 0x2f, 0xbf, 0xdb, 0xaa, 0xb2, 0x2a, 0xbd, 0x79, 0xf3, 0xa6,
	0x54, 0x44, 0x95, 0x48, 0xc5, 0xc7, 0x81, 0x03, 0x97, 0x34, 0x09, 0x60, 0x68, 0x1b, 0xb4, 0x71,
	0x82, 0xca, 0xc5, 0x5a, 0x92, 0x25, 0x5d, 0x35, 0xc9, 0x5a, 0xbb, 0x6e, 0x69, 0xff, 0x03, 0x07,
	0xee, 0x70, 0xe7, 0xaf, 0x70, 0xec, 0x91, 0x23, 0x6a, 0xff, 0x08, 0xda, 0xb5, 0x9d, 0xb8, 0xa5,
	0x95, 0x90, 0xb8, 0xcd, 0x3c, 0x33, 0xf3, 0xcc, 0xe3, 0x99, 0xf5, 0xc0, 0x96, 0xfc, 0xc8, 0xa4,
	0xf4, 0x05, 0x9f, 0xb3, 0xe3, 0x9d, 0x11, 0x9f, 0x79, 0x53, 0x46, 0xe6, 0x23, 0xba, 0x43, 0xe7,
	0x3e, 0xf3, 0x19, 0x95, 0x4d, 0x4f, 0x70, 0x9f, 0xa3, 0xf5, 0x58, 0x5a, 0x73, 0x99, 0xb6, 0xb1,
	0x36, 0xe1, 0x13, 0xae, 0x53, 0x76, 0x94, 0x15, 0x64, 0x6f, 0x6c, 0xde, 0x41, 0xea, 0x11, 0x41,
	0x66, 0x21, 0x65, 0xfd, 0x0c, 0x2a, 0x3d, 0x8f, 0x0a, 0xe2, 0x73, 0xd1, 0xa1, 0x3e, 0x61, 0x53,
	0x89, 0x36, 0x20, 0xc7, 0x43, 0xc8, 0x32, 0x6a, 0x46, 0x23, 0x8f, 0x17, 0x3e, 0xb2, 0xa1, 0x14,
	0xd9, 0xae, 0x7f, 0xee, 0x51, 0x2b, 0x59, 0x33, 0x1a, 0xe5, 0x47, 0xf7, 0x9a, 0xb7, 0x2b, 0x6b,
	0x46, 0xdc, 0xce, 0xb9, 0x47, 0x71, 0x91, 0xc7, 0xbc, 0xfa, 0x37, 0x03, 0x4a, 0xb6, 0x94, 0x27,
	0x74, 0xd1, 0x18, 0x41, 0x7a, 0x4e, 0x66, 0x34, 0x6c, 0xaa, 0x6d, 0x54, 0x83, 0xc2, 0x98, 0xca,
	0x91, 0x60, 0x9e, 0xcf, 0xf8, 0x5c, 0xb7, 0xcb, 0xe3, 0x38, 0x84, 0x4c, 0x48, 0x9d, 0x88, 0xa9,
	0x95, 0xd2, 0x11, 0x65, 0x2a, 0x9e, 0x29, 0x9f, 0x70, 0x2b, 0x1d, 0xf0, 0x28, 0x5b, 0xf1, 0x4c,
	0xe9, 0x84, 0x4c, 0xbb, 0x6a, 0xa2, 0xe7, 0xd6, 0x4a, 0xc0, 0x13, 0x83, 0x90, 0x05, 0xd9, 0x91,
	0xa0, 0xfa, 0xab, 0x33, 0x3a, 0x1a, 0xb9, 0xf5, 0xaf, 0x06, 0x94, 0x5b, 0xe3, 0xb1, 0xa0, 0x52,
	0x46, 0x52, 0xff, 0x83, 0x02, 0x93, 0xee, 0x29, 0x15, 0xec, 0x03, 0xa3, 0x63, 0xad, 0x38, 0x87,
	0x81, 0xc9, 0x61, 0x88, 0xa0, 0x7f, 0x01, 0x98, 0x74, 0x05, 0x3d, 0xe5, 0xc7, 0x74, 0xac, 0x65,
	0xe7, 0x70, 0x9e, 0x49, 0x1c, 0x00, 0xe8, 0x15, 0x94, 0x82, 0xe2, 0x11, 0x51, 0x1f, 0x21, 0xad,
	0x54, 0x2d, 0xd5, 0x28, 0xdc, 0x3d, 0xc7, 0x61, 0x2c, 0x19, 0x5f, 0x2f, 0x55, 0xf2, 0x8a, 0xf1,
	0x38, 0x7a, 0x06, 0x69, 0xbd, 0x1b, 0x43, 0xef, 0xa6, 0xf1, 0x27, 0x9c, 0x7a, 0x3f, 0xba, 0x0a,
	0xdd, 0x87, 0x4a, 0x9c, 0xdf, 0x65, 0x81, 0xfc, 0x22, 0x2e, 0xc7, 0x61, 0x7b, 0x8c, 0xb6, 0xa0,
	0xcc, 0xf4, 0xfe, 0x5c, 0x12, 0x0c, 0x27, 0xdc, 0x41, 0x29, 0x40, 0xc3, 0x89, 0xd5, 0x3f, 0xa5,
	0x60, 0x35, 0xde, 0x2a, 0x1a, 0xe1, 0xdf, 0xa9, 0xfc, 0xbd, 0x79, 0xf2, 0x96, 0xe6, 0xe8, 0x7f,
	0x28, 0x72, 0xc1, 0x26, 0x6c, 0xee, 0x8e, 0x8e, 0x08, 0x9b, 0x87, 0x0a, 0x0b, 0x01, 0xd6, 0x56,
	0x10, 0x7a, 0x00, 0x48, 0xd5, 0xa8, 0x66, 0xae, 0xcf, 0x66, 0x54, 0xfa, 0x64, 0xe6, 0xe9, 0xb7,
	0x53, 0xc2, 0xff, 0x44, 0x11, 0x27, 0x0a, 0xa0, 0x87, 0xb0, 0x46, 0xcf, 0x3c, 0x26, 0x82, 0xe1,
	0x2c, 0x0b, 0x56, 0x74, 0xc1, 0xea, 0x32, 0xb6, 0x2c, 0xd9, 0x84, 0x52, 0xd0, 0x90, 0x4c, 0xdd,
	0x31, 0xf1, 0x89, 0x7e, 0x5f, 0x45, 0x5c, 0x8c, 0xc0, 0x0e, 0xf1, 0x09, 0x5a, 0x87, 0x8c, 0x1c,
	0x1d, 0xd1, 0x19, 0xb1, 0xb2, 0x5a, 0x63, 0xe8, 0xa1, 0x27, 0xb0, 0x1e, 0x7e, 0xe8, 0xcd, 0xad,
	0xe4, 0x74, 0xde, 0x5a, 0x10, 0x1d, 0x5e, 0xdf, 0x8d, 0x05, 0xd9, 0x53, 0x2a, 0xa4, 0xfa, 0x65,
	0xf2, 0x5a, 0x58, 0xe4, 0x6e, 0x7f, 0x31, 0xc0, 0xbc, 0x39, 0x53, 0x84, 0xa0, 0x3c, 0x74, 0xdc,
	0xc1, 0x41, 0xff, 0x4d, 0xb7, 0x6d, 0x3f, 0xb7, 0xbb, 0x1d, 0x33, 0x81, 0x00, 0x32, 0x43, 0xc7,
	0x7d, 0x7d, 0xd8, 0x36, 0x8d, 0x85, 0xbd, 0x6b, 0x26, 0x17, 0xf6, 0x5b, 0x33, 0x85, 0x2a, 0x50,
	0x18, 0x3a, 0xee, 0xcb, 0xc1, 0x7e, 0xeb, 0xc0, 0x76, 0x0e, 0xcd, 0x74, 0x18, 0x6c, 0xed, 0xef,
	0x99, 0x2b, 0xa8, 0x0c, 0xa0, 0xec, 0x4e, 0x07, 0x77, 0xfb, 0x7d, 0x33, 0x83, 0x4a, 0x90, 0x1f,
	0x3a, 0x6e, 0x7b, 0xd0, 0x77, 0x7a, 0xfb, 0x66, 0x16, 0xad, 0x42, 0x45, 0xb9, 0xb8, 0xdb, 0xb1,
	0x1d, 0xb7, 0xdf, 0xee, 0xe1, 0xae, 0x99, 0xdb, 0xde, 0x85, 0x62, 0xfc, 0x64, 0x28, 0x61, 0xbd,
	0x9b, 0xc2, 0xca, 0x00, 0x3d, 0xc7, 0xb5, 0x0f, 0x6c, 0xc7, 0x6e, 0xed, 0x99, 0x46, 0xe8, 0xe3,
	0xee, 0x8b, 0xc1, 0x5e, 0x0b, 0x9b, 0xc9, 0xdd, 0xa7, 0xdf, 0x2f, 0xab, 0xc6, 0xc5, 0x65, 0xd5,
	0xf8, 0x79, 0x59, 0x35, 0x3e, 0x5f, 0x55, 0x13, 0x17, 0x57, 0xd5, 0xc4, 0x8f, 0xab, 0x6a, 0xe2,
	0x5d, 0x35, 0x7e, 0x11, 0xcf, 0xe2, 0x37, 0x51, 0xbd, 0x29, 0xf9, 0x3e, 0xa3, 0x6f, 0xe2, 0xe3,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x27, 0x51, 0x2e, 0x1d, 0x8f, 0x05, 0x00, 0x00,
}

func (m *OperatorDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorType != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.OperatorType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IssuerDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssuerDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssuerDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LegalEntity) > 0 {
		i -= len(m.LegalEntity)
		copy(dAtA[i:], m.LegalEntity)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.LegalEntity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddressDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Verifications) > 0 {
		for iNdEx := len(m.Verifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Verifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEntities(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsRevoked {
		i--
		if m.IsRevoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Verification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Verification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Verification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerificationId) > 0 {
		i -= len(m.VerificationId)
		copy(dAtA[i:], m.VerificationId)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.VerificationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerificationDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x48
	}
	if len(m.IssuerVerificationId) > 0 {
		i -= len(m.IssuerVerificationId)
		copy(dAtA[i:], m.IssuerVerificationId)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.IssuerVerificationId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.OriginalData) > 0 {
		i -= len(m.OriginalData)
		copy(dAtA[i:], m.OriginalData)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.OriginalData)))
		i--
		dAtA[i] = 0x32
	}
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if m.IssuanceTimestamp != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.IssuanceTimestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OriginChain) > 0 {
		i -= len(m.OriginChain)
		copy(dAtA[i:], m.OriginChain)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.OriginChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintEntities(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintEntities(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEntities(dAtA []byte, offset int, v uint64) int {
	offset -= sovEntities(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OperatorDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	if m.OperatorType != 0 {
		n += 1 + sovEntities(uint64(m.OperatorType))
	}
	return n
}

func (m *IssuerDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.LegalEntity)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	return n
}

func (m *AddressDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsVerified {
		n += 2
	}
	if m.IsRevoked {
		n += 2
	}
	if len(m.Verifications) > 0 {
		for _, e := range m.Verifications {
			l = e.Size()
			n += 1 + l + sovEntities(uint64(l))
		}
	}
	return n
}

func (m *Verification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEntities(uint64(m.Type))
	}
	l = len(m.VerificationId)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	return n
}

func (m *VerificationDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovEntities(uint64(m.Type))
	}
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.OriginChain)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	if m.IssuanceTimestamp != 0 {
		n += 1 + sovEntities(uint64(m.IssuanceTimestamp))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovEntities(uint64(m.ExpirationTimestamp))
	}
	l = len(m.OriginalData)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	l = len(m.IssuerVerificationId)
	if l > 0 {
		n += 1 + l + sovEntities(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovEntities(uint64(m.Version))
	}
	return n
}

func sovEntities(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEntities(x uint64) (n int) {
	return sovEntities(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperatorDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorType", wireType)
			}
			m.OperatorType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorType |= OperatorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssuerDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssuerDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssuerDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegalEntity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegalEntity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRevoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRevoked = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifications = append(m.Verifications, &Verification{})
			if err := m.Verifications[len(m.Verifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Verification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Verification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Verification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VerificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationId = append(m.VerificationId[:0], dAtA[iNdEx:postIndex]...)
			if m.VerificationId == nil {
				m.VerificationId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerificationDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VerificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceTimestamp", wireType)
			}
			m.IssuanceTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuanceTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalData = append(m.OriginalData[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalData == nil {
				m.OriginalData = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerVerificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEntities
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEntities
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerVerificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEntities(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEntities
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEntities(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEntities
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEntities
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEntities
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEntities
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEntities
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEntities        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEntities          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEntities = fmt.Errorf("proto: unexpected end of group")
)
