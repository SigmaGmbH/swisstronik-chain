// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: swisstronik/compliance/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryOperatorDetailsRequest is request type for Query/OperatorDetails RPC method.
type QueryOperatorDetailsRequest struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operatorAddress,proto3" json:"operatorAddress,omitempty"`
}

func (m *QueryOperatorDetailsRequest) Reset()         { *m = QueryOperatorDetailsRequest{} }
func (m *QueryOperatorDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDetailsRequest) ProtoMessage()    {}
func (*QueryOperatorDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{2}
}
func (m *QueryOperatorDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDetailsRequest.Merge(m, src)
}
func (m *QueryOperatorDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDetailsRequest proto.InternalMessageInfo

func (m *QueryOperatorDetailsRequest) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

// QueryOperatorDetailsResponse is response type for Query/OperatorDetails RPC method.
type QueryOperatorDetailsResponse struct {
	Details *OperatorDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryOperatorDetailsResponse) Reset()         { *m = QueryOperatorDetailsResponse{} }
func (m *QueryOperatorDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDetailsResponse) ProtoMessage()    {}
func (*QueryOperatorDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{3}
}
func (m *QueryOperatorDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDetailsResponse.Merge(m, src)
}
func (m *QueryOperatorDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDetailsResponse proto.InternalMessageInfo

func (m *QueryOperatorDetailsResponse) GetDetails() *OperatorDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// QueryAddressDetailsRequest is request type for the Query/AddressDetails RPC method.
type QueryAddressDetailsRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAddressDetailsRequest) Reset()         { *m = QueryAddressDetailsRequest{} }
func (m *QueryAddressDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressDetailsRequest) ProtoMessage()    {}
func (*QueryAddressDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{4}
}
func (m *QueryAddressDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressDetailsRequest.Merge(m, src)
}
func (m *QueryAddressDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressDetailsRequest proto.InternalMessageInfo

func (m *QueryAddressDetailsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryAddressDetailsResponse is response type for the Query/AddressDetails RPC method.
type QueryAddressDetailsResponse struct {
	// data holds all the verification data for provided address
	Data *AddressDetails `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryAddressDetailsResponse) Reset()         { *m = QueryAddressDetailsResponse{} }
func (m *QueryAddressDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressDetailsResponse) ProtoMessage()    {}
func (*QueryAddressDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{5}
}
func (m *QueryAddressDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressDetailsResponse.Merge(m, src)
}
func (m *QueryAddressDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressDetailsResponse proto.InternalMessageInfo

func (m *QueryAddressDetailsResponse) GetData() *AddressDetails {
	if m != nil {
		return m.Data
	}
	return nil
}

// QueryAddressesDetailsRequest is request type for the Query/AddressesDetails RPC method.
type QueryAddressesDetailsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAddressesDetailsRequest) Reset()         { *m = QueryAddressesDetailsRequest{} }
func (m *QueryAddressesDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressesDetailsRequest) ProtoMessage()    {}
func (*QueryAddressesDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{6}
}
func (m *QueryAddressesDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressesDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressesDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressesDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressesDetailsRequest.Merge(m, src)
}
func (m *QueryAddressesDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressesDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressesDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressesDetailsRequest proto.InternalMessageInfo

func (m *QueryAddressesDetailsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAddressesDetailsResponse is response type for the Query/AddressesDetails RPC method.
type QueryAddressesDetailsResponse struct {
	// addresses is a slice of registered addresses for the compliance module
	Addresses []QueryAddressesDetailsResponse_AddressDetailsWithKey `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAddressesDetailsResponse) Reset()         { *m = QueryAddressesDetailsResponse{} }
func (m *QueryAddressesDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressesDetailsResponse) ProtoMessage()    {}
func (*QueryAddressesDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{7}
}
func (m *QueryAddressesDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressesDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressesDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressesDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressesDetailsResponse.Merge(m, src)
}
func (m *QueryAddressesDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressesDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressesDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressesDetailsResponse proto.InternalMessageInfo

func (m *QueryAddressesDetailsResponse) GetAddresses() []QueryAddressesDetailsResponse_AddressDetailsWithKey {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *QueryAddressesDetailsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAddressesDetailsResponse_AddressDetailsWithKey struct {
	Address        string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AddressDetails *AddressDetails `protobuf:"bytes,2,opt,name=addressDetails,proto3" json:"addressDetails,omitempty"`
}

func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) Reset() {
	*m = QueryAddressesDetailsResponse_AddressDetailsWithKey{}
}
func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAddressesDetailsResponse_AddressDetailsWithKey) ProtoMessage() {}
func (*QueryAddressesDetailsResponse_AddressDetailsWithKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{7, 0}
}
func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressesDetailsResponse_AddressDetailsWithKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressesDetailsResponse_AddressDetailsWithKey.Merge(m, src)
}
func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressesDetailsResponse_AddressDetailsWithKey.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressesDetailsResponse_AddressDetailsWithKey proto.InternalMessageInfo

func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) GetAddressDetails() *AddressDetails {
	if m != nil {
		return m.AddressDetails
	}
	return nil
}

// QueryIssuerDetailsRequest is request type for the Query/IssuerDetails RPC method.
type QueryIssuerDetailsRequest struct {
	IssuerAddress string `protobuf:"bytes,1,opt,name=issuerAddress,proto3" json:"issuerAddress,omitempty"`
}

func (m *QueryIssuerDetailsRequest) Reset()         { *m = QueryIssuerDetailsRequest{} }
func (m *QueryIssuerDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIssuerDetailsRequest) ProtoMessage()    {}
func (*QueryIssuerDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{8}
}
func (m *QueryIssuerDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuerDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuerDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuerDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuerDetailsRequest.Merge(m, src)
}
func (m *QueryIssuerDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuerDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuerDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuerDetailsRequest proto.InternalMessageInfo

func (m *QueryIssuerDetailsRequest) GetIssuerAddress() string {
	if m != nil {
		return m.IssuerAddress
	}
	return ""
}

// QueryIssuerDetailsResponse is response type for the Query/IssuerDetails RPC method.
type QueryIssuerDetailsResponse struct {
	Details *IssuerDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryIssuerDetailsResponse) Reset()         { *m = QueryIssuerDetailsResponse{} }
func (m *QueryIssuerDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIssuerDetailsResponse) ProtoMessage()    {}
func (*QueryIssuerDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{9}
}
func (m *QueryIssuerDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuerDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuerDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuerDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuerDetailsResponse.Merge(m, src)
}
func (m *QueryIssuerDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuerDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuerDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuerDetailsResponse proto.InternalMessageInfo

func (m *QueryIssuerDetailsResponse) GetDetails() *IssuerDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// QueryIssuersDetailsRequest is request type for the Query/IssuersDetails RPC method.
type QueryIssuersDetailsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIssuersDetailsRequest) Reset()         { *m = QueryIssuersDetailsRequest{} }
func (m *QueryIssuersDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIssuersDetailsRequest) ProtoMessage()    {}
func (*QueryIssuersDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{10}
}
func (m *QueryIssuersDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuersDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuersDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuersDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuersDetailsRequest.Merge(m, src)
}
func (m *QueryIssuersDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuersDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuersDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuersDetailsRequest proto.InternalMessageInfo

func (m *QueryIssuersDetailsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIssuersDetailsResponse is response type for the Query/IssuersDetails RPC method.
type QueryIssuersDetailsResponse struct {
	// issuers is a slice of registered issuers for the compliance module
	Issuers []QueryIssuersDetailsResponse_IssuerDetailsWithKey `protobuf:"bytes,1,rep,name=issuers,proto3" json:"issuers"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIssuersDetailsResponse) Reset()         { *m = QueryIssuersDetailsResponse{} }
func (m *QueryIssuersDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIssuersDetailsResponse) ProtoMessage()    {}
func (*QueryIssuersDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{11}
}
func (m *QueryIssuersDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuersDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuersDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuersDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuersDetailsResponse.Merge(m, src)
}
func (m *QueryIssuersDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuersDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuersDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuersDetailsResponse proto.InternalMessageInfo

func (m *QueryIssuersDetailsResponse) GetIssuers() []QueryIssuersDetailsResponse_IssuerDetailsWithKey {
	if m != nil {
		return m.Issuers
	}
	return nil
}

func (m *QueryIssuersDetailsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryIssuersDetailsResponse_IssuerDetailsWithKey struct {
	IssuerAddress string         `protobuf:"bytes,1,opt,name=issuerAddress,proto3" json:"issuerAddress,omitempty"`
	IssuerDetails *IssuerDetails `protobuf:"bytes,2,opt,name=issuerDetails,proto3" json:"issuerDetails,omitempty"`
}

func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) Reset() {
	*m = QueryIssuersDetailsResponse_IssuerDetailsWithKey{}
}
func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIssuersDetailsResponse_IssuerDetailsWithKey) ProtoMessage() {}
func (*QueryIssuersDetailsResponse_IssuerDetailsWithKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{11, 0}
}
func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuersDetailsResponse_IssuerDetailsWithKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuersDetailsResponse_IssuerDetailsWithKey.Merge(m, src)
}
func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuersDetailsResponse_IssuerDetailsWithKey.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuersDetailsResponse_IssuerDetailsWithKey proto.InternalMessageInfo

func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) GetIssuerAddress() string {
	if m != nil {
		return m.IssuerAddress
	}
	return ""
}

func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) GetIssuerDetails() *IssuerDetails {
	if m != nil {
		return m.IssuerDetails
	}
	return nil
}

// QueryVerificationDetailsRequest is request type for the Query/VerificationDetails RPC method.
type QueryVerificationDetailsRequest struct {
	VerificationID string `protobuf:"bytes,1,opt,name=verificationID,proto3" json:"verificationID,omitempty"`
}

func (m *QueryVerificationDetailsRequest) Reset()         { *m = QueryVerificationDetailsRequest{} }
func (m *QueryVerificationDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationDetailsRequest) ProtoMessage()    {}
func (*QueryVerificationDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{12}
}
func (m *QueryVerificationDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationDetailsRequest.Merge(m, src)
}
func (m *QueryVerificationDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationDetailsRequest proto.InternalMessageInfo

func (m *QueryVerificationDetailsRequest) GetVerificationID() string {
	if m != nil {
		return m.VerificationID
	}
	return ""
}

// QueryVerificationDetailsResponse is response type for the Query/VerificationDetails RPC method.
type QueryVerificationDetailsResponse struct {
	Details *VerificationDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryVerificationDetailsResponse) Reset()         { *m = QueryVerificationDetailsResponse{} }
func (m *QueryVerificationDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationDetailsResponse) ProtoMessage()    {}
func (*QueryVerificationDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{13}
}
func (m *QueryVerificationDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationDetailsResponse.Merge(m, src)
}
func (m *QueryVerificationDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationDetailsResponse proto.InternalMessageInfo

func (m *QueryVerificationDetailsResponse) GetDetails() *VerificationDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// QueryVerificationDetailsRequest is request type for the Query/VerificationsDetails RPC method.
type QueryVerificationsDetailsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVerificationsDetailsRequest) Reset()         { *m = QueryVerificationsDetailsRequest{} }
func (m *QueryVerificationsDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationsDetailsRequest) ProtoMessage()    {}
func (*QueryVerificationsDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{14}
}
func (m *QueryVerificationsDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationsDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationsDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationsDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationsDetailsRequest.Merge(m, src)
}
func (m *QueryVerificationsDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationsDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationsDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationsDetailsRequest proto.InternalMessageInfo

func (m *QueryVerificationsDetailsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVerificationsDetailsResponse is response type for the Query/VerificationsDetails RPC method.
type QueryVerificationsDetailsResponse struct {
	// verifications is a slice of registered verifications for the compliance module
	Verifications []QueryVerificationsDetailsResponse_VerificationDetailsWithKey `protobuf:"bytes,1,rep,name=verifications,proto3" json:"verifications"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVerificationsDetailsResponse) Reset()         { *m = QueryVerificationsDetailsResponse{} }
func (m *QueryVerificationsDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationsDetailsResponse) ProtoMessage()    {}
func (*QueryVerificationsDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{15}
}
func (m *QueryVerificationsDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationsDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationsDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationsDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationsDetailsResponse.Merge(m, src)
}
func (m *QueryVerificationsDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationsDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationsDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationsDetailsResponse proto.InternalMessageInfo

func (m *QueryVerificationsDetailsResponse) GetVerifications() []QueryVerificationsDetailsResponse_VerificationDetailsWithKey {
	if m != nil {
		return m.Verifications
	}
	return nil
}

func (m *QueryVerificationsDetailsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryVerificationsDetailsResponse_VerificationDetailsWithKey struct {
	VerificationID      []byte               `protobuf:"bytes,1,opt,name=verificationID,proto3" json:"verificationID,omitempty"`
	VerificationDetails *VerificationDetails `protobuf:"bytes,2,opt,name=verificationDetails,proto3" json:"verificationDetails,omitempty"`
}

func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) Reset() {
	*m = QueryVerificationsDetailsResponse_VerificationDetailsWithKey{}
}
func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) String() string {
	return proto.CompactTextString(m)
}
func (*QueryVerificationsDetailsResponse_VerificationDetailsWithKey) ProtoMessage() {}
func (*QueryVerificationsDetailsResponse_VerificationDetailsWithKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{15, 0}
}
func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationsDetailsResponse_VerificationDetailsWithKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationsDetailsResponse_VerificationDetailsWithKey.Merge(m, src)
}
func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationsDetailsResponse_VerificationDetailsWithKey.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationsDetailsResponse_VerificationDetailsWithKey proto.InternalMessageInfo

func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) GetVerificationID() []byte {
	if m != nil {
		return m.VerificationID
	}
	return nil
}

func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) GetVerificationDetails() *VerificationDetails {
	if m != nil {
		return m.VerificationDetails
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "swisstronik.compliance.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "swisstronik.compliance.QueryParamsResponse")
	proto.RegisterType((*QueryOperatorDetailsRequest)(nil), "swisstronik.compliance.QueryOperatorDetailsRequest")
	proto.RegisterType((*QueryOperatorDetailsResponse)(nil), "swisstronik.compliance.QueryOperatorDetailsResponse")
	proto.RegisterType((*QueryAddressDetailsRequest)(nil), "swisstronik.compliance.QueryAddressDetailsRequest")
	proto.RegisterType((*QueryAddressDetailsResponse)(nil), "swisstronik.compliance.QueryAddressDetailsResponse")
	proto.RegisterType((*QueryAddressesDetailsRequest)(nil), "swisstronik.compliance.QueryAddressesDetailsRequest")
	proto.RegisterType((*QueryAddressesDetailsResponse)(nil), "swisstronik.compliance.QueryAddressesDetailsResponse")
	proto.RegisterType((*QueryAddressesDetailsResponse_AddressDetailsWithKey)(nil), "swisstronik.compliance.QueryAddressesDetailsResponse.AddressDetailsWithKey")
	proto.RegisterType((*QueryIssuerDetailsRequest)(nil), "swisstronik.compliance.QueryIssuerDetailsRequest")
	proto.RegisterType((*QueryIssuerDetailsResponse)(nil), "swisstronik.compliance.QueryIssuerDetailsResponse")
	proto.RegisterType((*QueryIssuersDetailsRequest)(nil), "swisstronik.compliance.QueryIssuersDetailsRequest")
	proto.RegisterType((*QueryIssuersDetailsResponse)(nil), "swisstronik.compliance.QueryIssuersDetailsResponse")
	proto.RegisterType((*QueryIssuersDetailsResponse_IssuerDetailsWithKey)(nil), "swisstronik.compliance.QueryIssuersDetailsResponse.IssuerDetailsWithKey")
	proto.RegisterType((*QueryVerificationDetailsRequest)(nil), "swisstronik.compliance.QueryVerificationDetailsRequest")
	proto.RegisterType((*QueryVerificationDetailsResponse)(nil), "swisstronik.compliance.QueryVerificationDetailsResponse")
	proto.RegisterType((*QueryVerificationsDetailsRequest)(nil), "swisstronik.compliance.QueryVerificationsDetailsRequest")
	proto.RegisterType((*QueryVerificationsDetailsResponse)(nil), "swisstronik.compliance.QueryVerificationsDetailsResponse")
	proto.RegisterType((*QueryVerificationsDetailsResponse_VerificationDetailsWithKey)(nil), "swisstronik.compliance.QueryVerificationsDetailsResponse.VerificationDetailsWithKey")
}

func init() {
	proto.RegisterFile("swisstronik/compliance/query.proto", fileDescriptor_f80d6bdaf4aa1245)
}

var fileDescriptor_f80d6bdaf4aa1245 = []byte{
	// 956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xdf, 0x4f, 0x1d, 0x45,
	0x14, 0xc7, 0x19, 0x5a, 0x21, 0x3d, 0x08, 0x35, 0x03, 0x1a, 0xbc, 0xd6, 0x05, 0xa6, 0xf2, 0xa3,
	0x25, 0xee, 0xca, 0x85, 0xb6, 0xd8, 0x68, 0x0c, 0x4d, 0xb5, 0x12, 0x12, 0xad, 0x68, 0x34, 0x9a,
	0xf4, 0x61, 0xb8, 0x77, 0x7a, 0xbb, 0x0a, 0x3b, 0xdb, 0x9d, 0x05, 0x25, 0x37, 0x24, 0xea, 0x8b,
	0xe9, 0x9b, 0x89, 0xf1, 0x1f, 0xd0, 0x37, 0x63, 0x7c, 0x36, 0xfe, 0x03, 0xf6, 0xb1, 0x89, 0x2f,
	0x3e, 0xa8, 0x31, 0xe0, 0x1f, 0x62, 0x98, 0x3d, 0x0b, 0x3b, 0xd3, 0x9d, 0xed, 0x5e, 0xd2, 0xbe,
	0xc1, 0xcc, 0xf9, 0xf1, 0x39, 0x33, 0xdf, 0x9d, 0x73, 0x2e, 0x30, 0xf5, 0x79, 0xa8, 0x54, 0x9a,
	0xc8, 0x28, 0xfc, 0x2c, 0x68, 0xc9, 0xad, 0x78, 0x33, 0xe4, 0x51, 0x4b, 0x04, 0x77, 0xb7, 0x45,
	0xb2, 0xeb, 0xc7, 0x89, 0x4c, 0x25, 0x7d, 0xae, 0x60, 0xe3, 0x1f, 0xdb, 0x34, 0xc6, 0x3a, 0xb2,
	0x23, 0xb5, 0x49, 0x70, 0xf8, 0x57, 0x66, 0xdd, 0x38, 0xd7, 0x91, 0xb2, 0xb3, 0x29, 0x02, 0x1e,
	0x87, 0x01, 0x8f, 0x22, 0x99, 0xf2, 0x34, 0x94, 0x91, 0xc2, 0xdd, 0x8b, 0x2d, 0xa9, 0xb6, 0xa4,
	0x0a, 0x36, 0xb8, 0xc2, 0x24, 0xc1, 0xce, 0xc2, 0x86, 0x48, 0xf9, 0x42, 0x10, 0xf3, 0x4e, 0x18,
	0x69, 0x63, 0xb4, 0x3d, 0xef, 0x60, 0x8b, 0x79, 0xc2, 0xb7, 0xf2, 0x80, 0xd3, 0x0e, 0x23, 0x11,
	0xa5, 0x61, 0x1a, 0x0a, 0x34, 0x63, 0x63, 0x40, 0xdf, 0x3b, 0xcc, 0x76, 0x53, 0xfb, 0xae, 0x8b,
	0xbb, 0xdb, 0x42, 0xa5, 0xec, 0x7d, 0x18, 0x35, 0x56, 0x55, 0x2c, 0x23, 0x25, 0xe8, 0x6b, 0x30,
	0x90, 0xe5, 0x18, 0x27, 0x93, 0x64, 0x6e, 0xa8, 0xe9, 0xf9, 0xe5, 0x27, 0xe0, 0x67, 0x7e, 0xd7,
	0x4e, 0xdf, 0xff, 0x67, 0xa2, 0x6f, 0x1d, 0x7d, 0xd8, 0x0d, 0x78, 0x41, 0x07, 0x7d, 0x37, 0x16,
	0x09, 0x4f, 0x65, 0x72, 0x5d, 0xa4, 0x3c, 0xdc, 0xcc, 0x73, 0xd2, 0x39, 0x38, 0x2b, 0x71, 0x67,
	0xa5, 0xdd, 0x4e, 0x84, 0xca, 0xb2, 0x9c, 0x59, 0xb7, 0x97, 0x19, 0x87, 0x73, 0xe5, 0x81, 0x10,
	0x73, 0x05, 0x06, 0xdb, 0xd9, 0x12, 0x72, 0xce, 0xba, 0x38, 0xed, 0x08, 0xb9, 0x1f, 0xbb, 0x0c,
	0x0d, 0x9d, 0x02, 0x53, 0x5a, 0xa8, 0xe3, 0x30, 0xc8, 0x0d, 0xc4, 0xfc, 0x5f, 0xf6, 0x31, 0xd6,
	0x68, 0xfb, 0x21, 0xd9, 0x55, 0x38, 0xdd, 0xe6, 0x29, 0x47, 0xac, 0x19, 0x17, 0x96, 0xe5, 0xad,
	0x7d, 0xd8, 0x6d, 0xac, 0x1a, 0x37, 0x85, 0x0d, 0xf5, 0x16, 0xc0, 0xb1, 0x52, 0x8e, 0x32, 0x64,
	0xb2, 0xf2, 0x0f, 0x65, 0xe5, 0x67, 0xda, 0x45, 0x59, 0xf9, 0x37, 0x79, 0x47, 0xa0, 0xef, 0x7a,
	0xc1, 0x93, 0xfd, 0xdd, 0x0f, 0x2f, 0x3a, 0x12, 0x61, 0x15, 0x12, 0xce, 0xf0, 0x7c, 0x6f, 0x9c,
	0x4c, 0x9e, 0x9a, 0x1b, 0x6a, 0xae, 0xb9, 0x4a, 0xa9, 0x8c, 0x64, 0x15, 0xfa, 0x51, 0x98, 0xde,
	0x59, 0x13, 0xbb, 0x28, 0x9b, 0xe3, 0x1c, 0xf4, 0x86, 0x51, 0x5a, 0x3f, 0xde, 0xe9, 0xa3, 0x4a,
	0xcb, 0x72, 0x14, 0x6b, 0x6b, 0x7c, 0x45, 0xe0, 0xd9, 0xd2, 0x9c, 0xee, 0x2b, 0xa5, 0xef, 0xc0,
	0x08, 0x37, 0x5c, 0x10, 0xa0, 0xee, 0xed, 0x59, 0xde, 0x6c, 0x05, 0x9e, 0xd7, 0x87, 0xb2, 0xaa,
	0xd4, 0xb6, 0xb0, 0x3f, 0x82, 0x97, 0x60, 0x38, 0xd4, 0xeb, 0xe6, 0x27, 0x60, 0x2e, 0xb2, 0x5b,
	0xa8, 0x4e, 0x2b, 0x04, 0x5e, 0xcf, 0x1b, 0xb6, 0xfc, 0xa7, 0x5d, 0xa4, 0xa6, 0xff, 0x91, 0xf8,
	0xdb, 0x46, 0xf8, 0x27, 0xa5, 0xb3, 0xbf, 0xfa, 0xf1, 0x5b, 0xb1, 0xd3, 0x60, 0x19, 0x77, 0x60,
	0x30, 0xab, 0x3a, 0xd7, 0xd8, 0xdb, 0x95, 0x1a, 0x2b, 0x8f, 0x62, 0x96, 0x68, 0x0a, 0x2c, 0x0f,
	0xff, 0xf8, 0xe4, 0x75, 0x8f, 0xc0, 0x58, 0x59, 0xc2, 0x7a, 0xd7, 0x4a, 0xd7, 0x72, 0x2b, 0x53,
	0x68, 0x35, 0xaf, 0xcf, 0xf4, 0x65, 0xab, 0x30, 0xa1, 0xcf, 0xe5, 0x43, 0x91, 0x84, 0xb7, 0xc3,
	0x96, 0x06, 0xb4, 0x6e, 0x72, 0x06, 0x46, 0x76, 0x0a, 0xbb, 0xab, 0xd7, 0x11, 0xcb, 0x5a, 0x65,
	0x21, 0x4c, 0xba, 0x43, 0xe1, 0x6d, 0xbd, 0x69, 0x8b, 0x6e, 0xde, 0x45, 0x5d, 0x16, 0xe5, 0x48,
	0x7a, 0x9f, 0x96, 0xa4, 0x7a, 0x52, 0x02, 0xfc, 0xfe, 0x14, 0x4c, 0x55, 0x24, 0xc3, 0xc2, 0xbe,
	0x24, 0x30, 0x5c, 0x3c, 0x8f, 0x5c, 0x8d, 0x1f, 0x54, 0xaa, 0xb1, 0x2a, 0x64, 0xd9, 0x09, 0x98,
	0xca, 0x34, 0x13, 0x3e, 0x3e, 0x7d, 0xfe, 0x48, 0xa0, 0xe1, 0x4e, 0xee, 0xd0, 0xc3, 0xd3, 0xb6,
	0x1e, 0xe8, 0x2d, 0x18, 0xdd, 0x79, 0x38, 0x0a, 0x82, 0xf5, 0x74, 0xef, 0x65, 0x71, 0x9a, 0xdf,
	0x0c, 0xc1, 0x53, 0xfa, 0x10, 0xe9, 0x3d, 0x02, 0x03, 0xd9, 0x28, 0x41, 0x2f, 0x56, 0x1e, 0xb7,
	0x31, 0xbd, 0x34, 0xe6, 0x6b, 0xd9, 0x66, 0xe7, 0xc3, 0x66, 0xbe, 0xfe, 0xe3, 0xbf, 0xef, 0xfa,
	0x27, 0xa9, 0x17, 0x54, 0x4e, 0x55, 0xf4, 0x57, 0x02, 0x67, 0xad, 0x71, 0x81, 0x2e, 0x56, 0x26,
	0x2a, 0x9f, 0x73, 0x1a, 0x4b, 0xbd, 0x39, 0x21, 0xe6, 0x55, 0x8d, 0xb9, 0x44, 0x9b, 0x2e, 0xcc,
	0x7c, 0x48, 0x0a, 0xba, 0xd6, 0xb8, 0xb4, 0x47, 0x7f, 0x26, 0x30, 0x62, 0x36, 0x25, 0xda, 0xac,
	0xd3, 0xaf, 0x2d, 0xf0, 0xc5, 0x9e, 0x7c, 0x90, 0x7b, 0x41, 0x73, 0xcf, 0xd3, 0x0b, 0x2e, 0x6e,
	0xec, 0x8e, 0x41, 0x97, 0xe7, 0xb8, 0x3f, 0x11, 0x78, 0xc6, 0x9e, 0x18, 0xe8, 0x52, 0x8f, 0x03,
	0x46, 0x86, 0x7c, 0xe9, 0x44, 0x63, 0x09, 0xbb, 0xa0, 0xa1, 0xcf, 0xd3, 0xa9, 0x47, 0x40, 0x0b,
	0x45, 0x7f, 0x21, 0x30, 0x6c, 0xbc, 0xc3, 0x74, 0xa1, 0x46, 0x9b, 0xb2, 0x30, 0x9b, 0xbd, 0xb8,
	0x20, 0xe3, 0x65, 0xcd, 0xf8, 0x0a, 0xf5, 0x5d, 0x8c, 0x59, 0x3b, 0x08, 0xba, 0x46, 0x8f, 0xd9,
	0xa3, 0x3f, 0x10, 0x18, 0x31, 0x7b, 0x25, 0x6d, 0xf6, 0xd4, 0x58, 0xeb, 0x88, 0xa1, 0xbc, 0x19,
	0xb3, 0x59, 0xcd, 0x3c, 0x45, 0x27, 0xaa, 0x99, 0x15, 0xfd, 0x9d, 0xc0, 0x68, 0xc9, 0x7b, 0x41,
	0xaf, 0xd4, 0x7e, 0x74, 0x2d, 0xdc, 0xe5, 0xde, 0x1d, 0x91, 0xf9, 0x75, 0xcd, 0x7c, 0x85, 0x5e,
	0x72, 0x31, 0x17, 0x9f, 0xb0, 0xa0, 0x6b, 0x3e, 0x95, 0x7b, 0xf4, 0x37, 0x02, 0x63, 0x65, 0xcd,
	0x80, 0x2e, 0x9f, 0xa0, 0x7f, 0x64, 0xb5, 0xbc, 0x7a, 0xe2, 0xce, 0xc3, 0x5e, 0xd6, 0xc5, 0xcc,
	0xd2, 0xe9, 0x3a, 0xc5, 0xa8, 0x6b, 0xcb, 0xf7, 0xf7, 0x3d, 0xf2, 0x60, 0xdf, 0x23, 0xff, 0xee,
	0x7b, 0xe4, 0xdb, 0x03, 0xaf, 0xef, 0xc1, 0x81, 0xd7, 0xf7, 0xe7, 0x81, 0xd7, 0xf7, 0x89, 0x57,
	0xf4, 0xff, 0xa2, 0x18, 0x21, 0xdd, 0x8d, 0x85, 0xda, 0x18, 0xd0, 0xbf, 0x2e, 0x17, 0xff, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0xca, 0x0b, 0xc6, 0xb6, 0x47, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	OperatorDetails(ctx context.Context, in *QueryOperatorDetailsRequest, opts ...grpc.CallOption) (*QueryOperatorDetailsResponse, error)
	AddressDetails(ctx context.Context, in *QueryAddressDetailsRequest, opts ...grpc.CallOption) (*QueryAddressDetailsResponse, error)
	AddressesDetails(ctx context.Context, in *QueryAddressesDetailsRequest, opts ...grpc.CallOption) (*QueryAddressesDetailsResponse, error)
	IssuerDetails(ctx context.Context, in *QueryIssuerDetailsRequest, opts ...grpc.CallOption) (*QueryIssuerDetailsResponse, error)
	IssuersDetails(ctx context.Context, in *QueryIssuersDetailsRequest, opts ...grpc.CallOption) (*QueryIssuersDetailsResponse, error)
	VerificationDetails(ctx context.Context, in *QueryVerificationDetailsRequest, opts ...grpc.CallOption) (*QueryVerificationDetailsResponse, error)
	VerificationsDetails(ctx context.Context, in *QueryVerificationsDetailsRequest, opts ...grpc.CallOption) (*QueryVerificationsDetailsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorDetails(ctx context.Context, in *QueryOperatorDetailsRequest, opts ...grpc.CallOption) (*QueryOperatorDetailsResponse, error) {
	out := new(QueryOperatorDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/OperatorDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressDetails(ctx context.Context, in *QueryAddressDetailsRequest, opts ...grpc.CallOption) (*QueryAddressDetailsResponse, error) {
	out := new(QueryAddressDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/AddressDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressesDetails(ctx context.Context, in *QueryAddressesDetailsRequest, opts ...grpc.CallOption) (*QueryAddressesDetailsResponse, error) {
	out := new(QueryAddressesDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/AddressesDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuerDetails(ctx context.Context, in *QueryIssuerDetailsRequest, opts ...grpc.CallOption) (*QueryIssuerDetailsResponse, error) {
	out := new(QueryIssuerDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/IssuerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuersDetails(ctx context.Context, in *QueryIssuersDetailsRequest, opts ...grpc.CallOption) (*QueryIssuersDetailsResponse, error) {
	out := new(QueryIssuersDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/IssuersDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerificationDetails(ctx context.Context, in *QueryVerificationDetailsRequest, opts ...grpc.CallOption) (*QueryVerificationDetailsResponse, error) {
	out := new(QueryVerificationDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/VerificationDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerificationsDetails(ctx context.Context, in *QueryVerificationsDetailsRequest, opts ...grpc.CallOption) (*QueryVerificationsDetailsResponse, error) {
	out := new(QueryVerificationsDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/VerificationsDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	OperatorDetails(context.Context, *QueryOperatorDetailsRequest) (*QueryOperatorDetailsResponse, error)
	AddressDetails(context.Context, *QueryAddressDetailsRequest) (*QueryAddressDetailsResponse, error)
	AddressesDetails(context.Context, *QueryAddressesDetailsRequest) (*QueryAddressesDetailsResponse, error)
	IssuerDetails(context.Context, *QueryIssuerDetailsRequest) (*QueryIssuerDetailsResponse, error)
	IssuersDetails(context.Context, *QueryIssuersDetailsRequest) (*QueryIssuersDetailsResponse, error)
	VerificationDetails(context.Context, *QueryVerificationDetailsRequest) (*QueryVerificationDetailsResponse, error)
	VerificationsDetails(context.Context, *QueryVerificationsDetailsRequest) (*QueryVerificationsDetailsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) OperatorDetails(ctx context.Context, req *QueryOperatorDetailsRequest) (*QueryOperatorDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDetails not implemented")
}
func (*UnimplementedQueryServer) AddressDetails(ctx context.Context, req *QueryAddressDetailsRequest) (*QueryAddressDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressDetails not implemented")
}
func (*UnimplementedQueryServer) AddressesDetails(ctx context.Context, req *QueryAddressesDetailsRequest) (*QueryAddressesDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressesDetails not implemented")
}
func (*UnimplementedQueryServer) IssuerDetails(ctx context.Context, req *QueryIssuerDetailsRequest) (*QueryIssuerDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuerDetails not implemented")
}
func (*UnimplementedQueryServer) IssuersDetails(ctx context.Context, req *QueryIssuersDetailsRequest) (*QueryIssuersDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuersDetails not implemented")
}
func (*UnimplementedQueryServer) VerificationDetails(ctx context.Context, req *QueryVerificationDetailsRequest) (*QueryVerificationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationDetails not implemented")
}
func (*UnimplementedQueryServer) VerificationsDetails(ctx context.Context, req *QueryVerificationsDetailsRequest) (*QueryVerificationsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationsDetails not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/OperatorDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorDetails(ctx, req.(*QueryOperatorDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/AddressDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressDetails(ctx, req.(*QueryAddressDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressesDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressesDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressesDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/AddressesDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressesDetails(ctx, req.(*QueryAddressesDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIssuerDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/IssuerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuerDetails(ctx, req.(*QueryIssuerDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuersDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIssuersDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuersDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/IssuersDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuersDetails(ctx, req.(*QueryIssuersDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerificationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerificationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerificationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/VerificationDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerificationDetails(ctx, req.(*QueryVerificationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerificationsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerificationsDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerificationsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/VerificationsDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerificationsDetails(ctx, req.(*QueryVerificationsDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swisstronik.compliance.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OperatorDetails",
			Handler:    _Query_OperatorDetails_Handler,
		},
		{
			MethodName: "AddressDetails",
			Handler:    _Query_AddressDetails_Handler,
		},
		{
			MethodName: "AddressesDetails",
			Handler:    _Query_AddressesDetails_Handler,
		},
		{
			MethodName: "IssuerDetails",
			Handler:    _Query_IssuerDetails_Handler,
		},
		{
			MethodName: "IssuersDetails",
			Handler:    _Query_IssuersDetails_Handler,
		},
		{
			MethodName: "VerificationDetails",
			Handler:    _Query_VerificationDetails_Handler,
		},
		{
			MethodName: "VerificationsDetails",
			Handler:    _Query_VerificationsDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swisstronik/compliance/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressesDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressesDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressesDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressesDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressesDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressesDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddressDetails != nil {
		{
			size, err := m.AddressDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuerDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuerDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuerDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuerDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuerDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuerDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuersDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuersDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuersDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuersDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuersDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuersDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuers) > 0 {
		for iNdEx := len(m.Issuers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issuers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssuerDetails != nil {
		{
			size, err := m.IssuerDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationID) > 0 {
		i -= len(m.VerificationID)
		copy(dAtA[i:], m.VerificationID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerificationID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationsDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationsDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationsDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationsDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationsDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationsDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Verifications) > 0 {
		for iNdEx := len(m.Verifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Verifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerificationDetails != nil {
		{
			size, err := m.VerificationDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VerificationID) > 0 {
		i -= len(m.VerificationID)
		copy(dAtA[i:], m.VerificationID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerificationID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOperatorDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressesDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressesDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, e := range m.Addresses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.AddressDetails != nil {
		l = m.AddressDetails.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuerDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuerDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuersDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuersDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Issuers) > 0 {
		for _, e := range m.Issuers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IssuerDetails != nil {
		l = m.IssuerDetails.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerificationID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationsDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationsDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Verifications) > 0 {
		for _, e := range m.Verifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerificationID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.VerificationDetails != nil {
		l = m.VerificationDetails.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &OperatorDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AddressDetails{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressesDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressesDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressesDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressesDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressesDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressesDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, QueryAddressesDetailsResponse_AddressDetailsWithKey{})
			if err := m.Addresses[len(m.Addresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressesDetailsResponse_AddressDetailsWithKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressDetailsWithKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressDetailsWithKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddressDetails == nil {
				m.AddressDetails = &AddressDetails{}
			}
			if err := m.AddressDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuerDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuerDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuerDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuerDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuerDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuerDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &IssuerDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuersDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuersDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuersDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuersDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuersDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuersDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuers = append(m.Issuers, QueryIssuersDetailsResponse_IssuerDetailsWithKey{})
			if err := m.Issuers[len(m.Issuers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuersDetailsResponse_IssuerDetailsWithKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssuerDetailsWithKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssuerDetailsWithKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuerDetails == nil {
				m.IssuerDetails = &IssuerDetails{}
			}
			if err := m.IssuerDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &VerificationDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationsDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationsDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationsDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationsDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationsDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationsDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifications = append(m.Verifications, QueryVerificationsDetailsResponse_VerificationDetailsWithKey{})
			if err := m.Verifications[len(m.Verifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationsDetailsResponse_VerificationDetailsWithKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationDetailsWithKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationDetailsWithKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationID = append(m.VerificationID[:0], dAtA[iNdEx:postIndex]...)
			if m.VerificationID == nil {
				m.VerificationID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerificationDetails == nil {
				m.VerificationDetails = &VerificationDetails{}
			}
			if err := m.VerificationDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
