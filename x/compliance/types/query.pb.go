// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: swisstronik/compliance/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryOperatorDetailsRequest is request type for Query/OperatorDetails RPC method.
type QueryOperatorDetailsRequest struct {
	OperatorAddress string `protobuf:"bytes,1,opt,name=operatorAddress,proto3" json:"operatorAddress,omitempty"`
}

func (m *QueryOperatorDetailsRequest) Reset()         { *m = QueryOperatorDetailsRequest{} }
func (m *QueryOperatorDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDetailsRequest) ProtoMessage()    {}
func (*QueryOperatorDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{2}
}
func (m *QueryOperatorDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDetailsRequest.Merge(m, src)
}
func (m *QueryOperatorDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDetailsRequest proto.InternalMessageInfo

func (m *QueryOperatorDetailsRequest) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

// QueryOperatorDetailsResponse is response type for Query/OperatorDetails RPC method.
type QueryOperatorDetailsResponse struct {
	Details *OperatorDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryOperatorDetailsResponse) Reset()         { *m = QueryOperatorDetailsResponse{} }
func (m *QueryOperatorDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDetailsResponse) ProtoMessage()    {}
func (*QueryOperatorDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{3}
}
func (m *QueryOperatorDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDetailsResponse.Merge(m, src)
}
func (m *QueryOperatorDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDetailsResponse proto.InternalMessageInfo

func (m *QueryOperatorDetailsResponse) GetDetails() *OperatorDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// QueryAddressDetailsRequest is request type for the Query/AddressDetails RPC method.
type QueryAddressDetailsRequest struct {
	Address                string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	OnlyWithExistingIssuer bool   `protobuf:"varint,2,opt,name=onlyWithExistingIssuer,proto3" json:"onlyWithExistingIssuer,omitempty"`
}

func (m *QueryAddressDetailsRequest) Reset()         { *m = QueryAddressDetailsRequest{} }
func (m *QueryAddressDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressDetailsRequest) ProtoMessage()    {}
func (*QueryAddressDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{4}
}
func (m *QueryAddressDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressDetailsRequest.Merge(m, src)
}
func (m *QueryAddressDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressDetailsRequest proto.InternalMessageInfo

func (m *QueryAddressDetailsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAddressDetailsRequest) GetOnlyWithExistingIssuer() bool {
	if m != nil {
		return m.OnlyWithExistingIssuer
	}
	return false
}

// QueryAddressDetailsResponse is response type for the Query/AddressDetails RPC method.
type QueryAddressDetailsResponse struct {
	// data holds all the verification data for provided address
	Data *AddressDetails `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryAddressDetailsResponse) Reset()         { *m = QueryAddressDetailsResponse{} }
func (m *QueryAddressDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressDetailsResponse) ProtoMessage()    {}
func (*QueryAddressDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{5}
}
func (m *QueryAddressDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressDetailsResponse.Merge(m, src)
}
func (m *QueryAddressDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressDetailsResponse proto.InternalMessageInfo

func (m *QueryAddressDetailsResponse) GetData() *AddressDetails {
	if m != nil {
		return m.Data
	}
	return nil
}

// QueryAddressesDetailsRequest is request type for the Query/AddressesDetails RPC method.
type QueryAddressesDetailsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAddressesDetailsRequest) Reset()         { *m = QueryAddressesDetailsRequest{} }
func (m *QueryAddressesDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAddressesDetailsRequest) ProtoMessage()    {}
func (*QueryAddressesDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{6}
}
func (m *QueryAddressesDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressesDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressesDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressesDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressesDetailsRequest.Merge(m, src)
}
func (m *QueryAddressesDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressesDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressesDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressesDetailsRequest proto.InternalMessageInfo

func (m *QueryAddressesDetailsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAddressesDetailsResponse is response type for the Query/AddressesDetails RPC method.
type QueryAddressesDetailsResponse struct {
	// addresses is a slice of registered addresses for the compliance module
	Addresses []QueryAddressesDetailsResponse_MergedAddressDetails `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAddressesDetailsResponse) Reset()         { *m = QueryAddressesDetailsResponse{} }
func (m *QueryAddressesDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAddressesDetailsResponse) ProtoMessage()    {}
func (*QueryAddressesDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{7}
}
func (m *QueryAddressesDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressesDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressesDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressesDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressesDetailsResponse.Merge(m, src)
}
func (m *QueryAddressesDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressesDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressesDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressesDetailsResponse proto.InternalMessageInfo

func (m *QueryAddressesDetailsResponse) GetAddresses() []QueryAddressesDetailsResponse_MergedAddressDetails {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *QueryAddressesDetailsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// MergedAddressDetails is merged structure of iterating key and `AddressDetails` in `entities.proto`.
// `address` is an iterating key, and the following items should be same with `AddressDetails`.
type QueryAddressesDetailsResponse_MergedAddressDetails struct {
	Address       string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	IsVerified    bool            `protobuf:"varint,2,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
	IsRevoked     bool            `protobuf:"varint,3,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
	Verifications []*Verification `protobuf:"bytes,4,rep,name=verifications,proto3" json:"verifications,omitempty"`
}

func (m *QueryAddressesDetailsResponse_MergedAddressDetails) Reset() {
	*m = QueryAddressesDetailsResponse_MergedAddressDetails{}
}
func (m *QueryAddressesDetailsResponse_MergedAddressDetails) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAddressesDetailsResponse_MergedAddressDetails) ProtoMessage() {}
func (*QueryAddressesDetailsResponse_MergedAddressDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{7, 0}
}
func (m *QueryAddressesDetailsResponse_MergedAddressDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAddressesDetailsResponse_MergedAddressDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAddressesDetailsResponse_MergedAddressDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAddressesDetailsResponse_MergedAddressDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAddressesDetailsResponse_MergedAddressDetails.Merge(m, src)
}
func (m *QueryAddressesDetailsResponse_MergedAddressDetails) XXX_Size() int {
	return m.Size()
}
func (m *QueryAddressesDetailsResponse_MergedAddressDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAddressesDetailsResponse_MergedAddressDetails.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAddressesDetailsResponse_MergedAddressDetails proto.InternalMessageInfo

func (m *QueryAddressesDetailsResponse_MergedAddressDetails) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAddressesDetailsResponse_MergedAddressDetails) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *QueryAddressesDetailsResponse_MergedAddressDetails) GetIsRevoked() bool {
	if m != nil {
		return m.IsRevoked
	}
	return false
}

func (m *QueryAddressesDetailsResponse_MergedAddressDetails) GetVerifications() []*Verification {
	if m != nil {
		return m.Verifications
	}
	return nil
}

// QueryIssuerDetailsRequest is request type for the Query/IssuerDetails RPC method.
type QueryIssuerDetailsRequest struct {
	IssuerAddress string `protobuf:"bytes,1,opt,name=issuerAddress,proto3" json:"issuerAddress,omitempty"`
}

func (m *QueryIssuerDetailsRequest) Reset()         { *m = QueryIssuerDetailsRequest{} }
func (m *QueryIssuerDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIssuerDetailsRequest) ProtoMessage()    {}
func (*QueryIssuerDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{8}
}
func (m *QueryIssuerDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuerDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuerDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuerDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuerDetailsRequest.Merge(m, src)
}
func (m *QueryIssuerDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuerDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuerDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuerDetailsRequest proto.InternalMessageInfo

func (m *QueryIssuerDetailsRequest) GetIssuerAddress() string {
	if m != nil {
		return m.IssuerAddress
	}
	return ""
}

// QueryIssuerDetailsResponse is response type for the Query/IssuerDetails RPC method.
type QueryIssuerDetailsResponse struct {
	Details *IssuerDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryIssuerDetailsResponse) Reset()         { *m = QueryIssuerDetailsResponse{} }
func (m *QueryIssuerDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIssuerDetailsResponse) ProtoMessage()    {}
func (*QueryIssuerDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{9}
}
func (m *QueryIssuerDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuerDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuerDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuerDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuerDetailsResponse.Merge(m, src)
}
func (m *QueryIssuerDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuerDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuerDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuerDetailsResponse proto.InternalMessageInfo

func (m *QueryIssuerDetailsResponse) GetDetails() *IssuerDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// QueryIssuersDetailsRequest is request type for the Query/IssuersDetails RPC method.
type QueryIssuersDetailsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIssuersDetailsRequest) Reset()         { *m = QueryIssuersDetailsRequest{} }
func (m *QueryIssuersDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIssuersDetailsRequest) ProtoMessage()    {}
func (*QueryIssuersDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{10}
}
func (m *QueryIssuersDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuersDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuersDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuersDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuersDetailsRequest.Merge(m, src)
}
func (m *QueryIssuersDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuersDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuersDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuersDetailsRequest proto.InternalMessageInfo

func (m *QueryIssuersDetailsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryIssuersDetailsResponse is response type for the Query/IssuersDetails RPC method.
type QueryIssuersDetailsResponse struct {
	// issuers is a slice of registered issuers for the compliance module
	Issuers []QueryIssuersDetailsResponse_MergedIssuerDetails `protobuf:"bytes,1,rep,name=issuers,proto3" json:"issuers"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryIssuersDetailsResponse) Reset()         { *m = QueryIssuersDetailsResponse{} }
func (m *QueryIssuersDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIssuersDetailsResponse) ProtoMessage()    {}
func (*QueryIssuersDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{11}
}
func (m *QueryIssuersDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuersDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuersDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuersDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuersDetailsResponse.Merge(m, src)
}
func (m *QueryIssuersDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuersDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuersDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuersDetailsResponse proto.InternalMessageInfo

func (m *QueryIssuersDetailsResponse) GetIssuers() []QueryIssuersDetailsResponse_MergedIssuerDetails {
	if m != nil {
		return m.Issuers
	}
	return nil
}

func (m *QueryIssuersDetailsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// MergedIssuerDetails is merged structure of iterating key and `IssuerDetails` in `entities.proto`.
// `issuerAddress` is an iterating key, and the following items should be same with `IssuerDetails`.
type QueryIssuersDetailsResponse_MergedIssuerDetails struct {
	IssuerAddress string `protobuf:"bytes,1,opt,name=issuerAddress,proto3" json:"issuerAddress,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Url           string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Logo          string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	LegalEntity   string `protobuf:"bytes,6,opt,name=legalEntity,proto3" json:"legalEntity,omitempty"`
	Creator       string `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) Reset() {
	*m = QueryIssuersDetailsResponse_MergedIssuerDetails{}
}
func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIssuersDetailsResponse_MergedIssuerDetails) ProtoMessage() {}
func (*QueryIssuersDetailsResponse_MergedIssuerDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{11, 0}
}
func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuersDetailsResponse_MergedIssuerDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuersDetailsResponse_MergedIssuerDetails.Merge(m, src)
}
func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuersDetailsResponse_MergedIssuerDetails.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuersDetailsResponse_MergedIssuerDetails proto.InternalMessageInfo

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) GetIssuerAddress() string {
	if m != nil {
		return m.IssuerAddress
	}
	return ""
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) GetLegalEntity() string {
	if m != nil {
		return m.LegalEntity
	}
	return ""
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// QueryVerificationDetailsRequest is request type for the Query/VerificationDetails RPC method.
type QueryVerificationDetailsRequest struct {
	VerificationID string `protobuf:"bytes,1,opt,name=verificationID,proto3" json:"verificationID,omitempty"`
}

func (m *QueryVerificationDetailsRequest) Reset()         { *m = QueryVerificationDetailsRequest{} }
func (m *QueryVerificationDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationDetailsRequest) ProtoMessage()    {}
func (*QueryVerificationDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{12}
}
func (m *QueryVerificationDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationDetailsRequest.Merge(m, src)
}
func (m *QueryVerificationDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationDetailsRequest proto.InternalMessageInfo

func (m *QueryVerificationDetailsRequest) GetVerificationID() string {
	if m != nil {
		return m.VerificationID
	}
	return ""
}

// QueryVerificationDetailsResponse is response type for the Query/VerificationDetails RPC method.
type QueryVerificationDetailsResponse struct {
	Details *VerificationDetails `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryVerificationDetailsResponse) Reset()         { *m = QueryVerificationDetailsResponse{} }
func (m *QueryVerificationDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationDetailsResponse) ProtoMessage()    {}
func (*QueryVerificationDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{13}
}
func (m *QueryVerificationDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationDetailsResponse.Merge(m, src)
}
func (m *QueryVerificationDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationDetailsResponse proto.InternalMessageInfo

func (m *QueryVerificationDetailsResponse) GetDetails() *VerificationDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

// QueryVerificationDetailsRequest is request type for the Query/VerificationsDetails RPC method.
type QueryVerificationsDetailsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVerificationsDetailsRequest) Reset()         { *m = QueryVerificationsDetailsRequest{} }
func (m *QueryVerificationsDetailsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationsDetailsRequest) ProtoMessage()    {}
func (*QueryVerificationsDetailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{14}
}
func (m *QueryVerificationsDetailsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationsDetailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationsDetailsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationsDetailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationsDetailsRequest.Merge(m, src)
}
func (m *QueryVerificationsDetailsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationsDetailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationsDetailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationsDetailsRequest proto.InternalMessageInfo

func (m *QueryVerificationsDetailsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVerificationsDetailsResponse is response type for the Query/VerificationsDetails RPC method.
type QueryVerificationsDetailsResponse struct {
	// verifications is a slice of registered verifications for the compliance module
	Verifications []QueryVerificationsDetailsResponse_MergedVerificationDetails `protobuf:"bytes,1,rep,name=verifications,proto3" json:"verifications"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVerificationsDetailsResponse) Reset()         { *m = QueryVerificationsDetailsResponse{} }
func (m *QueryVerificationsDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerificationsDetailsResponse) ProtoMessage()    {}
func (*QueryVerificationsDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{15}
}
func (m *QueryVerificationsDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationsDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationsDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationsDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationsDetailsResponse.Merge(m, src)
}
func (m *QueryVerificationsDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationsDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationsDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationsDetailsResponse proto.InternalMessageInfo

func (m *QueryVerificationsDetailsResponse) GetVerifications() []QueryVerificationsDetailsResponse_MergedVerificationDetails {
	if m != nil {
		return m.Verifications
	}
	return nil
}

func (m *QueryVerificationsDetailsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// MergedVerificationDetails is merged structure of iterating key and `VerificationDetails` in `entities.proto`.
// `verification_type` and `verification_id` are iterating keys, and the following items should be same with `VerificationDetails`.
type QueryVerificationsDetailsResponse_MergedVerificationDetails struct {
	VerificationType     VerificationType `protobuf:"varint,1,opt,name=verificationType,proto3,enum=swisstronik.compliance.VerificationType" json:"verificationType,omitempty"`
	VerificationID       []byte           `protobuf:"bytes,2,opt,name=verificationID,proto3" json:"verificationID,omitempty"`
	IssuerAddress        string           `protobuf:"bytes,3,opt,name=issuer_address,json=issuerAddress,proto3" json:"issuer_address,omitempty"`
	OriginChain          string           `protobuf:"bytes,4,opt,name=origin_chain,json=originChain,proto3" json:"origin_chain,omitempty"`
	IssuanceTimestamp    uint32           `protobuf:"varint,5,opt,name=issuance_timestamp,json=issuanceTimestamp,proto3" json:"issuance_timestamp,omitempty"`
	ExpirationTimestamp  uint32           `protobuf:"varint,6,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	OriginalData         []byte           `protobuf:"bytes,7,opt,name=original_data,json=originalData,proto3" json:"original_data,omitempty"`
	Schema               string           `protobuf:"bytes,8,opt,name=schema,proto3" json:"schema,omitempty"`
	IssuerVerificationId string           `protobuf:"bytes,9,opt,name=issuer_verification_id,json=issuerVerificationId,proto3" json:"issuer_verification_id,omitempty"`
	Version              uint32           `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
	IsRevoked            bool             `protobuf:"varint,11,opt,name=is_revoked,json=isRevoked,proto3" json:"is_revoked,omitempty"`
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) Reset() {
	*m = QueryVerificationsDetailsResponse_MergedVerificationDetails{}
}
func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) String() string {
	return proto.CompactTextString(m)
}
func (*QueryVerificationsDetailsResponse_MergedVerificationDetails) ProtoMessage() {}
func (*QueryVerificationsDetailsResponse_MergedVerificationDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{15, 0}
}
func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerificationsDetailsResponse_MergedVerificationDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerificationsDetailsResponse_MergedVerificationDetails.Merge(m, src)
}
func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerificationsDetailsResponse_MergedVerificationDetails.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerificationsDetailsResponse_MergedVerificationDetails proto.InternalMessageInfo

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetVerificationType() VerificationType {
	if m != nil {
		return m.VerificationType
	}
	return VerificationType_VT_UNSPECIFIED
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetVerificationID() []byte {
	if m != nil {
		return m.VerificationID
	}
	return nil
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetIssuerAddress() string {
	if m != nil {
		return m.IssuerAddress
	}
	return ""
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetOriginChain() string {
	if m != nil {
		return m.OriginChain
	}
	return ""
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetIssuanceTimestamp() uint32 {
	if m != nil {
		return m.IssuanceTimestamp
	}
	return 0
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetExpirationTimestamp() uint32 {
	if m != nil {
		return m.ExpirationTimestamp
	}
	return 0
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetOriginalData() []byte {
	if m != nil {
		return m.OriginalData
	}
	return nil
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetIssuerVerificationId() string {
	if m != nil {
		return m.IssuerVerificationId
	}
	return ""
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) GetIsRevoked() bool {
	if m != nil {
		return m.IsRevoked
	}
	return false
}

type QueryIssuanceTreeRootRequest struct {
}

func (m *QueryIssuanceTreeRootRequest) Reset()         { *m = QueryIssuanceTreeRootRequest{} }
func (m *QueryIssuanceTreeRootRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIssuanceTreeRootRequest) ProtoMessage()    {}
func (*QueryIssuanceTreeRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{16}
}
func (m *QueryIssuanceTreeRootRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuanceTreeRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuanceTreeRootRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuanceTreeRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuanceTreeRootRequest.Merge(m, src)
}
func (m *QueryIssuanceTreeRootRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuanceTreeRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuanceTreeRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuanceTreeRootRequest proto.InternalMessageInfo

type QueryIssuanceTreeRootResponse struct {
	Root []byte `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *QueryIssuanceTreeRootResponse) Reset()         { *m = QueryIssuanceTreeRootResponse{} }
func (m *QueryIssuanceTreeRootResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIssuanceTreeRootResponse) ProtoMessage()    {}
func (*QueryIssuanceTreeRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{17}
}
func (m *QueryIssuanceTreeRootResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuanceTreeRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuanceTreeRootResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuanceTreeRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuanceTreeRootResponse.Merge(m, src)
}
func (m *QueryIssuanceTreeRootResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuanceTreeRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuanceTreeRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuanceTreeRootResponse proto.InternalMessageInfo

func (m *QueryIssuanceTreeRootResponse) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type QueryRevocationTreeRootRequest struct {
}

func (m *QueryRevocationTreeRootRequest) Reset()         { *m = QueryRevocationTreeRootRequest{} }
func (m *QueryRevocationTreeRootRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRevocationTreeRootRequest) ProtoMessage()    {}
func (*QueryRevocationTreeRootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{18}
}
func (m *QueryRevocationTreeRootRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevocationTreeRootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevocationTreeRootRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevocationTreeRootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevocationTreeRootRequest.Merge(m, src)
}
func (m *QueryRevocationTreeRootRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevocationTreeRootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevocationTreeRootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevocationTreeRootRequest proto.InternalMessageInfo

type QueryRevocationTreeRootResponse struct {
	Root []byte `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (m *QueryRevocationTreeRootResponse) Reset()         { *m = QueryRevocationTreeRootResponse{} }
func (m *QueryRevocationTreeRootResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRevocationTreeRootResponse) ProtoMessage()    {}
func (*QueryRevocationTreeRootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{19}
}
func (m *QueryRevocationTreeRootResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevocationTreeRootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevocationTreeRootResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevocationTreeRootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevocationTreeRootResponse.Merge(m, src)
}
func (m *QueryRevocationTreeRootResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevocationTreeRootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevocationTreeRootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevocationTreeRootResponse proto.InternalMessageInfo

func (m *QueryRevocationTreeRootResponse) GetRoot() []byte {
	if m != nil {
		return m.Root
	}
	return nil
}

type QueryIssuanceProofRequest struct {
	CredentialHash []byte `protobuf:"bytes,1,opt,name=credentialHash,proto3" json:"credentialHash,omitempty"`
}

func (m *QueryIssuanceProofRequest) Reset()         { *m = QueryIssuanceProofRequest{} }
func (m *QueryIssuanceProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIssuanceProofRequest) ProtoMessage()    {}
func (*QueryIssuanceProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{20}
}
func (m *QueryIssuanceProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuanceProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuanceProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuanceProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuanceProofRequest.Merge(m, src)
}
func (m *QueryIssuanceProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuanceProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuanceProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuanceProofRequest proto.InternalMessageInfo

func (m *QueryIssuanceProofRequest) GetCredentialHash() []byte {
	if m != nil {
		return m.CredentialHash
	}
	return nil
}

type QueryIssuanceProofResponse struct {
	EncodedProof []byte `protobuf:"bytes,1,opt,name=encodedProof,proto3" json:"encodedProof,omitempty"`
}

func (m *QueryIssuanceProofResponse) Reset()         { *m = QueryIssuanceProofResponse{} }
func (m *QueryIssuanceProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIssuanceProofResponse) ProtoMessage()    {}
func (*QueryIssuanceProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{21}
}
func (m *QueryIssuanceProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIssuanceProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIssuanceProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIssuanceProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIssuanceProofResponse.Merge(m, src)
}
func (m *QueryIssuanceProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIssuanceProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIssuanceProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIssuanceProofResponse proto.InternalMessageInfo

func (m *QueryIssuanceProofResponse) GetEncodedProof() []byte {
	if m != nil {
		return m.EncodedProof
	}
	return nil
}

type QueryRevocationProofRequest struct {
	CredentialHash []byte `protobuf:"bytes,1,opt,name=credentialHash,proto3" json:"credentialHash,omitempty"`
}

func (m *QueryRevocationProofRequest) Reset()         { *m = QueryRevocationProofRequest{} }
func (m *QueryRevocationProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRevocationProofRequest) ProtoMessage()    {}
func (*QueryRevocationProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{22}
}
func (m *QueryRevocationProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevocationProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevocationProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevocationProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevocationProofRequest.Merge(m, src)
}
func (m *QueryRevocationProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevocationProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevocationProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevocationProofRequest proto.InternalMessageInfo

func (m *QueryRevocationProofRequest) GetCredentialHash() []byte {
	if m != nil {
		return m.CredentialHash
	}
	return nil
}

type QueryRevocationProofResponse struct {
	EncodedProof []byte `protobuf:"bytes,1,opt,name=encodedProof,proto3" json:"encodedProof,omitempty"`
}

func (m *QueryRevocationProofResponse) Reset()         { *m = QueryRevocationProofResponse{} }
func (m *QueryRevocationProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRevocationProofResponse) ProtoMessage()    {}
func (*QueryRevocationProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{23}
}
func (m *QueryRevocationProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevocationProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevocationProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevocationProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevocationProofResponse.Merge(m, src)
}
func (m *QueryRevocationProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevocationProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevocationProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevocationProofResponse proto.InternalMessageInfo

func (m *QueryRevocationProofResponse) GetEncodedProof() []byte {
	if m != nil {
		return m.EncodedProof
	}
	return nil
}

type QueryAttachedHolderPublicKeyRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAttachedHolderPublicKeyRequest) Reset()         { *m = QueryAttachedHolderPublicKeyRequest{} }
func (m *QueryAttachedHolderPublicKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAttachedHolderPublicKeyRequest) ProtoMessage()    {}
func (*QueryAttachedHolderPublicKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{24}
}
func (m *QueryAttachedHolderPublicKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttachedHolderPublicKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttachedHolderPublicKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttachedHolderPublicKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttachedHolderPublicKeyRequest.Merge(m, src)
}
func (m *QueryAttachedHolderPublicKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttachedHolderPublicKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttachedHolderPublicKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttachedHolderPublicKeyRequest proto.InternalMessageInfo

func (m *QueryAttachedHolderPublicKeyRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAttachedHolderPublicKeyResponse struct {
	PubKey []byte `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
}

func (m *QueryAttachedHolderPublicKeyResponse) Reset()         { *m = QueryAttachedHolderPublicKeyResponse{} }
func (m *QueryAttachedHolderPublicKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAttachedHolderPublicKeyResponse) ProtoMessage()    {}
func (*QueryAttachedHolderPublicKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{25}
}
func (m *QueryAttachedHolderPublicKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAttachedHolderPublicKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAttachedHolderPublicKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAttachedHolderPublicKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAttachedHolderPublicKeyResponse.Merge(m, src)
}
func (m *QueryAttachedHolderPublicKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAttachedHolderPublicKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAttachedHolderPublicKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAttachedHolderPublicKeyResponse proto.InternalMessageInfo

func (m *QueryAttachedHolderPublicKeyResponse) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type QueryIsCredentialInZKSDIRequest struct {
	Address        string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VerificationID []byte `protobuf:"bytes,2,opt,name=verificationID,proto3" json:"verificationID,omitempty"`
}

func (m *QueryIsCredentialInZKSDIRequest) Reset()         { *m = QueryIsCredentialInZKSDIRequest{} }
func (m *QueryIsCredentialInZKSDIRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIsCredentialInZKSDIRequest) ProtoMessage()    {}
func (*QueryIsCredentialInZKSDIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{26}
}
func (m *QueryIsCredentialInZKSDIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsCredentialInZKSDIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsCredentialInZKSDIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsCredentialInZKSDIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsCredentialInZKSDIRequest.Merge(m, src)
}
func (m *QueryIsCredentialInZKSDIRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsCredentialInZKSDIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsCredentialInZKSDIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsCredentialInZKSDIRequest proto.InternalMessageInfo

func (m *QueryIsCredentialInZKSDIRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryIsCredentialInZKSDIRequest) GetVerificationID() []byte {
	if m != nil {
		return m.VerificationID
	}
	return nil
}

type QueryIsCredentialInZKSDIResponse struct {
	Included bool `protobuf:"varint,1,opt,name=included,proto3" json:"included,omitempty"`
}

func (m *QueryIsCredentialInZKSDIResponse) Reset()         { *m = QueryIsCredentialInZKSDIResponse{} }
func (m *QueryIsCredentialInZKSDIResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsCredentialInZKSDIResponse) ProtoMessage()    {}
func (*QueryIsCredentialInZKSDIResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{27}
}
func (m *QueryIsCredentialInZKSDIResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsCredentialInZKSDIResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsCredentialInZKSDIResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsCredentialInZKSDIResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsCredentialInZKSDIResponse.Merge(m, src)
}
func (m *QueryIsCredentialInZKSDIResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsCredentialInZKSDIResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsCredentialInZKSDIResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsCredentialInZKSDIResponse proto.InternalMessageInfo

func (m *QueryIsCredentialInZKSDIResponse) GetIncluded() bool {
	if m != nil {
		return m.Included
	}
	return false
}

type QueryCredentialHashRequest struct {
	VerificationId []byte `protobuf:"bytes,1,opt,name=verificationId,proto3" json:"verificationId,omitempty"`
}

func (m *QueryCredentialHashRequest) Reset()         { *m = QueryCredentialHashRequest{} }
func (m *QueryCredentialHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialHashRequest) ProtoMessage()    {}
func (*QueryCredentialHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{28}
}
func (m *QueryCredentialHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialHashRequest.Merge(m, src)
}
func (m *QueryCredentialHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialHashRequest proto.InternalMessageInfo

func (m *QueryCredentialHashRequest) GetVerificationId() []byte {
	if m != nil {
		return m.VerificationId
	}
	return nil
}

type QueryCredentialHashResponse struct {
	CredentialHash []byte `protobuf:"bytes,1,opt,name=credentialHash,proto3" json:"credentialHash,omitempty"`
}

func (m *QueryCredentialHashResponse) Reset()         { *m = QueryCredentialHashResponse{} }
func (m *QueryCredentialHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialHashResponse) ProtoMessage()    {}
func (*QueryCredentialHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{29}
}
func (m *QueryCredentialHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialHashResponse.Merge(m, src)
}
func (m *QueryCredentialHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialHashResponse proto.InternalMessageInfo

func (m *QueryCredentialHashResponse) GetCredentialHash() []byte {
	if m != nil {
		return m.CredentialHash
	}
	return nil
}

type QueryHolderByVerificationIdRequest struct {
	VerificationId string `protobuf:"bytes,1,opt,name=verificationId,proto3" json:"verificationId,omitempty"`
}

func (m *QueryHolderByVerificationIdRequest) Reset()         { *m = QueryHolderByVerificationIdRequest{} }
func (m *QueryHolderByVerificationIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHolderByVerificationIdRequest) ProtoMessage()    {}
func (*QueryHolderByVerificationIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{30}
}
func (m *QueryHolderByVerificationIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHolderByVerificationIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHolderByVerificationIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHolderByVerificationIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHolderByVerificationIdRequest.Merge(m, src)
}
func (m *QueryHolderByVerificationIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHolderByVerificationIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHolderByVerificationIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHolderByVerificationIdRequest proto.InternalMessageInfo

func (m *QueryHolderByVerificationIdRequest) GetVerificationId() string {
	if m != nil {
		return m.VerificationId
	}
	return ""
}

type QueryHolderByVerificationIdResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryHolderByVerificationIdResponse) Reset()         { *m = QueryHolderByVerificationIdResponse{} }
func (m *QueryHolderByVerificationIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHolderByVerificationIdResponse) ProtoMessage()    {}
func (*QueryHolderByVerificationIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{31}
}
func (m *QueryHolderByVerificationIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHolderByVerificationIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHolderByVerificationIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHolderByVerificationIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHolderByVerificationIdResponse.Merge(m, src)
}
func (m *QueryHolderByVerificationIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHolderByVerificationIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHolderByVerificationIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHolderByVerificationIdResponse proto.InternalMessageInfo

func (m *QueryHolderByVerificationIdResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAllVerificationDetailsByAddressRequest struct {
	Address                string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	OnlyWithExistingIssuer bool   `protobuf:"varint,2,opt,name=onlyWithExistingIssuer,proto3" json:"onlyWithExistingIssuer,omitempty"`
}

func (m *QueryAllVerificationDetailsByAddressRequest) Reset() {
	*m = QueryAllVerificationDetailsByAddressRequest{}
}
func (m *QueryAllVerificationDetailsByAddressRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllVerificationDetailsByAddressRequest) ProtoMessage() {}
func (*QueryAllVerificationDetailsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{32}
}
func (m *QueryAllVerificationDetailsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVerificationDetailsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVerificationDetailsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVerificationDetailsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVerificationDetailsByAddressRequest.Merge(m, src)
}
func (m *QueryAllVerificationDetailsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVerificationDetailsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVerificationDetailsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVerificationDetailsByAddressRequest proto.InternalMessageInfo

func (m *QueryAllVerificationDetailsByAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryAllVerificationDetailsByAddressRequest) GetOnlyWithExistingIssuer() bool {
	if m != nil {
		return m.OnlyWithExistingIssuer
	}
	return false
}

type QueryAllVerificationDetailsByAddressResponse struct {
	Details []*VerificationDetails `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (m *QueryAllVerificationDetailsByAddressResponse) Reset() {
	*m = QueryAllVerificationDetailsByAddressResponse{}
}
func (m *QueryAllVerificationDetailsByAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllVerificationDetailsByAddressResponse) ProtoMessage() {}
func (*QueryAllVerificationDetailsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80d6bdaf4aa1245, []int{33}
}
func (m *QueryAllVerificationDetailsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVerificationDetailsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVerificationDetailsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVerificationDetailsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVerificationDetailsByAddressResponse.Merge(m, src)
}
func (m *QueryAllVerificationDetailsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVerificationDetailsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVerificationDetailsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVerificationDetailsByAddressResponse proto.InternalMessageInfo

func (m *QueryAllVerificationDetailsByAddressResponse) GetDetails() []*VerificationDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "swisstronik.compliance.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "swisstronik.compliance.QueryParamsResponse")
	proto.RegisterType((*QueryOperatorDetailsRequest)(nil), "swisstronik.compliance.QueryOperatorDetailsRequest")
	proto.RegisterType((*QueryOperatorDetailsResponse)(nil), "swisstronik.compliance.QueryOperatorDetailsResponse")
	proto.RegisterType((*QueryAddressDetailsRequest)(nil), "swisstronik.compliance.QueryAddressDetailsRequest")
	proto.RegisterType((*QueryAddressDetailsResponse)(nil), "swisstronik.compliance.QueryAddressDetailsResponse")
	proto.RegisterType((*QueryAddressesDetailsRequest)(nil), "swisstronik.compliance.QueryAddressesDetailsRequest")
	proto.RegisterType((*QueryAddressesDetailsResponse)(nil), "swisstronik.compliance.QueryAddressesDetailsResponse")
	proto.RegisterType((*QueryAddressesDetailsResponse_MergedAddressDetails)(nil), "swisstronik.compliance.QueryAddressesDetailsResponse.MergedAddressDetails")
	proto.RegisterType((*QueryIssuerDetailsRequest)(nil), "swisstronik.compliance.QueryIssuerDetailsRequest")
	proto.RegisterType((*QueryIssuerDetailsResponse)(nil), "swisstronik.compliance.QueryIssuerDetailsResponse")
	proto.RegisterType((*QueryIssuersDetailsRequest)(nil), "swisstronik.compliance.QueryIssuersDetailsRequest")
	proto.RegisterType((*QueryIssuersDetailsResponse)(nil), "swisstronik.compliance.QueryIssuersDetailsResponse")
	proto.RegisterType((*QueryIssuersDetailsResponse_MergedIssuerDetails)(nil), "swisstronik.compliance.QueryIssuersDetailsResponse.MergedIssuerDetails")
	proto.RegisterType((*QueryVerificationDetailsRequest)(nil), "swisstronik.compliance.QueryVerificationDetailsRequest")
	proto.RegisterType((*QueryVerificationDetailsResponse)(nil), "swisstronik.compliance.QueryVerificationDetailsResponse")
	proto.RegisterType((*QueryVerificationsDetailsRequest)(nil), "swisstronik.compliance.QueryVerificationsDetailsRequest")
	proto.RegisterType((*QueryVerificationsDetailsResponse)(nil), "swisstronik.compliance.QueryVerificationsDetailsResponse")
	proto.RegisterType((*QueryVerificationsDetailsResponse_MergedVerificationDetails)(nil), "swisstronik.compliance.QueryVerificationsDetailsResponse.MergedVerificationDetails")
	proto.RegisterType((*QueryIssuanceTreeRootRequest)(nil), "swisstronik.compliance.QueryIssuanceTreeRootRequest")
	proto.RegisterType((*QueryIssuanceTreeRootResponse)(nil), "swisstronik.compliance.QueryIssuanceTreeRootResponse")
	proto.RegisterType((*QueryRevocationTreeRootRequest)(nil), "swisstronik.compliance.QueryRevocationTreeRootRequest")
	proto.RegisterType((*QueryRevocationTreeRootResponse)(nil), "swisstronik.compliance.QueryRevocationTreeRootResponse")
	proto.RegisterType((*QueryIssuanceProofRequest)(nil), "swisstronik.compliance.QueryIssuanceProofRequest")
	proto.RegisterType((*QueryIssuanceProofResponse)(nil), "swisstronik.compliance.QueryIssuanceProofResponse")
	proto.RegisterType((*QueryRevocationProofRequest)(nil), "swisstronik.compliance.QueryRevocationProofRequest")
	proto.RegisterType((*QueryRevocationProofResponse)(nil), "swisstronik.compliance.QueryRevocationProofResponse")
	proto.RegisterType((*QueryAttachedHolderPublicKeyRequest)(nil), "swisstronik.compliance.QueryAttachedHolderPublicKeyRequest")
	proto.RegisterType((*QueryAttachedHolderPublicKeyResponse)(nil), "swisstronik.compliance.QueryAttachedHolderPublicKeyResponse")
	proto.RegisterType((*QueryIsCredentialInZKSDIRequest)(nil), "swisstronik.compliance.QueryIsCredentialInZKSDIRequest")
	proto.RegisterType((*QueryIsCredentialInZKSDIResponse)(nil), "swisstronik.compliance.QueryIsCredentialInZKSDIResponse")
	proto.RegisterType((*QueryCredentialHashRequest)(nil), "swisstronik.compliance.QueryCredentialHashRequest")
	proto.RegisterType((*QueryCredentialHashResponse)(nil), "swisstronik.compliance.QueryCredentialHashResponse")
	proto.RegisterType((*QueryHolderByVerificationIdRequest)(nil), "swisstronik.compliance.QueryHolderByVerificationIdRequest")
	proto.RegisterType((*QueryHolderByVerificationIdResponse)(nil), "swisstronik.compliance.QueryHolderByVerificationIdResponse")
	proto.RegisterType((*QueryAllVerificationDetailsByAddressRequest)(nil), "swisstronik.compliance.QueryAllVerificationDetailsByAddressRequest")
	proto.RegisterType((*QueryAllVerificationDetailsByAddressResponse)(nil), "swisstronik.compliance.QueryAllVerificationDetailsByAddressResponse")
}

func init() {
	proto.RegisterFile("swisstronik/compliance/query.proto", fileDescriptor_f80d6bdaf4aa1245)
}

var fileDescriptor_f80d6bdaf4aa1245 = []byte{
	// 1839 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcd, 0x6f, 0x14, 0x47,
	0x16, 0x77, 0x33, 0xc6, 0x1f, 0xcf, 0x9f, 0x5b, 0xb6, 0xbc, 0xc3, 0x2c, 0x8c, 0xed, 0x36, 0xc6,
	0x06, 0x2f, 0xd3, 0xeb, 0xb1, 0xc1, 0x60, 0x58, 0xc0, 0x5f, 0xc0, 0xe0, 0x5d, 0xad, 0x77, 0x8c,
	0x58, 0x2d, 0x52, 0x34, 0x6a, 0x4f, 0x17, 0xe3, 0x8e, 0xdb, 0xdd, 0x43, 0x77, 0x8f, 0xc3, 0x60,
	0x59, 0x48, 0x39, 0x44, 0xca, 0x2d, 0x52, 0x0e, 0xb9, 0x47, 0xca, 0x25, 0x8a, 0x72, 0x4c, 0xa2,
	0x28, 0x51, 0x6e, 0x09, 0xb9, 0x44, 0x48, 0x5c, 0x72, 0x8a, 0x12, 0xc8, 0x1f, 0x90, 0xfc, 0x07,
	0x51, 0x57, 0xbf, 0x1e, 0x77, 0xf7, 0xf4, 0xd7, 0x38, 0x70, 0x9b, 0xae, 0xaa, 0xf7, 0xde, 0xef,
	0x57, 0xf5, 0xab, 0x57, 0xef, 0xd9, 0xc0, 0x1b, 0x6f, 0xc9, 0x86, 0x61, 0xea, 0x9a, 0x2a, 0xef,
	0x08, 0x65, 0x6d, 0xb7, 0xaa, 0xc8, 0xa2, 0x5a, 0xa6, 0xc2, 0xc3, 0x1a, 0xd5, 0xeb, 0xb9, 0xaa,
	0xae, 0x99, 0x1a, 0x19, 0x71, 0xad, 0xc9, 0x1d, 0xae, 0xc9, 0x0c, 0x57, 0xb4, 0x8a, 0xc6, 0x96,
	0x08, 0xd6, 0x2f, 0x7b, 0x75, 0xe6, 0x64, 0x45, 0xd3, 0x2a, 0x0a, 0x15, 0xc4, 0xaa, 0x2c, 0x88,
	0xaa, 0xaa, 0x99, 0xa2, 0x29, 0x6b, 0xaa, 0x81, 0xb3, 0xe7, 0xca, 0x9a, 0xb1, 0xab, 0x19, 0xc2,
	0x96, 0x68, 0x60, 0x10, 0x61, 0x6f, 0x76, 0x8b, 0x9a, 0xe2, 0xac, 0x50, 0x15, 0x2b, 0xb2, 0xca,
	0x16, 0xe3, 0xda, 0x89, 0x10, 0x6c, 0x55, 0x51, 0x17, 0x77, 0x1d, 0x87, 0x93, 0x21, 0x8b, 0xa8,
	0x6a, 0xca, 0xa6, 0x4c, 0x71, 0x19, 0x3f, 0x0c, 0xe4, 0xbf, 0x56, 0xb4, 0x0d, 0x66, 0x5b, 0xa4,
	0x0f, 0x6b, 0xd4, 0x30, 0xf9, 0x4d, 0x18, 0xf2, 0x8c, 0x1a, 0x55, 0x4d, 0x35, 0x28, 0xb9, 0x0a,
	0x1d, 0x76, 0x8c, 0x34, 0x37, 0xc6, 0x4d, 0xf7, 0xe4, 0xb3, 0xb9, 0xe0, 0x1d, 0xc8, 0xd9, 0x76,
	0xcb, 0xed, 0x4f, 0x7f, 0x1a, 0x6d, 0x2b, 0xa2, 0x0d, 0x7f, 0x0b, 0xfe, 0xc6, 0x9c, 0xfe, 0xa7,
	0x4a, 0x75, 0xd1, 0xd4, 0xf4, 0x55, 0x6a, 0x8a, 0xb2, 0xe2, 0xc4, 0x24, 0xd3, 0x30, 0xa0, 0xe1,
	0xcc, 0x92, 0x24, 0xe9, 0xd4, 0xb0, 0xa3, 0x74, 0x17, 0xfd, 0xc3, 0xbc, 0x08, 0x27, 0x83, 0x1d,
	0x21, 0xcc, 0x25, 0xe8, 0x94, 0xec, 0x21, 0xc4, 0x39, 0x15, 0x86, 0xd3, 0xef, 0xc1, 0xb1, 0xe3,
	0x55, 0xc8, 0xb0, 0x10, 0x18, 0xd2, 0x07, 0x35, 0x0d, 0x9d, 0xa2, 0x07, 0xa2, 0xf3, 0x49, 0x2e,
	0xc2, 0x88, 0xa6, 0x2a, 0xf5, 0xff, 0xc9, 0xe6, 0xf6, 0xda, 0x23, 0xd9, 0x30, 0x65, 0xb5, 0x52,
	0x30, 0x8c, 0x1a, 0xd5, 0xd3, 0xc7, 0xc6, 0xb8, 0xe9, 0xae, 0x62, 0xc8, 0x2c, 0xff, 0x7f, 0xdc,
	0x1b, 0x7f, 0x3c, 0x64, 0xb4, 0x08, 0xed, 0x92, 0x68, 0x8a, 0x48, 0xe7, 0x4c, 0x18, 0x1d, 0x9f,
	0x35, 0xb3, 0xe1, 0x1f, 0xe0, 0x6e, 0xe1, 0x24, 0xf5, 0x93, 0xb9, 0x09, 0x70, 0xa8, 0xb0, 0x46,
	0x04, 0x5b, 0x8e, 0x39, 0x4b, 0x8e, 0x39, 0x5b, 0xf3, 0x28, 0xc7, 0xdc, 0x86, 0x58, 0xa1, 0x68,
	0x5b, 0x74, 0x59, 0xf2, 0x1f, 0xa4, 0xe0, 0x54, 0x48, 0x20, 0x64, 0xa1, 0x42, 0xb7, 0xe8, 0xcc,
	0xa5, 0xb9, 0xb1, 0xd4, 0x74, 0x4f, 0xfe, 0x4e, 0x18, 0x95, 0x48, 0x4f, 0xb9, 0x7f, 0x53, 0xbd,
	0x42, 0x25, 0x2f, 0x5d, 0x54, 0xdb, 0x61, 0x08, 0x72, 0xcb, 0xc3, 0xec, 0x18, 0x4a, 0x21, 0x8e,
	0x99, 0x1d, 0xc2, 0x4d, 0x2d, 0xf3, 0x15, 0x07, 0xc3, 0x41, 0x21, 0x23, 0x84, 0x30, 0x0a, 0x3d,
	0xb2, 0x51, 0xda, 0xa3, 0xba, 0xfc, 0x40, 0xa6, 0x12, 0x9e, 0x3e, 0xc8, 0xc6, 0x3d, 0x1c, 0x21,
	0xa7, 0x00, 0x64, 0xa3, 0xa4, 0xd3, 0x3d, 0x6d, 0x87, 0x4a, 0xe9, 0x14, 0x9b, 0xef, 0x96, 0x8d,
	0xa2, 0x3d, 0x40, 0xee, 0x40, 0x9f, 0x6d, 0x5c, 0xb6, 0xd3, 0x44, 0xba, 0x9d, 0xed, 0xd7, 0xe9,
	0xb0, 0xfd, 0xba, 0xe7, 0x5a, 0x5c, 0xf4, 0x9a, 0xf2, 0x4b, 0x70, 0x82, 0x6d, 0xa7, 0xad, 0x35,
	0xdf, 0xf1, 0x9f, 0x86, 0x3e, 0x99, 0x8d, 0x7b, 0x2f, 0x9d, 0x77, 0x90, 0x7f, 0x03, 0xef, 0x83,
	0xcf, 0x05, 0x1e, 0xec, 0x75, 0xff, 0x85, 0x9b, 0x0c, 0x83, 0xe9, 0xb5, 0x6f, 0x5c, 0x37, 0xc9,
	0xe3, 0xfe, 0x75, 0x29, 0xf4, 0xa3, 0x14, 0xde, 0x32, 0x7f, 0x18, 0xa4, 0x51, 0x81, 0x4e, 0x9b,
	0xb5, 0xa3, 0xce, 0x5b, 0x91, 0xea, 0x0c, 0xf6, 0x82, 0xda, 0xf4, 0x10, 0x45, 0x69, 0x3a, 0xde,
	0x5f, 0x9d, 0x30, 0x9f, 0x73, 0x30, 0x14, 0x10, 0x2f, 0xd9, 0xa1, 0x12, 0x02, 0xed, 0xaa, 0xb8,
	0x4b, 0x19, 0x80, 0xee, 0x22, 0xfb, 0x4d, 0xc6, 0xa0, 0x47, 0xa2, 0x46, 0x59, 0x97, 0xab, 0x0c,
	0x5b, 0x8a, 0x4d, 0xb9, 0x87, 0xc8, 0x20, 0xa4, 0x6a, 0xba, 0x92, 0x6e, 0x67, 0x33, 0xd6, 0x4f,
	0xcb, 0x8f, 0xa2, 0x55, 0xb4, 0xf4, 0x71, 0xdb, 0x8f, 0xf5, 0xdb, 0xf2, 0xa3, 0xd0, 0x8a, 0xa8,
	0xac, 0x59, 0xcf, 0x4d, 0x3d, 0xdd, 0x61, 0xfb, 0x71, 0x0d, 0x59, 0x77, 0xa7, 0xac, 0x53, 0x2b,
	0xfb, 0xa6, 0x3b, 0xed, 0xbb, 0x83, 0x9f, 0x7c, 0x01, 0x46, 0xd9, 0x06, 0xbb, 0x35, 0xed, 0x93,
	0xc4, 0x19, 0xe8, 0x77, 0x6b, 0xbc, 0xb0, 0x8a, 0x0c, 0x7d, 0xa3, 0xbc, 0x0c, 0x63, 0xe1, 0xae,
	0xf0, 0xd8, 0xd7, 0xfc, 0xea, 0x9d, 0x49, 0x72, 0xc9, 0x9a, 0x34, 0xfc, 0x66, 0x40, 0xa8, 0xd7,
	0xa5, 0xe4, 0x5f, 0x8e, 0xc3, 0x78, 0x44, 0x30, 0x24, 0xf6, 0xc4, 0x9f, 0x43, 0x6c, 0x55, 0x6f,
	0x46, 0xaa, 0x3a, 0xca, 0x23, 0x6a, 0x3b, 0x60, 0x1b, 0x50, 0xe1, 0xde, 0x78, 0xaf, 0x4e, 0xe7,
	0xbf, 0xa7, 0xe0, 0x44, 0x68, 0x6c, 0x72, 0x17, 0x06, 0xdd, 0x71, 0xef, 0xd6, 0xab, 0x94, 0xed,
	0x6d, 0x7f, 0x7e, 0x3a, 0xc9, 0x49, 0x5a, 0xeb, 0x8b, 0x4d, 0x1e, 0x02, 0x24, 0x66, 0x11, 0xe8,
	0xf5, 0x4b, 0x8c, 0x4c, 0x42, 0xbf, 0x7d, 0xad, 0x4a, 0xce, 0x53, 0x90, 0x0a, 0xba, 0x6c, 0xe3,
	0xd0, 0xab, 0xe9, 0x72, 0x45, 0x56, 0x4b, 0xe5, 0x6d, 0x51, 0x56, 0xf1, 0xfe, 0xf4, 0xd8, 0x63,
	0x2b, 0xd6, 0x10, 0x39, 0x0f, 0xc4, 0xb2, 0xb1, 0x00, 0x96, 0x4c, 0x79, 0x97, 0x1a, 0xa6, 0xb8,
	0x5b, 0x65, 0xb7, 0xaa, 0xaf, 0xf8, 0x17, 0x67, 0xe6, 0xae, 0x33, 0x41, 0x66, 0x61, 0x98, 0x3e,
	0xaa, 0xca, 0x3a, 0x03, 0xe2, 0x32, 0xe8, 0x60, 0x06, 0x43, 0x87, 0x73, 0x87, 0x26, 0x13, 0xd0,
	0x67, 0x07, 0x14, 0x95, 0x12, 0x2b, 0x28, 0x3a, 0x19, 0xa5, 0x5e, 0x67, 0x70, 0x55, 0x34, 0x45,
	0x32, 0x02, 0x1d, 0x46, 0x79, 0x9b, 0xee, 0x8a, 0xe9, 0x2e, 0x86, 0x11, 0xbf, 0xc8, 0x3c, 0x8c,
	0x20, 0x51, 0xf7, 0x0e, 0x94, 0x64, 0x29, 0xdd, 0xcd, 0xd6, 0x0d, 0xdb, 0xb3, 0xee, 0xad, 0x2d,
	0x48, 0xd6, 0x35, 0xdf, 0xa3, 0xba, 0x61, 0x09, 0x00, 0x18, 0x30, 0xe7, 0xd3, 0xf7, 0x02, 0xf6,
	0xf8, 0x5e, 0x40, 0x3e, 0x8b, 0x75, 0x4b, 0xc1, 0x21, 0xae, 0x53, 0x5a, 0xd4, 0x34, 0xd3, 0xa9,
	0x51, 0xe7, 0xb0, 0xdc, 0x68, 0x9e, 0x47, 0xf9, 0x13, 0x68, 0xd7, 0x35, 0xcd, 0x64, 0x52, 0xe8,
	0x2d, 0xb2, 0xdf, 0xfc, 0x18, 0x64, 0x99, 0x91, 0x15, 0x04, 0xcf, 0xda, 0xe7, 0xf6, 0x02, 0x26,
	0x9f, 0xa0, 0x15, 0x11, 0x8e, 0x57, 0x5c, 0x6f, 0xac, 0x85, 0x66, 0x43, 0xd7, 0xb4, 0x07, 0xae,
	0x6c, 0x55, 0xd6, 0xa9, 0x64, 0x95, 0xde, 0xa2, 0x72, 0x5b, 0x34, 0xb6, 0xd1, 0xd4, 0x37, 0xca,
	0xdf, 0x70, 0x3d, 0x83, 0x2e, 0x27, 0x18, 0x96, 0x87, 0x5e, 0xaa, 0x96, 0x35, 0x89, 0x4a, 0x6c,
	0x1c, 0x7d, 0x78, 0xc6, 0xf8, 0x35, 0x7c, 0xe1, 0x0e, 0xd1, 0x1f, 0x09, 0xc8, 0x32, 0xee, 0x7d,
	0x93, 0x9b, 0x16, 0xa0, 0x5c, 0x87, 0x09, 0xbb, 0x88, 0x33, 0x4d, 0xb1, 0xbc, 0x4d, 0xa5, 0xdb,
	0x9a, 0x22, 0x51, 0x7d, 0xa3, 0xb6, 0xa5, 0xc8, 0xe5, 0x75, 0x5a, 0x8f, 0xad, 0xa5, 0xf9, 0x6b,
	0x70, 0x3a, 0xda, 0x01, 0x82, 0x19, 0x81, 0x8e, 0x6a, 0x6d, 0x6b, 0x9d, 0xd6, 0x11, 0x06, 0x7e,
	0xf1, 0x65, 0x3c, 0xc9, 0x82, 0xb1, 0xd2, 0x60, 0x57, 0x50, 0xef, 0xaf, 0x6f, 0xae, 0x16, 0xe2,
	0x0b, 0xf9, 0x84, 0xb7, 0x9f, 0xbf, 0x86, 0x59, 0x3f, 0x30, 0x08, 0x02, 0xcc, 0x40, 0x97, 0xac,
	0x96, 0x95, 0x9a, 0x44, 0x25, 0x16, 0xa6, 0xab, 0xd8, 0xf8, 0xe6, 0x57, 0xf1, 0xc8, 0x57, 0x3c,
	0x07, 0x10, 0xf6, 0xcc, 0x49, 0xce, 0x79, 0x79, 0x47, 0x1b, 0xc7, 0xee, 0xf7, 0x82, 0x00, 0x92,
	0x1e, 0xfb, 0xbf, 0x80, 0x67, 0x6e, 0xec, 0x9d, 0x5e, 0xae, 0x7b, 0xaf, 0x72, 0x34, 0xa8, 0xee,
	0x26, 0x50, 0x8e, 0x00, 0xc2, 0xbc, 0x21, 0xb8, 0x70, 0x01, 0x3c, 0x81, 0x19, 0x5b, 0x00, 0x8a,
	0x12, 0xf4, 0xe4, 0x38, 0xed, 0xc1, 0xeb, 0xeb, 0xca, 0x6a, 0xf0, 0xf7, 0x64, 0x00, 0x82, 0x2a,
	0x89, 0xd4, 0x51, 0x2b, 0x89, 0xfc, 0x3b, 0x27, 0xe0, 0x38, 0x8b, 0x4b, 0xde, 0xe5, 0xa0, 0xc3,
	0xee, 0xa5, 0xc9, 0xb9, 0xc8, 0x57, 0xdb, 0xd3, 0xbe, 0x67, 0x66, 0x12, 0xad, 0xb5, 0x41, 0xf3,
	0x67, 0xde, 0x7e, 0xfe, 0xeb, 0xfb, 0xc7, 0xc6, 0x48, 0x56, 0x88, 0xfc, 0xb3, 0x02, 0xf9, 0x82,
	0x83, 0x01, 0x5f, 0xbf, 0x4c, 0xe6, 0x22, 0x03, 0x05, 0x37, 0xfa, 0x99, 0xf9, 0xd6, 0x8c, 0x10,
	0xe6, 0x22, 0x83, 0x39, 0x4f, 0xf2, 0x61, 0x30, 0x9d, 0xbf, 0x12, 0x08, 0xfb, 0xbe, 0xbf, 0x17,
	0x1c, 0x90, 0x4f, 0x38, 0xe8, 0xf7, 0x75, 0x6e, 0xf9, 0x24, 0x8d, 0xa7, 0x0f, 0xf8, 0x5c, 0x4b,
	0x36, 0x88, 0x7b, 0x96, 0xe1, 0x9e, 0x21, 0x67, 0xc3, 0x70, 0xa3, 0x48, 0x85, 0x7d, 0xd1, 0x81,
	0xfb, 0x31, 0x07, 0x83, 0xfe, 0xd6, 0x97, 0xcc, 0xb7, 0xd8, 0x29, 0xdb, 0x90, 0x2f, 0x1c, 0xa9,
	0xbf, 0xe6, 0xcf, 0x32, 0xd0, 0x13, 0x64, 0x3c, 0x06, 0x34, 0x35, 0xc8, 0xa7, 0x1c, 0xf4, 0x79,
	0x9b, 0x8f, 0xd9, 0x04, 0x5d, 0x93, 0x0f, 0x66, 0xbe, 0x15, 0x13, 0xc4, 0x78, 0x91, 0x61, 0xfc,
	0x07, 0xc9, 0x85, 0x61, 0xb4, 0xcb, 0x11, 0x61, 0xdf, 0x53, 0x87, 0x1d, 0x90, 0x0f, 0x39, 0xe8,
	0xf7, 0xb6, 0x6e, 0x24, 0xdf, 0x52, 0x9f, 0x97, 0x44, 0x0c, 0xc1, 0xbd, 0x21, 0x3f, 0xc5, 0x30,
	0x8f, 0x93, 0xd1, 0x68, 0xcc, 0x06, 0xf9, 0x8e, 0x83, 0xa1, 0xa0, 0x52, 0x77, 0x21, 0x71, 0xed,
	0xee, 0x83, 0x7b, 0xa9, 0x75, 0x43, 0xc4, 0xfc, 0x4f, 0x86, 0x79, 0x81, 0x5c, 0x08, 0xc3, 0xec,
	0x4e, 0xfb, 0xc2, 0xbe, 0xf7, 0x7d, 0x3c, 0x20, 0xbf, 0x71, 0x30, 0x1a, 0x93, 0x3f, 0xc9, 0x4a,
	0xb4, 0x4a, 0x13, 0xa5, 0xff, 0xcc, 0xea, 0x9f, 0x73, 0x82, 0x6c, 0x97, 0x19, 0xdb, 0xab, 0x64,
	0x31, 0x09, 0x5b, 0xa3, 0xb4, 0x55, 0x2f, 0x35, 0xdf, 0xdf, 0x2f, 0x39, 0x18, 0x0e, 0x6a, 0xa3,
	0xc8, 0xa5, 0x23, 0x74, 0x5e, 0x36, 0xb9, 0xcb, 0x47, 0xee, 0xd9, 0xf8, 0xf3, 0x8c, 0xd1, 0x14,
	0x99, 0x4c, 0xc4, 0xc8, 0xba, 0xcf, 0x83, 0xfe, 0x92, 0x3a, 0x26, 0xf9, 0x84, 0x54, 0xe8, 0x31,
	0xc9, 0x27, 0xac, 0x6e, 0x8f, 0x07, 0xec, 0xb4, 0x42, 0x82, 0x55, 0x79, 0x93, 0xcf, 0x31, 0x01,
	0x35, 0x0a, 0xe6, 0x04, 0x09, 0xc8, 0x5f, 0xa1, 0x27, 0x48, 0x40, 0x4d, 0xf5, 0x38, 0x7f, 0x9d,
	0xe1, 0xbc, 0x4c, 0x16, 0x62, 0x71, 0x56, 0x2d, 0x3b, 0x61, 0xdf, 0x5b, 0x6d, 0x1d, 0x90, 0xcf,
	0x38, 0x20, 0xcd, 0x6d, 0x06, 0xb9, 0x18, 0x89, 0x25, 0xb4, 0x73, 0xc9, 0x2c, 0xb4, 0x6c, 0x87,
	0x44, 0x04, 0x46, 0xe4, 0x2c, 0x99, 0x0a, 0x23, 0xa2, 0x37, 0x6c, 0xed, 0x2d, 0xff, 0x86, 0x83,
	0x01, 0x5f, 0x6b, 0x10, 0x53, 0x0a, 0x04, 0xf7, 0x23, 0x31, 0xa5, 0x40, 0x48, 0xf7, 0xc1, 0x2f,
	0x31, 0xbc, 0x57, 0xc8, 0xe5, 0x04, 0x78, 0x43, 0xb6, 0xfe, 0x7b, 0x0e, 0xfe, 0x1a, 0xd2, 0x57,
	0x90, 0x2b, 0xd1, 0x89, 0x24, 0xb2, 0x9d, 0xc9, 0x5c, 0x3d, 0x9a, 0x31, 0x32, 0x9b, 0x63, 0xcc,
	0xce, 0x93, 0x99, 0xd0, 0x5a, 0xcc, 0x31, 0x71, 0xa5, 0x9b, 0x1f, 0x38, 0x18, 0x28, 0x18, 0x9b,
	0x35, 0xd9, 0x14, 0xb7, 0x14, 0x7a, 0x53, 0xd3, 0xef, 0xaf, 0xc7, 0xbc, 0x13, 0xe1, 0x1d, 0x51,
	0xcc, 0x3b, 0x11, 0xd1, 0xe5, 0xf0, 0xb7, 0x19, 0xf6, 0x65, 0x72, 0x23, 0x0c, 0xfb, 0xe3, 0x1d,
	0x41, 0x6e, 0xc0, 0x3c, 0xc4, 0xdf, 0xfc, 0x64, 0x7c, 0xcd, 0x41, 0xbf, 0xb7, 0x93, 0x89, 0x79,
	0xa1, 0x03, 0x9b, 0xa7, 0x98, 0x17, 0x3a, 0xb8, 0x55, 0x8a, 0xcf, 0xff, 0x8f, 0x77, 0x04, 0xaf,
	0x98, 0x7c, 0xf8, 0xa5, 0x03, 0xf2, 0x2d, 0x07, 0xc4, 0x9d, 0x92, 0xed, 0xd3, 0x26, 0x8b, 0x91,
	0x78, 0x22, 0x7b, 0xae, 0xcc, 0x95, 0x23, 0xd9, 0x22, 0xa7, 0x05, 0xc6, 0x69, 0x96, 0x08, 0x61,
	0x9c, 0xb6, 0x99, 0x7d, 0x13, 0x91, 0xe5, 0x4b, 0x4f, 0x5f, 0x64, 0xb9, 0x67, 0x2f, 0xb2, 0xdc,
	0xcf, 0x2f, 0xb2, 0xdc, 0x7b, 0x2f, 0xb3, 0x6d, 0xcf, 0x5e, 0x66, 0xdb, 0x7e, 0x7c, 0x99, 0x6d,
	0xbb, 0x9f, 0x75, 0x7b, 0x7a, 0xe4, 0xf6, 0x65, 0xd6, 0xab, 0xd4, 0xd8, 0xea, 0x60, 0xff, 0x5d,
	0x9c, 0xfb, 0x23, 0x00, 0x00, 0xff, 0xff, 0x99, 0x65, 0xb1, 0xa7, 0x47, 0x1d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	OperatorDetails(ctx context.Context, in *QueryOperatorDetailsRequest, opts ...grpc.CallOption) (*QueryOperatorDetailsResponse, error)
	AddressDetails(ctx context.Context, in *QueryAddressDetailsRequest, opts ...grpc.CallOption) (*QueryAddressDetailsResponse, error)
	AddressesDetails(ctx context.Context, in *QueryAddressesDetailsRequest, opts ...grpc.CallOption) (*QueryAddressesDetailsResponse, error)
	IssuerDetails(ctx context.Context, in *QueryIssuerDetailsRequest, opts ...grpc.CallOption) (*QueryIssuerDetailsResponse, error)
	IssuersDetails(ctx context.Context, in *QueryIssuersDetailsRequest, opts ...grpc.CallOption) (*QueryIssuersDetailsResponse, error)
	VerificationDetails(ctx context.Context, in *QueryVerificationDetailsRequest, opts ...grpc.CallOption) (*QueryVerificationDetailsResponse, error)
	AllVerificationDetailsByAddress(ctx context.Context, in *QueryAllVerificationDetailsByAddressRequest, opts ...grpc.CallOption) (*QueryAllVerificationDetailsByAddressResponse, error)
	VerificationsDetails(ctx context.Context, in *QueryVerificationsDetailsRequest, opts ...grpc.CallOption) (*QueryVerificationsDetailsResponse, error)
	IssuanceTreeRoot(ctx context.Context, in *QueryIssuanceTreeRootRequest, opts ...grpc.CallOption) (*QueryIssuanceTreeRootResponse, error)
	IssuanceProof(ctx context.Context, in *QueryIssuanceProofRequest, opts ...grpc.CallOption) (*QueryIssuanceProofResponse, error)
	RevocationTreeRoot(ctx context.Context, in *QueryRevocationTreeRootRequest, opts ...grpc.CallOption) (*QueryRevocationTreeRootResponse, error)
	RevocationProof(ctx context.Context, in *QueryRevocationProofRequest, opts ...grpc.CallOption) (*QueryRevocationProofResponse, error)
	AttachedHolderPublicKey(ctx context.Context, in *QueryAttachedHolderPublicKeyRequest, opts ...grpc.CallOption) (*QueryAttachedHolderPublicKeyResponse, error)
	IsSuitableForZK(ctx context.Context, in *QueryIsCredentialInZKSDIRequest, opts ...grpc.CallOption) (*QueryIsCredentialInZKSDIResponse, error)
	CredentialHash(ctx context.Context, in *QueryCredentialHashRequest, opts ...grpc.CallOption) (*QueryCredentialHashResponse, error)
	VerificationHolder(ctx context.Context, in *QueryHolderByVerificationIdRequest, opts ...grpc.CallOption) (*QueryHolderByVerificationIdResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorDetails(ctx context.Context, in *QueryOperatorDetailsRequest, opts ...grpc.CallOption) (*QueryOperatorDetailsResponse, error) {
	out := new(QueryOperatorDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/OperatorDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressDetails(ctx context.Context, in *QueryAddressDetailsRequest, opts ...grpc.CallOption) (*QueryAddressDetailsResponse, error) {
	out := new(QueryAddressDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/AddressDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AddressesDetails(ctx context.Context, in *QueryAddressesDetailsRequest, opts ...grpc.CallOption) (*QueryAddressesDetailsResponse, error) {
	out := new(QueryAddressesDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/AddressesDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuerDetails(ctx context.Context, in *QueryIssuerDetailsRequest, opts ...grpc.CallOption) (*QueryIssuerDetailsResponse, error) {
	out := new(QueryIssuerDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/IssuerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuersDetails(ctx context.Context, in *QueryIssuersDetailsRequest, opts ...grpc.CallOption) (*QueryIssuersDetailsResponse, error) {
	out := new(QueryIssuersDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/IssuersDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerificationDetails(ctx context.Context, in *QueryVerificationDetailsRequest, opts ...grpc.CallOption) (*QueryVerificationDetailsResponse, error) {
	out := new(QueryVerificationDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/VerificationDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllVerificationDetailsByAddress(ctx context.Context, in *QueryAllVerificationDetailsByAddressRequest, opts ...grpc.CallOption) (*QueryAllVerificationDetailsByAddressResponse, error) {
	out := new(QueryAllVerificationDetailsByAddressResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/AllVerificationDetailsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerificationsDetails(ctx context.Context, in *QueryVerificationsDetailsRequest, opts ...grpc.CallOption) (*QueryVerificationsDetailsResponse, error) {
	out := new(QueryVerificationsDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/VerificationsDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuanceTreeRoot(ctx context.Context, in *QueryIssuanceTreeRootRequest, opts ...grpc.CallOption) (*QueryIssuanceTreeRootResponse, error) {
	out := new(QueryIssuanceTreeRootResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/IssuanceTreeRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuanceProof(ctx context.Context, in *QueryIssuanceProofRequest, opts ...grpc.CallOption) (*QueryIssuanceProofResponse, error) {
	out := new(QueryIssuanceProofResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/IssuanceProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevocationTreeRoot(ctx context.Context, in *QueryRevocationTreeRootRequest, opts ...grpc.CallOption) (*QueryRevocationTreeRootResponse, error) {
	out := new(QueryRevocationTreeRootResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/RevocationTreeRoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevocationProof(ctx context.Context, in *QueryRevocationProofRequest, opts ...grpc.CallOption) (*QueryRevocationProofResponse, error) {
	out := new(QueryRevocationProofResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/RevocationProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AttachedHolderPublicKey(ctx context.Context, in *QueryAttachedHolderPublicKeyRequest, opts ...grpc.CallOption) (*QueryAttachedHolderPublicKeyResponse, error) {
	out := new(QueryAttachedHolderPublicKeyResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/AttachedHolderPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsSuitableForZK(ctx context.Context, in *QueryIsCredentialInZKSDIRequest, opts ...grpc.CallOption) (*QueryIsCredentialInZKSDIResponse, error) {
	out := new(QueryIsCredentialInZKSDIResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/IsSuitableForZK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CredentialHash(ctx context.Context, in *QueryCredentialHashRequest, opts ...grpc.CallOption) (*QueryCredentialHashResponse, error) {
	out := new(QueryCredentialHashResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/CredentialHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerificationHolder(ctx context.Context, in *QueryHolderByVerificationIdRequest, opts ...grpc.CallOption) (*QueryHolderByVerificationIdResponse, error) {
	out := new(QueryHolderByVerificationIdResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Query/VerificationHolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	OperatorDetails(context.Context, *QueryOperatorDetailsRequest) (*QueryOperatorDetailsResponse, error)
	AddressDetails(context.Context, *QueryAddressDetailsRequest) (*QueryAddressDetailsResponse, error)
	AddressesDetails(context.Context, *QueryAddressesDetailsRequest) (*QueryAddressesDetailsResponse, error)
	IssuerDetails(context.Context, *QueryIssuerDetailsRequest) (*QueryIssuerDetailsResponse, error)
	IssuersDetails(context.Context, *QueryIssuersDetailsRequest) (*QueryIssuersDetailsResponse, error)
	VerificationDetails(context.Context, *QueryVerificationDetailsRequest) (*QueryVerificationDetailsResponse, error)
	AllVerificationDetailsByAddress(context.Context, *QueryAllVerificationDetailsByAddressRequest) (*QueryAllVerificationDetailsByAddressResponse, error)
	VerificationsDetails(context.Context, *QueryVerificationsDetailsRequest) (*QueryVerificationsDetailsResponse, error)
	IssuanceTreeRoot(context.Context, *QueryIssuanceTreeRootRequest) (*QueryIssuanceTreeRootResponse, error)
	IssuanceProof(context.Context, *QueryIssuanceProofRequest) (*QueryIssuanceProofResponse, error)
	RevocationTreeRoot(context.Context, *QueryRevocationTreeRootRequest) (*QueryRevocationTreeRootResponse, error)
	RevocationProof(context.Context, *QueryRevocationProofRequest) (*QueryRevocationProofResponse, error)
	AttachedHolderPublicKey(context.Context, *QueryAttachedHolderPublicKeyRequest) (*QueryAttachedHolderPublicKeyResponse, error)
	IsSuitableForZK(context.Context, *QueryIsCredentialInZKSDIRequest) (*QueryIsCredentialInZKSDIResponse, error)
	CredentialHash(context.Context, *QueryCredentialHashRequest) (*QueryCredentialHashResponse, error)
	VerificationHolder(context.Context, *QueryHolderByVerificationIdRequest) (*QueryHolderByVerificationIdResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) OperatorDetails(ctx context.Context, req *QueryOperatorDetailsRequest) (*QueryOperatorDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDetails not implemented")
}
func (*UnimplementedQueryServer) AddressDetails(ctx context.Context, req *QueryAddressDetailsRequest) (*QueryAddressDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressDetails not implemented")
}
func (*UnimplementedQueryServer) AddressesDetails(ctx context.Context, req *QueryAddressesDetailsRequest) (*QueryAddressesDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressesDetails not implemented")
}
func (*UnimplementedQueryServer) IssuerDetails(ctx context.Context, req *QueryIssuerDetailsRequest) (*QueryIssuerDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuerDetails not implemented")
}
func (*UnimplementedQueryServer) IssuersDetails(ctx context.Context, req *QueryIssuersDetailsRequest) (*QueryIssuersDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuersDetails not implemented")
}
func (*UnimplementedQueryServer) VerificationDetails(ctx context.Context, req *QueryVerificationDetailsRequest) (*QueryVerificationDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationDetails not implemented")
}
func (*UnimplementedQueryServer) AllVerificationDetailsByAddress(ctx context.Context, req *QueryAllVerificationDetailsByAddressRequest) (*QueryAllVerificationDetailsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllVerificationDetailsByAddress not implemented")
}
func (*UnimplementedQueryServer) VerificationsDetails(ctx context.Context, req *QueryVerificationsDetailsRequest) (*QueryVerificationsDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationsDetails not implemented")
}
func (*UnimplementedQueryServer) IssuanceTreeRoot(ctx context.Context, req *QueryIssuanceTreeRootRequest) (*QueryIssuanceTreeRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuanceTreeRoot not implemented")
}
func (*UnimplementedQueryServer) IssuanceProof(ctx context.Context, req *QueryIssuanceProofRequest) (*QueryIssuanceProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuanceProof not implemented")
}
func (*UnimplementedQueryServer) RevocationTreeRoot(ctx context.Context, req *QueryRevocationTreeRootRequest) (*QueryRevocationTreeRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevocationTreeRoot not implemented")
}
func (*UnimplementedQueryServer) RevocationProof(ctx context.Context, req *QueryRevocationProofRequest) (*QueryRevocationProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevocationProof not implemented")
}
func (*UnimplementedQueryServer) AttachedHolderPublicKey(ctx context.Context, req *QueryAttachedHolderPublicKeyRequest) (*QueryAttachedHolderPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachedHolderPublicKey not implemented")
}
func (*UnimplementedQueryServer) IsSuitableForZK(ctx context.Context, req *QueryIsCredentialInZKSDIRequest) (*QueryIsCredentialInZKSDIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSuitableForZK not implemented")
}
func (*UnimplementedQueryServer) CredentialHash(ctx context.Context, req *QueryCredentialHashRequest) (*QueryCredentialHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialHash not implemented")
}
func (*UnimplementedQueryServer) VerificationHolder(ctx context.Context, req *QueryHolderByVerificationIdRequest) (*QueryHolderByVerificationIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerificationHolder not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/OperatorDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorDetails(ctx, req.(*QueryOperatorDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/AddressDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressDetails(ctx, req.(*QueryAddressDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AddressesDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAddressesDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AddressesDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/AddressesDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AddressesDetails(ctx, req.(*QueryAddressesDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIssuerDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/IssuerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuerDetails(ctx, req.(*QueryIssuerDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuersDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIssuersDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuersDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/IssuersDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuersDetails(ctx, req.(*QueryIssuersDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerificationDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerificationDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerificationDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/VerificationDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerificationDetails(ctx, req.(*QueryVerificationDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllVerificationDetailsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVerificationDetailsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllVerificationDetailsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/AllVerificationDetailsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllVerificationDetailsByAddress(ctx, req.(*QueryAllVerificationDetailsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerificationsDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerificationsDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerificationsDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/VerificationsDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerificationsDetails(ctx, req.(*QueryVerificationsDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuanceTreeRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIssuanceTreeRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuanceTreeRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/IssuanceTreeRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuanceTreeRoot(ctx, req.(*QueryIssuanceTreeRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuanceProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIssuanceProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuanceProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/IssuanceProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuanceProof(ctx, req.(*QueryIssuanceProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevocationTreeRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRevocationTreeRootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevocationTreeRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/RevocationTreeRoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevocationTreeRoot(ctx, req.(*QueryRevocationTreeRootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevocationProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRevocationProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevocationProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/RevocationProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevocationProof(ctx, req.(*QueryRevocationProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AttachedHolderPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAttachedHolderPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AttachedHolderPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/AttachedHolderPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AttachedHolderPublicKey(ctx, req.(*QueryAttachedHolderPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsSuitableForZK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsCredentialInZKSDIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsSuitableForZK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/IsSuitableForZK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsSuitableForZK(ctx, req.(*QueryIsCredentialInZKSDIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CredentialHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/CredentialHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialHash(ctx, req.(*QueryCredentialHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerificationHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHolderByVerificationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerificationHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Query/VerificationHolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerificationHolder(ctx, req.(*QueryHolderByVerificationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swisstronik.compliance.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "OperatorDetails",
			Handler:    _Query_OperatorDetails_Handler,
		},
		{
			MethodName: "AddressDetails",
			Handler:    _Query_AddressDetails_Handler,
		},
		{
			MethodName: "AddressesDetails",
			Handler:    _Query_AddressesDetails_Handler,
		},
		{
			MethodName: "IssuerDetails",
			Handler:    _Query_IssuerDetails_Handler,
		},
		{
			MethodName: "IssuersDetails",
			Handler:    _Query_IssuersDetails_Handler,
		},
		{
			MethodName: "VerificationDetails",
			Handler:    _Query_VerificationDetails_Handler,
		},
		{
			MethodName: "AllVerificationDetailsByAddress",
			Handler:    _Query_AllVerificationDetailsByAddress_Handler,
		},
		{
			MethodName: "VerificationsDetails",
			Handler:    _Query_VerificationsDetails_Handler,
		},
		{
			MethodName: "IssuanceTreeRoot",
			Handler:    _Query_IssuanceTreeRoot_Handler,
		},
		{
			MethodName: "IssuanceProof",
			Handler:    _Query_IssuanceProof_Handler,
		},
		{
			MethodName: "RevocationTreeRoot",
			Handler:    _Query_RevocationTreeRoot_Handler,
		},
		{
			MethodName: "RevocationProof",
			Handler:    _Query_RevocationProof_Handler,
		},
		{
			MethodName: "AttachedHolderPublicKey",
			Handler:    _Query_AttachedHolderPublicKey_Handler,
		},
		{
			MethodName: "IsSuitableForZK",
			Handler:    _Query_IsSuitableForZK_Handler,
		},
		{
			MethodName: "CredentialHash",
			Handler:    _Query_CredentialHash_Handler,
		},
		{
			MethodName: "VerificationHolder",
			Handler:    _Query_VerificationHolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swisstronik/compliance/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OnlyWithExistingIssuer {
		i--
		if m.OnlyWithExistingIssuer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressesDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressesDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressesDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressesDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressesDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressesDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Addresses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAddressesDetailsResponse_MergedAddressDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAddressesDetailsResponse_MergedAddressDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAddressesDetailsResponse_MergedAddressDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Verifications) > 0 {
		for iNdEx := len(m.Verifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Verifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.IsRevoked {
		i--
		if m.IsRevoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuerDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuerDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuerDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuerDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuerDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuerDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuersDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuersDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuersDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuersDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuersDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuersDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuers) > 0 {
		for iNdEx := len(m.Issuers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issuers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LegalEntity) > 0 {
		i -= len(m.LegalEntity)
		copy(dAtA[i:], m.LegalEntity)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.LegalEntity)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationID) > 0 {
		i -= len(m.VerificationID)
		copy(dAtA[i:], m.VerificationID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerificationID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationsDetailsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationsDetailsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationsDetailsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationsDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationsDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationsDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Verifications) > 0 {
		for iNdEx := len(m.Verifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Verifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsRevoked {
		i--
		if m.IsRevoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.Version != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x50
	}
	if len(m.IssuerVerificationId) > 0 {
		i -= len(m.IssuerVerificationId)
		copy(dAtA[i:], m.IssuerVerificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerVerificationId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OriginalData) > 0 {
		i -= len(m.OriginalData)
		copy(dAtA[i:], m.OriginalData)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OriginalData)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ExpirationTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ExpirationTimestamp))
		i--
		dAtA[i] = 0x30
	}
	if m.IssuanceTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.IssuanceTimestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OriginChain) > 0 {
		i -= len(m.OriginChain)
		copy(dAtA[i:], m.OriginChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OriginChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VerificationID) > 0 {
		i -= len(m.VerificationID)
		copy(dAtA[i:], m.VerificationID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerificationID)))
		i--
		dAtA[i] = 0x12
	}
	if m.VerificationType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VerificationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuanceTreeRootRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuanceTreeRootRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuanceTreeRootRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIssuanceTreeRootResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuanceTreeRootResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuanceTreeRootResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRevocationTreeRootRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevocationTreeRootRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevocationTreeRootRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRevocationTreeRootResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevocationTreeRootResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevocationTreeRootResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Root) > 0 {
		i -= len(m.Root)
		copy(dAtA[i:], m.Root)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Root)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuanceProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuanceProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuanceProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialHash) > 0 {
		i -= len(m.CredentialHash)
		copy(dAtA[i:], m.CredentialHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredentialHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIssuanceProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIssuanceProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIssuanceProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncodedProof) > 0 {
		i -= len(m.EncodedProof)
		copy(dAtA[i:], m.EncodedProof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncodedProof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRevocationProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevocationProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevocationProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialHash) > 0 {
		i -= len(m.CredentialHash)
		copy(dAtA[i:], m.CredentialHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredentialHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRevocationProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevocationProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevocationProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncodedProof) > 0 {
		i -= len(m.EncodedProof)
		copy(dAtA[i:], m.EncodedProof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EncodedProof)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttachedHolderPublicKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttachedHolderPublicKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttachedHolderPublicKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAttachedHolderPublicKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAttachedHolderPublicKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAttachedHolderPublicKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsCredentialInZKSDIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsCredentialInZKSDIRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsCredentialInZKSDIRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationID) > 0 {
		i -= len(m.VerificationID)
		copy(dAtA[i:], m.VerificationID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerificationID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsCredentialInZKSDIResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsCredentialInZKSDIResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsCredentialInZKSDIResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Included {
		i--
		if m.Included {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationId) > 0 {
		i -= len(m.VerificationId)
		copy(dAtA[i:], m.VerificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialHash) > 0 {
		i -= len(m.CredentialHash)
		copy(dAtA[i:], m.CredentialHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredentialHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHolderByVerificationIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHolderByVerificationIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHolderByVerificationIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationId) > 0 {
		i -= len(m.VerificationId)
		copy(dAtA[i:], m.VerificationId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.VerificationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHolderByVerificationIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHolderByVerificationIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHolderByVerificationIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVerificationDetailsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVerificationDetailsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVerificationDetailsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OnlyWithExistingIssuer {
		i--
		if m.OnlyWithExistingIssuer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVerificationDetailsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVerificationDetailsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVerificationDetailsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		for iNdEx := len(m.Details) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Details[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOperatorDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OnlyWithExistingIssuer {
		n += 2
	}
	return n
}

func (m *QueryAddressDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressesDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressesDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, e := range m.Addresses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAddressesDetailsResponse_MergedAddressDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	if m.IsRevoked {
		n += 2
	}
	if len(m.Verifications) > 0 {
		for _, e := range m.Verifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIssuerDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuerDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuersDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuersDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Issuers) > 0 {
		for _, e := range m.Issuers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.LegalEntity)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerificationID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationsDetailsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationsDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Verifications) > 0 {
		for _, e := range m.Verifications {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerificationType != 0 {
		n += 1 + sovQuery(uint64(m.VerificationType))
	}
	l = len(m.VerificationID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OriginChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IssuanceTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.IssuanceTimestamp))
	}
	if m.ExpirationTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.ExpirationTimestamp))
	}
	l = len(m.OriginalData)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.IssuerVerificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovQuery(uint64(m.Version))
	}
	if m.IsRevoked {
		n += 2
	}
	return n
}

func (m *QueryIssuanceTreeRootRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIssuanceTreeRootResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRevocationTreeRootRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRevocationTreeRootResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuanceProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIssuanceProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncodedProof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRevocationProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRevocationProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EncodedProof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAttachedHolderPublicKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAttachedHolderPublicKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsCredentialInZKSDIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.VerificationID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsCredentialInZKSDIResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Included {
		n += 2
	}
	return n
}

func (m *QueryCredentialHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHolderByVerificationIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VerificationId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHolderByVerificationIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVerificationDetailsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OnlyWithExistingIssuer {
		n += 2
	}
	return n
}

func (m *QueryAllVerificationDetailsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Details) > 0 {
		for _, e := range m.Details {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &OperatorDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyWithExistingIssuer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyWithExistingIssuer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AddressDetails{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressesDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressesDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressesDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressesDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAddressesDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAddressesDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, QueryAddressesDetailsResponse_MergedAddressDetails{})
			if err := m.Addresses[len(m.Addresses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAddressesDetailsResponse_MergedAddressDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergedAddressDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergedAddressDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRevoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRevoked = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifications = append(m.Verifications, &Verification{})
			if err := m.Verifications[len(m.Verifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuerDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuerDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuerDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuerDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuerDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuerDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &IssuerDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuersDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuersDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuersDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuersDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuersDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuersDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuers = append(m.Issuers, QueryIssuersDetailsResponse_MergedIssuerDetails{})
			if err := m.Issuers[len(m.Issuers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuersDetailsResponse_MergedIssuerDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergedIssuerDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergedIssuerDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegalEntity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegalEntity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &VerificationDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationsDetailsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationsDetailsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationsDetailsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationsDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerificationsDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerificationsDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifications = append(m.Verifications, QueryVerificationsDetailsResponse_MergedVerificationDetails{})
			if err := m.Verifications[len(m.Verifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerificationsDetailsResponse_MergedVerificationDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergedVerificationDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergedVerificationDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationType", wireType)
			}
			m.VerificationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerificationType |= VerificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationID = append(m.VerificationID[:0], dAtA[iNdEx:postIndex]...)
			if m.VerificationID == nil {
				m.VerificationID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceTimestamp", wireType)
			}
			m.IssuanceTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuanceTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTimestamp", wireType)
			}
			m.ExpirationTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalData = append(m.OriginalData[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalData == nil {
				m.OriginalData = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerVerificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerVerificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRevoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRevoked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuanceTreeRootRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuanceTreeRootRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuanceTreeRootRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuanceTreeRootResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuanceTreeRootResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuanceTreeRootResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevocationTreeRootRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevocationTreeRootRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevocationTreeRootRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevocationTreeRootResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevocationTreeRootResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevocationTreeRootResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuanceProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuanceProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuanceProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialHash = append(m.CredentialHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CredentialHash == nil {
				m.CredentialHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIssuanceProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIssuanceProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIssuanceProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedProof = append(m.EncodedProof[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedProof == nil {
				m.EncodedProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevocationProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevocationProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevocationProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialHash = append(m.CredentialHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CredentialHash == nil {
				m.CredentialHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevocationProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevocationProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevocationProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncodedProof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncodedProof = append(m.EncodedProof[:0], dAtA[iNdEx:postIndex]...)
			if m.EncodedProof == nil {
				m.EncodedProof = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttachedHolderPublicKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttachedHolderPublicKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttachedHolderPublicKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAttachedHolderPublicKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAttachedHolderPublicKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAttachedHolderPublicKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = append(m.PubKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubKey == nil {
				m.PubKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsCredentialInZKSDIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsCredentialInZKSDIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsCredentialInZKSDIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationID = append(m.VerificationID[:0], dAtA[iNdEx:postIndex]...)
			if m.VerificationID == nil {
				m.VerificationID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsCredentialInZKSDIResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsCredentialInZKSDIResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsCredentialInZKSDIResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Included", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Included = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationId = append(m.VerificationId[:0], dAtA[iNdEx:postIndex]...)
			if m.VerificationId == nil {
				m.VerificationId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialHash = append(m.CredentialHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CredentialHash == nil {
				m.CredentialHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHolderByVerificationIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHolderByVerificationIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHolderByVerificationIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHolderByVerificationIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHolderByVerificationIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHolderByVerificationIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVerificationDetailsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVerificationDetailsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVerificationDetailsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyWithExistingIssuer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyWithExistingIssuer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVerificationDetailsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVerificationDetailsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVerificationDetailsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, &VerificationDetails{})
			if err := m.Details[len(m.Details)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
