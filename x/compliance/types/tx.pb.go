// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: swisstronik/compliance/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSetIssuerDetails struct {
	Signer  string         `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Issuer  string         `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Details *IssuerDetails `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *MsgSetIssuerDetails) Reset()         { *m = MsgSetIssuerDetails{} }
func (m *MsgSetIssuerDetails) String() string { return proto.CompactTextString(m) }
func (*MsgSetIssuerDetails) ProtoMessage()    {}
func (*MsgSetIssuerDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{0}
}
func (m *MsgSetIssuerDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetIssuerDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetIssuerDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetIssuerDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetIssuerDetails.Merge(m, src)
}
func (m *MsgSetIssuerDetails) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetIssuerDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetIssuerDetails.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetIssuerDetails proto.InternalMessageInfo

func (m *MsgSetIssuerDetails) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgSetIssuerDetails) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgSetIssuerDetails) GetDetails() *IssuerDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type MsgSetIssuerDetailsResponse struct {
}

func (m *MsgSetIssuerDetailsResponse) Reset()         { *m = MsgSetIssuerDetailsResponse{} }
func (m *MsgSetIssuerDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetIssuerDetailsResponse) ProtoMessage()    {}
func (*MsgSetIssuerDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{1}
}
func (m *MsgSetIssuerDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetIssuerDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetIssuerDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetIssuerDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetIssuerDetailsResponse.Merge(m, src)
}
func (m *MsgSetIssuerDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetIssuerDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetIssuerDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetIssuerDetailsResponse proto.InternalMessageInfo

type MsgUpdateIssuerDetails struct {
	Signer  string         `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Issuer  string         `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Details *IssuerDetails `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (m *MsgUpdateIssuerDetails) Reset()         { *m = MsgUpdateIssuerDetails{} }
func (m *MsgUpdateIssuerDetails) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIssuerDetails) ProtoMessage()    {}
func (*MsgUpdateIssuerDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{2}
}
func (m *MsgUpdateIssuerDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIssuerDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIssuerDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIssuerDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIssuerDetails.Merge(m, src)
}
func (m *MsgUpdateIssuerDetails) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIssuerDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIssuerDetails.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIssuerDetails proto.InternalMessageInfo

func (m *MsgUpdateIssuerDetails) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgUpdateIssuerDetails) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *MsgUpdateIssuerDetails) GetDetails() *IssuerDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type MsgUpdateIssuerDetailsResponse struct {
}

func (m *MsgUpdateIssuerDetailsResponse) Reset()         { *m = MsgUpdateIssuerDetailsResponse{} }
func (m *MsgUpdateIssuerDetailsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIssuerDetailsResponse) ProtoMessage()    {}
func (*MsgUpdateIssuerDetailsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{3}
}
func (m *MsgUpdateIssuerDetailsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIssuerDetailsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIssuerDetailsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIssuerDetailsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIssuerDetailsResponse.Merge(m, src)
}
func (m *MsgUpdateIssuerDetailsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIssuerDetailsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIssuerDetailsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIssuerDetailsResponse proto.InternalMessageInfo

type MsgRemoveIssuer struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Issuer string `protobuf:"bytes,2,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (m *MsgRemoveIssuer) Reset()         { *m = MsgRemoveIssuer{} }
func (m *MsgRemoveIssuer) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveIssuer) ProtoMessage()    {}
func (*MsgRemoveIssuer) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{4}
}
func (m *MsgRemoveIssuer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveIssuer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveIssuer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveIssuer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveIssuer.Merge(m, src)
}
func (m *MsgRemoveIssuer) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveIssuer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveIssuer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveIssuer proto.InternalMessageInfo

func (m *MsgRemoveIssuer) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemoveIssuer) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

type MsgRemoveIssuerResponse struct {
}

func (m *MsgRemoveIssuerResponse) Reset()         { *m = MsgRemoveIssuerResponse{} }
func (m *MsgRemoveIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveIssuerResponse) ProtoMessage()    {}
func (*MsgRemoveIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{5}
}
func (m *MsgRemoveIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveIssuerResponse.Merge(m, src)
}
func (m *MsgRemoveIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveIssuerResponse proto.InternalMessageInfo

// VerifyIssuerProposal is a gov Content type to verify issuer
type VerifyIssuerProposal struct {
	// title of the proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// description of the proposal
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// issuerAddress is an address of issuer to verify
	IssuerAddress string `protobuf:"bytes,3,opt,name=issuerAddress,proto3" json:"issuerAddress,omitempty"`
}

func (m *VerifyIssuerProposal) Reset()         { *m = VerifyIssuerProposal{} }
func (m *VerifyIssuerProposal) String() string { return proto.CompactTextString(m) }
func (*VerifyIssuerProposal) ProtoMessage()    {}
func (*VerifyIssuerProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{6}
}
func (m *VerifyIssuerProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyIssuerProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyIssuerProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyIssuerProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyIssuerProposal.Merge(m, src)
}
func (m *VerifyIssuerProposal) XXX_Size() int {
	return m.Size()
}
func (m *VerifyIssuerProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyIssuerProposal.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyIssuerProposal proto.InternalMessageInfo

func (m *VerifyIssuerProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *VerifyIssuerProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VerifyIssuerProposal) GetIssuerAddress() string {
	if m != nil {
		return m.IssuerAddress
	}
	return ""
}

type MsgAddOperator struct {
	Signer   string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgAddOperator) Reset()         { *m = MsgAddOperator{} }
func (m *MsgAddOperator) String() string { return proto.CompactTextString(m) }
func (*MsgAddOperator) ProtoMessage()    {}
func (*MsgAddOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{7}
}
func (m *MsgAddOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOperator.Merge(m, src)
}
func (m *MsgAddOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOperator proto.InternalMessageInfo

func (m *MsgAddOperator) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAddOperator) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type MsgAddOperatorResponse struct {
}

func (m *MsgAddOperatorResponse) Reset()         { *m = MsgAddOperatorResponse{} }
func (m *MsgAddOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddOperatorResponse) ProtoMessage()    {}
func (*MsgAddOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{8}
}
func (m *MsgAddOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOperatorResponse.Merge(m, src)
}
func (m *MsgAddOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOperatorResponse proto.InternalMessageInfo

type MsgRemoveOperator struct {
	Signer   string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *MsgRemoveOperator) Reset()         { *m = MsgRemoveOperator{} }
func (m *MsgRemoveOperator) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveOperator) ProtoMessage()    {}
func (*MsgRemoveOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{9}
}
func (m *MsgRemoveOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveOperator.Merge(m, src)
}
func (m *MsgRemoveOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveOperator proto.InternalMessageInfo

func (m *MsgRemoveOperator) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgRemoveOperator) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

type MsgRemoveOperatorResponse struct {
}

func (m *MsgRemoveOperatorResponse) Reset()         { *m = MsgRemoveOperatorResponse{} }
func (m *MsgRemoveOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveOperatorResponse) ProtoMessage()    {}
func (*MsgRemoveOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b617e43f088d8eed, []int{10}
}
func (m *MsgRemoveOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveOperatorResponse.Merge(m, src)
}
func (m *MsgRemoveOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveOperatorResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetIssuerDetails)(nil), "swisstronik.compliance.MsgSetIssuerDetails")
	proto.RegisterType((*MsgSetIssuerDetailsResponse)(nil), "swisstronik.compliance.MsgSetIssuerDetailsResponse")
	proto.RegisterType((*MsgUpdateIssuerDetails)(nil), "swisstronik.compliance.MsgUpdateIssuerDetails")
	proto.RegisterType((*MsgUpdateIssuerDetailsResponse)(nil), "swisstronik.compliance.MsgUpdateIssuerDetailsResponse")
	proto.RegisterType((*MsgRemoveIssuer)(nil), "swisstronik.compliance.MsgRemoveIssuer")
	proto.RegisterType((*MsgRemoveIssuerResponse)(nil), "swisstronik.compliance.MsgRemoveIssuerResponse")
	proto.RegisterType((*VerifyIssuerProposal)(nil), "swisstronik.compliance.VerifyIssuerProposal")
	proto.RegisterType((*MsgAddOperator)(nil), "swisstronik.compliance.MsgAddOperator")
	proto.RegisterType((*MsgAddOperatorResponse)(nil), "swisstronik.compliance.MsgAddOperatorResponse")
	proto.RegisterType((*MsgRemoveOperator)(nil), "swisstronik.compliance.MsgRemoveOperator")
	proto.RegisterType((*MsgRemoveOperatorResponse)(nil), "swisstronik.compliance.MsgRemoveOperatorResponse")
}

func init() { proto.RegisterFile("swisstronik/compliance/tx.proto", fileDescriptor_b617e43f088d8eed) }

var fileDescriptor_b617e43f088d8eed = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x86, 0xe3, 0xaf, 0xfd, 0x0a, 0x3d, 0x11, 0xa0, 0x9a, 0x28, 0x4d, 0x5c, 0xe1, 0x46, 0x11,
	0x85, 0x02, 0x92, 0xad, 0xb4, 0x12, 0x42, 0xdd, 0xa0, 0x22, 0x16, 0xb0, 0x08, 0x3f, 0xe1, 0x67,
	0xc1, 0xce, 0xb1, 0x0f, 0xd6, 0xa8, 0x8e, 0xc7, 0xf2, 0x19, 0x42, 0xdb, 0x25, 0xdc, 0x00, 0x12,
	0x12, 0x6b, 0x2e, 0x81, 0xcb, 0x60, 0xd9, 0x25, 0x62, 0x85, 0x92, 0x05, 0x5c, 0x06, 0x4a, 0x66,
	0x32, 0xd8, 0xd4, 0x09, 0x89, 0xc4, 0x82, 0x55, 0x32, 0x67, 0x1e, 0x9f, 0xe7, 0x3d, 0xce, 0xd8,
	0x81, 0x4d, 0x7a, 0xcd, 0x88, 0x44, 0xca, 0x63, 0x76, 0xe0, 0xfa, 0xbc, 0x97, 0x44, 0xcc, 0x8b,
	0x7d, 0x74, 0xc5, 0xa1, 0x93, 0xa4, 0x5c, 0x70, 0xb3, 0x9a, 0x01, 0x9c, 0x5f, 0x80, 0x55, 0x09,
	0x79, 0xc8, 0xc7, 0x88, 0x3b, 0xfa, 0x26, 0x69, 0xcb, 0xf6, 0x39, 0xf5, 0x38, 0xb9, 0x5d, 0x8f,
	0xd0, 0xed, 0xb7, 0xba, 0x28, 0xbc, 0x96, 0xeb, 0x73, 0x16, 0xab, 0xfd, 0x75, 0xb5, 0xdf, 0xa3,
	0xd0, 0xed, 0xb7, 0x46, 0x1f, 0x6a, 0x63, 0x6b, 0x4a, 0x0e, 0x8c, 0x05, 0x13, 0x0c, 0x49, 0x62,
	0xcd, 0xf7, 0x06, 0x5c, 0x6c, 0x53, 0xf8, 0x04, 0xc5, 0x7d, 0xa2, 0x57, 0x98, 0xde, 0x45, 0xe1,
	0xb1, 0x88, 0xcc, 0x2a, 0xac, 0x10, 0x0b, 0x63, 0x4c, 0x6b, 0x46, 0xc3, 0xd8, 0x5e, 0xed, 0xa8,
	0xd5, 0xa8, 0xce, 0xc6, 0x60, 0xed, 0x3f, 0x59, 0x97, 0x2b, 0xf3, 0x36, 0x9c, 0x09, 0xe4, 0xa5,
	0xb5, 0xa5, 0x86, 0xb1, 0x5d, 0xde, 0xd9, 0x72, 0x8a, 0xe7, 0x74, 0x72, 0x9e, 0xce, 0xe4, 0xaa,
	0xbd, 0xf2, 0x9b, 0xef, 0x9f, 0xae, 0x2b, 0x4b, 0xf3, 0x12, 0x6c, 0x14, 0x84, 0xea, 0x20, 0x25,
	0x3c, 0x26, 0x6c, 0x7e, 0x30, 0xa0, 0xda, 0xa6, 0xf0, 0x59, 0x12, 0x78, 0x02, 0xff, 0xa5, 0xdc,
	0x0d, 0xb0, 0x8b, 0x73, 0xe9, 0xe8, 0x0f, 0xe0, 0x42, 0x9b, 0xc2, 0x0e, 0xf6, 0x78, 0x5f, 0x11,
	0x8b, 0x46, 0xce, 0x1b, 0xeb, 0xb0, 0xfe, 0x5b, 0x3f, 0xad, 0x3a, 0x86, 0xca, 0x73, 0x4c, 0xd9,
	0xcb, 0x23, 0x59, 0x7f, 0x94, 0xf2, 0x84, 0x93, 0x17, 0x99, 0x15, 0xf8, 0x5f, 0x30, 0x11, 0xa1,
	0xd2, 0xc9, 0x85, 0xd9, 0x80, 0x72, 0x80, 0xe4, 0xa7, 0x2c, 0x11, 0x8c, 0xc7, 0x4a, 0x99, 0x2d,
	0x99, 0x97, 0xe1, 0x9c, 0x4c, 0xb0, 0x1f, 0x04, 0x29, 0x92, 0xbc, 0x61, 0xab, 0x9d, 0x7c, 0x71,
	0x6f, 0xf9, 0xc7, 0xc7, 0xcd, 0x52, 0xf3, 0x31, 0x9c, 0x6f, 0x53, 0xb8, 0x1f, 0x04, 0x0f, 0x13,
	0x4c, 0x3d, 0xc1, 0xa7, 0x4f, 0x69, 0xc1, 0x59, 0xae, 0x18, 0x25, 0xd5, 0xeb, 0xfc, 0xa4, 0xb5,
	0xf1, 0x6f, 0x9e, 0x69, 0xa9, 0x07, 0x7d, 0x0a, 0x6b, 0xfa, 0x1e, 0xfc, 0x3d, 0xdf, 0x06, 0xd4,
	0x4f, 0x75, 0x9d, 0x28, 0x77, 0xbe, 0x2e, 0xc3, 0x52, 0x9b, 0x42, 0xf3, 0x18, 0xaa, 0xf7, 0xbc,
	0x38, 0x88, 0xf0, 0xd4, 0x03, 0x74, 0x63, 0xda, 0x39, 0x2a, 0x38, 0xd8, 0xd6, 0xee, 0x02, 0xf0,
	0x24, 0x83, 0xf9, 0xd6, 0x80, 0xba, 0x94, 0x17, 0x3d, 0x08, 0xce, 0x8c, 0x96, 0x05, 0xbc, 0x75,
	0x73, 0x31, 0x5e, 0xa7, 0x88, 0xc1, 0x94, 0x21, 0x72, 0x67, 0xfa, 0xea, 0x8c, 0x6e, 0x59, 0xd0,
	0x72, 0xe7, 0x04, 0xb5, 0xef, 0x00, 0xd6, 0xa4, 0x2f, 0x7b, 0xb8, 0xae, 0xcc, 0xe8, 0x92, 0xe1,
	0x2c, 0x67, 0x3e, 0x4e, 0xcb, 0x04, 0x54, 0xb2, 0xc3, 0x69, 0xdf, 0xb5, 0x3f, 0xa6, 0xd6, 0xca,
	0xd6, 0xdc, 0xe8, 0xc4, 0x7a, 0xe7, 0xd6, 0xe7, 0x81, 0x6d, 0x9c, 0x0c, 0x6c, 0xe3, 0xdb, 0xc0,
	0x36, 0xde, 0x0d, 0xed, 0xd2, 0xc9, 0xd0, 0x2e, 0x7d, 0x19, 0xda, 0xa5, 0x17, 0x76, 0xf6, 0xa5,
	0x7e, 0x98, 0xfb, 0x7b, 0x39, 0x4a, 0x90, 0xba, 0x2b, 0xe3, 0x97, 0xfa, 0xee, 0xcf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x30, 0x09, 0x86, 0x37, 0x85, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	HandleSetIssuerDetails(ctx context.Context, in *MsgSetIssuerDetails, opts ...grpc.CallOption) (*MsgSetIssuerDetailsResponse, error)
	HandleUpdateIssuerDetails(ctx context.Context, in *MsgUpdateIssuerDetails, opts ...grpc.CallOption) (*MsgUpdateIssuerDetailsResponse, error)
	HandleRemoveIssuer(ctx context.Context, in *MsgRemoveIssuer, opts ...grpc.CallOption) (*MsgRemoveIssuerResponse, error)
	HandleAddOperator(ctx context.Context, in *MsgAddOperator, opts ...grpc.CallOption) (*MsgAddOperatorResponse, error)
	HandleRemoveOperator(ctx context.Context, in *MsgRemoveOperator, opts ...grpc.CallOption) (*MsgRemoveOperatorResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) HandleSetIssuerDetails(ctx context.Context, in *MsgSetIssuerDetails, opts ...grpc.CallOption) (*MsgSetIssuerDetailsResponse, error) {
	out := new(MsgSetIssuerDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Msg/HandleSetIssuerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleUpdateIssuerDetails(ctx context.Context, in *MsgUpdateIssuerDetails, opts ...grpc.CallOption) (*MsgUpdateIssuerDetailsResponse, error) {
	out := new(MsgUpdateIssuerDetailsResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Msg/HandleUpdateIssuerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleRemoveIssuer(ctx context.Context, in *MsgRemoveIssuer, opts ...grpc.CallOption) (*MsgRemoveIssuerResponse, error) {
	out := new(MsgRemoveIssuerResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Msg/HandleRemoveIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleAddOperator(ctx context.Context, in *MsgAddOperator, opts ...grpc.CallOption) (*MsgAddOperatorResponse, error) {
	out := new(MsgAddOperatorResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Msg/HandleAddOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) HandleRemoveOperator(ctx context.Context, in *MsgRemoveOperator, opts ...grpc.CallOption) (*MsgRemoveOperatorResponse, error) {
	out := new(MsgRemoveOperatorResponse)
	err := c.cc.Invoke(ctx, "/swisstronik.compliance.Msg/HandleRemoveOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	HandleSetIssuerDetails(context.Context, *MsgSetIssuerDetails) (*MsgSetIssuerDetailsResponse, error)
	HandleUpdateIssuerDetails(context.Context, *MsgUpdateIssuerDetails) (*MsgUpdateIssuerDetailsResponse, error)
	HandleRemoveIssuer(context.Context, *MsgRemoveIssuer) (*MsgRemoveIssuerResponse, error)
	HandleAddOperator(context.Context, *MsgAddOperator) (*MsgAddOperatorResponse, error)
	HandleRemoveOperator(context.Context, *MsgRemoveOperator) (*MsgRemoveOperatorResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) HandleSetIssuerDetails(ctx context.Context, req *MsgSetIssuerDetails) (*MsgSetIssuerDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleSetIssuerDetails not implemented")
}
func (*UnimplementedMsgServer) HandleUpdateIssuerDetails(ctx context.Context, req *MsgUpdateIssuerDetails) (*MsgUpdateIssuerDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUpdateIssuerDetails not implemented")
}
func (*UnimplementedMsgServer) HandleRemoveIssuer(ctx context.Context, req *MsgRemoveIssuer) (*MsgRemoveIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRemoveIssuer not implemented")
}
func (*UnimplementedMsgServer) HandleAddOperator(ctx context.Context, req *MsgAddOperator) (*MsgAddOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleAddOperator not implemented")
}
func (*UnimplementedMsgServer) HandleRemoveOperator(ctx context.Context, req *MsgRemoveOperator) (*MsgRemoveOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleRemoveOperator not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_HandleSetIssuerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetIssuerDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleSetIssuerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Msg/HandleSetIssuerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleSetIssuerDetails(ctx, req.(*MsgSetIssuerDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleUpdateIssuerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateIssuerDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleUpdateIssuerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Msg/HandleUpdateIssuerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleUpdateIssuerDetails(ctx, req.(*MsgUpdateIssuerDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleRemoveIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveIssuer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleRemoveIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Msg/HandleRemoveIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleRemoveIssuer(ctx, req.(*MsgRemoveIssuer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleAddOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleAddOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Msg/HandleAddOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleAddOperator(ctx, req.(*MsgAddOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_HandleRemoveOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).HandleRemoveOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swisstronik.compliance.Msg/HandleRemoveOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).HandleRemoveOperator(ctx, req.(*MsgRemoveOperator))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swisstronik.compliance.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleSetIssuerDetails",
			Handler:    _Msg_HandleSetIssuerDetails_Handler,
		},
		{
			MethodName: "HandleUpdateIssuerDetails",
			Handler:    _Msg_HandleUpdateIssuerDetails_Handler,
		},
		{
			MethodName: "HandleRemoveIssuer",
			Handler:    _Msg_HandleRemoveIssuer_Handler,
		},
		{
			MethodName: "HandleAddOperator",
			Handler:    _Msg_HandleAddOperator_Handler,
		},
		{
			MethodName: "HandleRemoveOperator",
			Handler:    _Msg_HandleRemoveOperator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swisstronik/compliance/tx.proto",
}

func (m *MsgSetIssuerDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetIssuerDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetIssuerDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetIssuerDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetIssuerDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetIssuerDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIssuerDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIssuerDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIssuerDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Details != nil {
		{
			size, err := m.Details.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIssuerDetailsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIssuerDetailsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIssuerDetailsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveIssuer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveIssuer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveIssuer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *VerifyIssuerProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyIssuerProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyIssuerProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerAddress) > 0 {
		i -= len(m.IssuerAddress)
		copy(dAtA[i:], m.IssuerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IssuerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetIssuerDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetIssuerDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateIssuerDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Details != nil {
		l = m.Details.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateIssuerDetailsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveIssuer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *VerifyIssuerProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IssuerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetIssuerDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetIssuerDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetIssuerDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &IssuerDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetIssuerDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetIssuerDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetIssuerDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIssuerDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIssuerDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIssuerDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Details == nil {
				m.Details = &IssuerDetails{}
			}
			if err := m.Details.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIssuerDetailsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIssuerDetailsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIssuerDetailsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveIssuer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveIssuer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveIssuer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyIssuerProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyIssuerProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyIssuerProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
