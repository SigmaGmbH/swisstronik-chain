// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/node.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct InitializeMasterKeyRequest {
    // message fields
    pub shouldReset: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InitializeMasterKeyRequest {
    fn default() -> &'a InitializeMasterKeyRequest {
        <InitializeMasterKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl InitializeMasterKeyRequest {
    pub fn new() -> InitializeMasterKeyRequest {
        ::std::default::Default::default()
    }

    // bool shouldReset = 1;


    pub fn get_shouldReset(&self) -> bool {
        self.shouldReset
    }
    pub fn clear_shouldReset(&mut self) {
        self.shouldReset = false;
    }

    // Param is passed by value, moved
    pub fn set_shouldReset(&mut self, v: bool) {
        self.shouldReset = v;
    }
}

impl ::protobuf::Message for InitializeMasterKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.shouldReset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shouldReset != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shouldReset != false {
            os.write_bool(1, self.shouldReset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InitializeMasterKeyRequest {
        InitializeMasterKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "shouldReset",
                    |m: &InitializeMasterKeyRequest| { &m.shouldReset },
                    |m: &mut InitializeMasterKeyRequest| { &mut m.shouldReset },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InitializeMasterKeyRequest>(
                    "InitializeMasterKeyRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InitializeMasterKeyRequest {
        static mut instance: ::protobuf::lazy::Lazy<InitializeMasterKeyRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InitializeMasterKeyRequest,
        };
        unsafe {
            instance.get(InitializeMasterKeyRequest::new)
        }
    }
}

impl ::protobuf::Clear for InitializeMasterKeyRequest {
    fn clear(&mut self) {
        self.shouldReset = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InitializeMasterKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InitializeMasterKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InitializeMasterKeyResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InitializeMasterKeyResponse {
    fn default() -> &'a InitializeMasterKeyResponse {
        <InitializeMasterKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl InitializeMasterKeyResponse {
    pub fn new() -> InitializeMasterKeyResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for InitializeMasterKeyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InitializeMasterKeyResponse {
        InitializeMasterKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<InitializeMasterKeyResponse>(
                    "InitializeMasterKeyResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InitializeMasterKeyResponse {
        static mut instance: ::protobuf::lazy::Lazy<InitializeMasterKeyResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InitializeMasterKeyResponse,
        };
        unsafe {
            instance.get(InitializeMasterKeyResponse::new)
        }
    }
}

impl ::protobuf::Clear for InitializeMasterKeyResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InitializeMasterKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InitializeMasterKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerAttestationRequest {
    // message fields
    pub fd: i32,
    pub isDCAP: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerAttestationRequest {
    fn default() -> &'a PeerAttestationRequest {
        <PeerAttestationRequest as ::protobuf::Message>::default_instance()
    }
}

impl PeerAttestationRequest {
    pub fn new() -> PeerAttestationRequest {
        ::std::default::Default::default()
    }

    // int32 fd = 1;


    pub fn get_fd(&self) -> i32 {
        self.fd
    }
    pub fn clear_fd(&mut self) {
        self.fd = 0;
    }

    // Param is passed by value, moved
    pub fn set_fd(&mut self, v: i32) {
        self.fd = v;
    }

    // bool isDCAP = 2;


    pub fn get_isDCAP(&self) -> bool {
        self.isDCAP
    }
    pub fn clear_isDCAP(&mut self) {
        self.isDCAP = false;
    }

    // Param is passed by value, moved
    pub fn set_isDCAP(&mut self, v: bool) {
        self.isDCAP = v;
    }
}

impl ::protobuf::Message for PeerAttestationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.fd = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isDCAP = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fd != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fd, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.isDCAP != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fd != 0 {
            os.write_int32(1, self.fd)?;
        }
        if self.isDCAP != false {
            os.write_bool(2, self.isDCAP)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerAttestationRequest {
        PeerAttestationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "fd",
                    |m: &PeerAttestationRequest| { &m.fd },
                    |m: &mut PeerAttestationRequest| { &mut m.fd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isDCAP",
                    |m: &PeerAttestationRequest| { &m.isDCAP },
                    |m: &mut PeerAttestationRequest| { &mut m.isDCAP },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerAttestationRequest>(
                    "PeerAttestationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerAttestationRequest {
        static mut instance: ::protobuf::lazy::Lazy<PeerAttestationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerAttestationRequest,
        };
        unsafe {
            instance.get(PeerAttestationRequest::new)
        }
    }
}

impl ::protobuf::Clear for PeerAttestationRequest {
    fn clear(&mut self) {
        self.fd = 0;
        self.isDCAP = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerAttestationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerAttestationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerAttestationResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeerAttestationResponse {
    fn default() -> &'a PeerAttestationResponse {
        <PeerAttestationResponse as ::protobuf::Message>::default_instance()
    }
}

impl PeerAttestationResponse {
    pub fn new() -> PeerAttestationResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PeerAttestationResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerAttestationResponse {
        PeerAttestationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<PeerAttestationResponse>(
                    "PeerAttestationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerAttestationResponse {
        static mut instance: ::protobuf::lazy::Lazy<PeerAttestationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerAttestationResponse,
        };
        unsafe {
            instance.get(PeerAttestationResponse::new)
        }
    }
}

impl ::protobuf::Clear for PeerAttestationResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerAttestationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerAttestationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteAttestationRequest {
    // message fields
    pub fd: i32,
    pub hostname: ::std::string::String,
    pub isDCAP: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteAttestationRequest {
    fn default() -> &'a RemoteAttestationRequest {
        <RemoteAttestationRequest as ::protobuf::Message>::default_instance()
    }
}

impl RemoteAttestationRequest {
    pub fn new() -> RemoteAttestationRequest {
        ::std::default::Default::default()
    }

    // int32 fd = 1;


    pub fn get_fd(&self) -> i32 {
        self.fd
    }
    pub fn clear_fd(&mut self) {
        self.fd = 0;
    }

    // Param is passed by value, moved
    pub fn set_fd(&mut self, v: i32) {
        self.fd = v;
    }

    // string hostname = 2;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }

    // bool isDCAP = 3;


    pub fn get_isDCAP(&self) -> bool {
        self.isDCAP
    }
    pub fn clear_isDCAP(&mut self) {
        self.isDCAP = false;
    }

    // Param is passed by value, moved
    pub fn set_isDCAP(&mut self, v: bool) {
        self.isDCAP = v;
    }
}

impl ::protobuf::Message for RemoteAttestationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.fd = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isDCAP = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fd != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fd, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.hostname);
        }
        if self.isDCAP != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fd != 0 {
            os.write_int32(1, self.fd)?;
        }
        if !self.hostname.is_empty() {
            os.write_string(2, &self.hostname)?;
        }
        if self.isDCAP != false {
            os.write_bool(3, self.isDCAP)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoteAttestationRequest {
        RemoteAttestationRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "fd",
                    |m: &RemoteAttestationRequest| { &m.fd },
                    |m: &mut RemoteAttestationRequest| { &mut m.fd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "hostname",
                    |m: &RemoteAttestationRequest| { &m.hostname },
                    |m: &mut RemoteAttestationRequest| { &mut m.hostname },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isDCAP",
                    |m: &RemoteAttestationRequest| { &m.isDCAP },
                    |m: &mut RemoteAttestationRequest| { &mut m.isDCAP },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RemoteAttestationRequest>(
                    "RemoteAttestationRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoteAttestationRequest {
        static mut instance: ::protobuf::lazy::Lazy<RemoteAttestationRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoteAttestationRequest,
        };
        unsafe {
            instance.get(RemoteAttestationRequest::new)
        }
    }
}

impl ::protobuf::Clear for RemoteAttestationRequest {
    fn clear(&mut self) {
        self.fd = 0;
        self.hostname.clear();
        self.isDCAP = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteAttestationRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteAttestationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RemoteAttestationResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RemoteAttestationResponse {
    fn default() -> &'a RemoteAttestationResponse {
        <RemoteAttestationResponse as ::protobuf::Message>::default_instance()
    }
}

impl RemoteAttestationResponse {
    pub fn new() -> RemoteAttestationResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RemoteAttestationResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RemoteAttestationResponse {
        RemoteAttestationResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<RemoteAttestationResponse>(
                    "RemoteAttestationResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RemoteAttestationResponse {
        static mut instance: ::protobuf::lazy::Lazy<RemoteAttestationResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RemoteAttestationResponse,
        };
        unsafe {
            instance.get(RemoteAttestationResponse::new)
        }
    }
}

impl ::protobuf::Clear for RemoteAttestationResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RemoteAttestationResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RemoteAttestationResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IsInitializedRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IsInitializedRequest {
    fn default() -> &'a IsInitializedRequest {
        <IsInitializedRequest as ::protobuf::Message>::default_instance()
    }
}

impl IsInitializedRequest {
    pub fn new() -> IsInitializedRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for IsInitializedRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IsInitializedRequest {
        IsInitializedRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<IsInitializedRequest>(
                    "IsInitializedRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IsInitializedRequest {
        static mut instance: ::protobuf::lazy::Lazy<IsInitializedRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IsInitializedRequest,
        };
        unsafe {
            instance.get(IsInitializedRequest::new)
        }
    }
}

impl ::protobuf::Clear for IsInitializedRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IsInitializedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IsInitializedRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IsInitializedResponse {
    // message fields
    pub isInitialized: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IsInitializedResponse {
    fn default() -> &'a IsInitializedResponse {
        <IsInitializedResponse as ::protobuf::Message>::default_instance()
    }
}

impl IsInitializedResponse {
    pub fn new() -> IsInitializedResponse {
        ::std::default::Default::default()
    }

    // bool isInitialized = 1;


    pub fn get_isInitialized(&self) -> bool {
        self.isInitialized
    }
    pub fn clear_isInitialized(&mut self) {
        self.isInitialized = false;
    }

    // Param is passed by value, moved
    pub fn set_isInitialized(&mut self, v: bool) {
        self.isInitialized = v;
    }
}

impl ::protobuf::Message for IsInitializedResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isInitialized = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isInitialized != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isInitialized != false {
            os.write_bool(1, self.isInitialized)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IsInitializedResponse {
        IsInitializedResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isInitialized",
                    |m: &IsInitializedResponse| { &m.isInitialized },
                    |m: &mut IsInitializedResponse| { &mut m.isInitialized },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<IsInitializedResponse>(
                    "IsInitializedResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IsInitializedResponse {
        static mut instance: ::protobuf::lazy::Lazy<IsInitializedResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IsInitializedResponse,
        };
        unsafe {
            instance.get(IsInitializedResponse::new)
        }
    }
}

impl ::protobuf::Clear for IsInitializedResponse {
    fn clear(&mut self) {
        self.isInitialized = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IsInitializedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IsInitializedResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeStatusRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeStatusRequest {
    fn default() -> &'a NodeStatusRequest {
        <NodeStatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl NodeStatusRequest {
    pub fn new() -> NodeStatusRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for NodeStatusRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeStatusRequest {
        NodeStatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<NodeStatusRequest>(
                    "NodeStatusRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeStatusRequest {
        static mut instance: ::protobuf::lazy::Lazy<NodeStatusRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeStatusRequest,
        };
        unsafe {
            instance.get(NodeStatusRequest::new)
        }
    }
}

impl ::protobuf::Clear for NodeStatusRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeStatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeStatusResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeStatusResponse {
    fn default() -> &'a NodeStatusResponse {
        <NodeStatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl NodeStatusResponse {
    pub fn new() -> NodeStatusResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for NodeStatusResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeStatusResponse {
        NodeStatusResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<NodeStatusResponse>(
                    "NodeStatusResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeStatusResponse {
        static mut instance: ::protobuf::lazy::Lazy<NodeStatusResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeStatusResponse,
        };
        unsafe {
            instance.get(NodeStatusResponse::new)
        }
    }
}

impl ::protobuf::Clear for NodeStatusResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeStatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeStatusResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DumpQuoteRequest {
    // message fields
    pub filepath: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DumpQuoteRequest {
    fn default() -> &'a DumpQuoteRequest {
        <DumpQuoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl DumpQuoteRequest {
    pub fn new() -> DumpQuoteRequest {
        ::std::default::Default::default()
    }

    // string filepath = 1;


    pub fn get_filepath(&self) -> &str {
        &self.filepath
    }
    pub fn clear_filepath(&mut self) {
        self.filepath.clear();
    }

    // Param is passed by value, moved
    pub fn set_filepath(&mut self, v: ::std::string::String) {
        self.filepath = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filepath(&mut self) -> &mut ::std::string::String {
        &mut self.filepath
    }

    // Take field
    pub fn take_filepath(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filepath, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DumpQuoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filepath)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.filepath.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filepath);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.filepath.is_empty() {
            os.write_string(1, &self.filepath)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DumpQuoteRequest {
        DumpQuoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filepath",
                    |m: &DumpQuoteRequest| { &m.filepath },
                    |m: &mut DumpQuoteRequest| { &mut m.filepath },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DumpQuoteRequest>(
                    "DumpQuoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DumpQuoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<DumpQuoteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DumpQuoteRequest,
        };
        unsafe {
            instance.get(DumpQuoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for DumpQuoteRequest {
    fn clear(&mut self) {
        self.filepath.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DumpQuoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DumpQuoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DumpQuoteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DumpQuoteResponse {
    fn default() -> &'a DumpQuoteResponse {
        <DumpQuoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl DumpQuoteResponse {
    pub fn new() -> DumpQuoteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DumpQuoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DumpQuoteResponse {
        DumpQuoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<DumpQuoteResponse>(
                    "DumpQuoteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DumpQuoteResponse {
        static mut instance: ::protobuf::lazy::Lazy<DumpQuoteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DumpQuoteResponse,
        };
        unsafe {
            instance.get(DumpQuoteResponse::new)
        }
    }
}

impl ::protobuf::Clear for DumpQuoteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DumpQuoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DumpQuoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerifyQuoteRequest {
    // message fields
    pub filepath: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerifyQuoteRequest {
    fn default() -> &'a VerifyQuoteRequest {
        <VerifyQuoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl VerifyQuoteRequest {
    pub fn new() -> VerifyQuoteRequest {
        ::std::default::Default::default()
    }

    // string filepath = 1;


    pub fn get_filepath(&self) -> &str {
        &self.filepath
    }
    pub fn clear_filepath(&mut self) {
        self.filepath.clear();
    }

    // Param is passed by value, moved
    pub fn set_filepath(&mut self, v: ::std::string::String) {
        self.filepath = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filepath(&mut self) -> &mut ::std::string::String {
        &mut self.filepath
    }

    // Take field
    pub fn take_filepath(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filepath, ::std::string::String::new())
    }
}

impl ::protobuf::Message for VerifyQuoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filepath)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.filepath.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filepath);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.filepath.is_empty() {
            os.write_string(1, &self.filepath)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerifyQuoteRequest {
        VerifyQuoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "filepath",
                    |m: &VerifyQuoteRequest| { &m.filepath },
                    |m: &mut VerifyQuoteRequest| { &mut m.filepath },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VerifyQuoteRequest>(
                    "VerifyQuoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VerifyQuoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<VerifyQuoteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VerifyQuoteRequest,
        };
        unsafe {
            instance.get(VerifyQuoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for VerifyQuoteRequest {
    fn clear(&mut self) {
        self.filepath.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerifyQuoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerifyQuoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerifyQuoteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerifyQuoteResponse {
    fn default() -> &'a VerifyQuoteResponse {
        <VerifyQuoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl VerifyQuoteResponse {
    pub fn new() -> VerifyQuoteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for VerifyQuoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerifyQuoteResponse {
        VerifyQuoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<VerifyQuoteResponse>(
                    "VerifyQuoteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VerifyQuoteResponse {
        static mut instance: ::protobuf::lazy::Lazy<VerifyQuoteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VerifyQuoteResponse,
        };
        unsafe {
            instance.get(VerifyQuoteResponse::new)
        }
    }
}

impl ::protobuf::Clear for VerifyQuoteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerifyQuoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerifyQuoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetupRequest {
    // message oneof groups
    pub req: ::std::option::Option<SetupRequest_oneof_req>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetupRequest {
    fn default() -> &'a SetupRequest {
        <SetupRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SetupRequest_oneof_req {
    initializeMasterKey(InitializeMasterKeyRequest),
    peerAttestationRequest(PeerAttestationRequest),
    remoteAttestationRequest(RemoteAttestationRequest),
    isInitialized(IsInitializedRequest),
    nodeStatus(NodeStatusRequest),
    dumpQuote(DumpQuoteRequest),
    verifyQuote(VerifyQuoteRequest),
}

impl SetupRequest {
    pub fn new() -> SetupRequest {
        ::std::default::Default::default()
    }

    // .node.node.InitializeMasterKeyRequest initializeMasterKey = 1;


    pub fn get_initializeMasterKey(&self) -> &InitializeMasterKeyRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(ref v)) => v,
            _ => InitializeMasterKeyRequest::default_instance(),
        }
    }
    pub fn clear_initializeMasterKey(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_initializeMasterKey(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_initializeMasterKey(&mut self, v: InitializeMasterKeyRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(v))
    }

    // Mutable pointer to the field.
    pub fn mut_initializeMasterKey(&mut self) -> &mut InitializeMasterKeyRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(InitializeMasterKeyRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_initializeMasterKey(&mut self) -> InitializeMasterKeyRequest {
        if self.has_initializeMasterKey() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(v)) => v,
                _ => panic!(),
            }
        } else {
            InitializeMasterKeyRequest::new()
        }
    }

    // .node.node.PeerAttestationRequest peerAttestationRequest = 2;


    pub fn get_peerAttestationRequest(&self) -> &PeerAttestationRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::peerAttestationRequest(ref v)) => v,
            _ => PeerAttestationRequest::default_instance(),
        }
    }
    pub fn clear_peerAttestationRequest(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_peerAttestationRequest(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::peerAttestationRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_peerAttestationRequest(&mut self, v: PeerAttestationRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::peerAttestationRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_peerAttestationRequest(&mut self) -> &mut PeerAttestationRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::peerAttestationRequest(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::peerAttestationRequest(PeerAttestationRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::peerAttestationRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_peerAttestationRequest(&mut self) -> PeerAttestationRequest {
        if self.has_peerAttestationRequest() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::peerAttestationRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            PeerAttestationRequest::new()
        }
    }

    // .node.node.RemoteAttestationRequest remoteAttestationRequest = 3;


    pub fn get_remoteAttestationRequest(&self) -> &RemoteAttestationRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::remoteAttestationRequest(ref v)) => v,
            _ => RemoteAttestationRequest::default_instance(),
        }
    }
    pub fn clear_remoteAttestationRequest(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_remoteAttestationRequest(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::remoteAttestationRequest(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_remoteAttestationRequest(&mut self, v: RemoteAttestationRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::remoteAttestationRequest(v))
    }

    // Mutable pointer to the field.
    pub fn mut_remoteAttestationRequest(&mut self) -> &mut RemoteAttestationRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::remoteAttestationRequest(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::remoteAttestationRequest(RemoteAttestationRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::remoteAttestationRequest(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_remoteAttestationRequest(&mut self) -> RemoteAttestationRequest {
        if self.has_remoteAttestationRequest() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::remoteAttestationRequest(v)) => v,
                _ => panic!(),
            }
        } else {
            RemoteAttestationRequest::new()
        }
    }

    // .node.node.IsInitializedRequest isInitialized = 4;


    pub fn get_isInitialized(&self) -> &IsInitializedRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(ref v)) => v,
            _ => IsInitializedRequest::default_instance(),
        }
    }
    pub fn clear_isInitialized(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_isInitialized(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_isInitialized(&mut self, v: IsInitializedRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(v))
    }

    // Mutable pointer to the field.
    pub fn mut_isInitialized(&mut self) -> &mut IsInitializedRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(IsInitializedRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_isInitialized(&mut self) -> IsInitializedRequest {
        if self.has_isInitialized() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(v)) => v,
                _ => panic!(),
            }
        } else {
            IsInitializedRequest::new()
        }
    }

    // .node.node.NodeStatusRequest nodeStatus = 5;


    pub fn get_nodeStatus(&self) -> &NodeStatusRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(ref v)) => v,
            _ => NodeStatusRequest::default_instance(),
        }
    }
    pub fn clear_nodeStatus(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_nodeStatus(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nodeStatus(&mut self, v: NodeStatusRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(v))
    }

    // Mutable pointer to the field.
    pub fn mut_nodeStatus(&mut self) -> &mut NodeStatusRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(NodeStatusRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_nodeStatus(&mut self) -> NodeStatusRequest {
        if self.has_nodeStatus() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(v)) => v,
                _ => panic!(),
            }
        } else {
            NodeStatusRequest::new()
        }
    }

    // .node.node.DumpQuoteRequest dumpQuote = 6;


    pub fn get_dumpQuote(&self) -> &DumpQuoteRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::dumpQuote(ref v)) => v,
            _ => DumpQuoteRequest::default_instance(),
        }
    }
    pub fn clear_dumpQuote(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_dumpQuote(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::dumpQuote(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dumpQuote(&mut self, v: DumpQuoteRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::dumpQuote(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dumpQuote(&mut self) -> &mut DumpQuoteRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::dumpQuote(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::dumpQuote(DumpQuoteRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::dumpQuote(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dumpQuote(&mut self) -> DumpQuoteRequest {
        if self.has_dumpQuote() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::dumpQuote(v)) => v,
                _ => panic!(),
            }
        } else {
            DumpQuoteRequest::new()
        }
    }

    // .node.node.VerifyQuoteRequest verifyQuote = 7;


    pub fn get_verifyQuote(&self) -> &VerifyQuoteRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::verifyQuote(ref v)) => v,
            _ => VerifyQuoteRequest::default_instance(),
        }
    }
    pub fn clear_verifyQuote(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_verifyQuote(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::verifyQuote(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_verifyQuote(&mut self, v: VerifyQuoteRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::verifyQuote(v))
    }

    // Mutable pointer to the field.
    pub fn mut_verifyQuote(&mut self) -> &mut VerifyQuoteRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::verifyQuote(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::verifyQuote(VerifyQuoteRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::verifyQuote(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_verifyQuote(&mut self) -> VerifyQuoteRequest {
        if self.has_verifyQuote() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::verifyQuote(v)) => v,
                _ => panic!(),
            }
        } else {
            VerifyQuoteRequest::new()
        }
    }
}

impl ::protobuf::Message for SetupRequest {
    fn is_initialized(&self) -> bool {
        if let Some(SetupRequest_oneof_req::initializeMasterKey(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::peerAttestationRequest(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::remoteAttestationRequest(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::isInitialized(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::nodeStatus(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::dumpQuote(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::verifyQuote(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::peerAttestationRequest(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::remoteAttestationRequest(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::dumpQuote(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::verifyQuote(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &SetupRequest_oneof_req::initializeMasterKey(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::peerAttestationRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::remoteAttestationRequest(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::isInitialized(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::nodeStatus(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::dumpQuote(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::verifyQuote(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &SetupRequest_oneof_req::initializeMasterKey(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::peerAttestationRequest(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::remoteAttestationRequest(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::isInitialized(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::nodeStatus(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::dumpQuote(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::verifyQuote(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetupRequest {
        SetupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, InitializeMasterKeyRequest>(
                    "initializeMasterKey",
                    SetupRequest::has_initializeMasterKey,
                    SetupRequest::get_initializeMasterKey,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PeerAttestationRequest>(
                    "peerAttestationRequest",
                    SetupRequest::has_peerAttestationRequest,
                    SetupRequest::get_peerAttestationRequest,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RemoteAttestationRequest>(
                    "remoteAttestationRequest",
                    SetupRequest::has_remoteAttestationRequest,
                    SetupRequest::get_remoteAttestationRequest,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, IsInitializedRequest>(
                    "isInitialized",
                    SetupRequest::has_isInitialized,
                    SetupRequest::get_isInitialized,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, NodeStatusRequest>(
                    "nodeStatus",
                    SetupRequest::has_nodeStatus,
                    SetupRequest::get_nodeStatus,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DumpQuoteRequest>(
                    "dumpQuote",
                    SetupRequest::has_dumpQuote,
                    SetupRequest::get_dumpQuote,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, VerifyQuoteRequest>(
                    "verifyQuote",
                    SetupRequest::has_verifyQuote,
                    SetupRequest::get_verifyQuote,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetupRequest>(
                    "SetupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetupRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetupRequest,
        };
        unsafe {
            instance.get(SetupRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetupRequest {
    fn clear(&mut self) {
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10proto/node.proto\x12\tnode.node\">\n\x1aInitializeMasterKeyRequest\
    \x12\x20\n\x0bshouldReset\x18\x01\x20\x01(\x08R\x0bshouldReset\"\x1d\n\
    \x1bInitializeMasterKeyResponse\"@\n\x16PeerAttestationRequest\x12\x0e\n\
    \x02fd\x18\x01\x20\x01(\x05R\x02fd\x12\x16\n\x06isDCAP\x18\x02\x20\x01(\
    \x08R\x06isDCAP\"\x19\n\x17PeerAttestationResponse\"^\n\x18RemoteAttesta\
    tionRequest\x12\x0e\n\x02fd\x18\x01\x20\x01(\x05R\x02fd\x12\x1a\n\x08hos\
    tname\x18\x02\x20\x01(\tR\x08hostname\x12\x16\n\x06isDCAP\x18\x03\x20\
    \x01(\x08R\x06isDCAP\"\x1b\n\x19RemoteAttestationResponse\"\x16\n\x14IsI\
    nitializedRequest\"=\n\x15IsInitializedResponse\x12$\n\risInitialized\
    \x18\x01\x20\x01(\x08R\risInitialized\"\x13\n\x11NodeStatusRequest\"\x14\
    \n\x12NodeStatusResponse\".\n\x10DumpQuoteRequest\x12\x1a\n\x08filepath\
    \x18\x01\x20\x01(\tR\x08filepath\"\x13\n\x11DumpQuoteResponse\"0\n\x12Ve\
    rifyQuoteRequest\x12\x1a\n\x08filepath\x18\x01\x20\x01(\tR\x08filepath\"\
    \x15\n\x13VerifyQuoteResponse\"\xb9\x04\n\x0cSetupRequest\x12Y\n\x13init\
    ializeMasterKey\x18\x01\x20\x01(\x0b2%.node.node.InitializeMasterKeyRequ\
    estH\0R\x13initializeMasterKey\x12[\n\x16peerAttestationRequest\x18\x02\
    \x20\x01(\x0b2!.node.node.PeerAttestationRequestH\0R\x16peerAttestationR\
    equest\x12a\n\x18remoteAttestationRequest\x18\x03\x20\x01(\x0b2#.node.no\
    de.RemoteAttestationRequestH\0R\x18remoteAttestationRequest\x12G\n\risIn\
    itialized\x18\x04\x20\x01(\x0b2\x1f.node.node.IsInitializedRequestH\0R\r\
    isInitialized\x12>\n\nnodeStatus\x18\x05\x20\x01(\x0b2\x1c.node.node.Nod\
    eStatusRequestH\0R\nnodeStatus\x12;\n\tdumpQuote\x18\x06\x20\x01(\x0b2\
    \x1b.node.node.DumpQuoteRequestH\0R\tdumpQuote\x12A\n\x0bverifyQuote\x18\
    \x07\x20\x01(\x0b2\x1d.node.node.VerifyQuoteRequestH\0R\x0bverifyQuoteB\
    \x05\n\x03reqB&Z$github.com/SigmaGmbH/librustgo/typesJ\xd8\n\n\x06\x12\
    \x04\0\02\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\0\x12\n\x08\n\x01\x08\x12\x03\x04\0;\n\t\n\x02\x08\x0b\x12\x03\x04\
    \0;\n\t\n\x02\x04\0\x12\x03\x06\0<\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\"\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x06%:\n\x0c\n\x05\x04\0\x02\0\x05\x12\
    \x03\x06%)\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06*5\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x0689\n\t\n\x02\x04\x01\x12\x03\x07\0&\n\n\n\x03\x04\
    \x01\x01\x12\x03\x07\x08#\n)\n\x02\x04\x02\x12\x04\n\0\r\x01\x1a\x1d\x20\
    Attestation\x20server\x20messages\n\n\n\n\x03\x04\x02\x01\x12\x03\n\x08\
    \x1e\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0b\x02\x0f\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x0b\x02\x07\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0b\
    \x08\n\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0b\r\x0e\n\x0b\n\x04\x04\
    \x02\x02\x01\x12\x03\x0c\x02\x12\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\
    \x0c\x02\x06\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x0c\x07\r\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x0c\x10\x11\n\t\n\x02\x04\x03\x12\x03\
    \x0e\0\"\n\n\n\x03\x04\x03\x01\x12\x03\x0e\x08\x1f\n(\n\x02\x04\x04\x12\
    \x04\x11\0\x15\x01\x1a\x1c\x20Remote\x20Attestation\x20Request\n\n\n\n\
    \x03\x04\x04\x01\x12\x03\x11\x08\x20\n\x0b\n\x04\x04\x04\x02\0\x12\x03\
    \x12\x02\x0f\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x12\x02\x07\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03\x12\x08\n\n\x0c\n\x05\x04\x04\x02\0\x03\
    \x12\x03\x12\r\x0e\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x13\x02\x16\n\x0c\
    \n\x05\x04\x04\x02\x01\x05\x12\x03\x13\x02\x08\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03\x13\t\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x13\
    \x14\x15\n\x0b\n\x04\x04\x04\x02\x02\x12\x03\x14\x02\x12\n\x0c\n\x05\x04\
    \x04\x02\x02\x05\x12\x03\x14\x02\x06\n\x0c\n\x05\x04\x04\x02\x02\x01\x12\
    \x03\x14\x07\r\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03\x14\x10\x11\n\t\n\
    \x02\x04\x05\x12\x03\x16\0$\n\n\n\x03\x04\x05\x01\x12\x03\x16\x08!\n\t\n\
    \x02\x04\x06\x12\x03\x18\0\x1f\n\n\n\x03\x04\x06\x01\x12\x03\x18\x08\x1c\
    \n\t\n\x02\x04\x07\x12\x03\x19\09\n\n\n\x03\x04\x07\x01\x12\x03\x19\x08\
    \x1d\n\x0b\n\x04\x04\x07\x02\0\x12\x03\x19\x207\n\x0c\n\x05\x04\x07\x02\
    \0\x05\x12\x03\x19\x20$\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03\x19%2\n\
    \x0c\n\x05\x04\x07\x02\0\x03\x12\x03\x1956\n\t\n\x02\x04\x08\x12\x03\x1b\
    \0\x1c\n\n\n\x03\x04\x08\x01\x12\x03\x1b\x08\x19\n\t\n\x02\x04\t\x12\x03\
    \x1c\0\x1d\n\n\n\x03\x04\t\x01\x12\x03\x1c\x08\x1a\n\n\n\x02\x04\n\x12\
    \x04\x1e\0\x20\x01\n\n\n\x03\x04\n\x01\x12\x03\x1e\x08\x18\n\x0b\n\x04\
    \x04\n\x02\0\x12\x03\x1f\x02\x16\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03\x1f\
    \x02\x08\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03\x1f\t\x11\n\x0c\n\x05\x04\n\
    \x02\0\x03\x12\x03\x1f\x14\x15\n\t\n\x02\x04\x0b\x12\x03!\0\x1c\n\n\n\
    \x03\x04\x0b\x01\x12\x03!\x08\x19\n\n\n\x02\x04\x0c\x12\x04#\0%\x01\n\n\
    \n\x03\x04\x0c\x01\x12\x03#\x08\x1a\n\x0b\n\x04\x04\x0c\x02\0\x12\x03$\
    \x02\x16\n\x0c\n\x05\x04\x0c\x02\0\x05\x12\x03$\x02\x08\n\x0c\n\x05\x04\
    \x0c\x02\0\x01\x12\x03$\t\x11\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\x03$\x14\
    \x15\n\t\n\x02\x04\r\x12\x03&\0\x1e\n\n\n\x03\x04\r\x01\x12\x03&\x08\x1b\
    \n\n\n\x02\x04\x0e\x12\x04(\02\x01\n\n\n\x03\x04\x0e\x01\x12\x03(\x08\
    \x14\n\x0c\n\x04\x04\x0e\x08\0\x12\x04)\x021\x03\n\x0c\n\x05\x04\x0e\x08\
    \0\x01\x12\x03)\x08\x0b\n\x0b\n\x04\x04\x0e\x02\0\x12\x03*\x047\n\x0c\n\
    \x05\x04\x0e\x02\0\x06\x12\x03*\x04\x1e\n\x0c\n\x05\x04\x0e\x02\0\x01\
    \x12\x03*\x1f2\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03*56\n\x0b\n\x04\x04\
    \x0e\x02\x01\x12\x03+\x046\n\x0c\n\x05\x04\x0e\x02\x01\x06\x12\x03+\x04\
    \x1a\n\x0c\n\x05\x04\x0e\x02\x01\x01\x12\x03+\x1b1\n\x0c\n\x05\x04\x0e\
    \x02\x01\x03\x12\x03+45\n\x0b\n\x04\x04\x0e\x02\x02\x12\x03,\x04:\n\x0c\
    \n\x05\x04\x0e\x02\x02\x06\x12\x03,\x04\x1c\n\x0c\n\x05\x04\x0e\x02\x02\
    \x01\x12\x03,\x1d5\n\x0c\n\x05\x04\x0e\x02\x02\x03\x12\x03,89\n\x0b\n\
    \x04\x04\x0e\x02\x03\x12\x03-\x04+\n\x0c\n\x05\x04\x0e\x02\x03\x06\x12\
    \x03-\x04\x18\n\x0c\n\x05\x04\x0e\x02\x03\x01\x12\x03-\x19&\n\x0c\n\x05\
    \x04\x0e\x02\x03\x03\x12\x03-)*\n\x0b\n\x04\x04\x0e\x02\x04\x12\x03.\x04\
    %\n\x0c\n\x05\x04\x0e\x02\x04\x06\x12\x03.\x04\x15\n\x0c\n\x05\x04\x0e\
    \x02\x04\x01\x12\x03.\x16\x20\n\x0c\n\x05\x04\x0e\x02\x04\x03\x12\x03.#$\
    \n\x0b\n\x04\x04\x0e\x02\x05\x12\x03/\x04#\n\x0c\n\x05\x04\x0e\x02\x05\
    \x06\x12\x03/\x04\x14\n\x0c\n\x05\x04\x0e\x02\x05\x01\x12\x03/\x15\x1e\n\
    \x0c\n\x05\x04\x0e\x02\x05\x03\x12\x03/!\"\n\x0b\n\x04\x04\x0e\x02\x06\
    \x12\x030\x04'\n\x0c\n\x05\x04\x0e\x02\x06\x06\x12\x030\x04\x16\n\x0c\n\
    \x05\x04\x0e\x02\x06\x01\x12\x030\x17\"\n\x0c\n\x05\x04\x0e\x02\x06\x03\
    \x12\x030%&b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
