// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/node.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct InitializeMasterKeyRequest {
    // message fields
    pub shouldReset: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InitializeMasterKeyRequest {
    fn default() -> &'a InitializeMasterKeyRequest {
        <InitializeMasterKeyRequest as ::protobuf::Message>::default_instance()
    }
}

impl InitializeMasterKeyRequest {
    pub fn new() -> InitializeMasterKeyRequest {
        ::std::default::Default::default()
    }

    // bool shouldReset = 1;


    pub fn get_shouldReset(&self) -> bool {
        self.shouldReset
    }
    pub fn clear_shouldReset(&mut self) {
        self.shouldReset = false;
    }

    // Param is passed by value, moved
    pub fn set_shouldReset(&mut self, v: bool) {
        self.shouldReset = v;
    }
}

impl ::protobuf::Message for InitializeMasterKeyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.shouldReset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.shouldReset != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.shouldReset != false {
            os.write_bool(1, self.shouldReset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InitializeMasterKeyRequest {
        InitializeMasterKeyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "shouldReset",
                    |m: &InitializeMasterKeyRequest| { &m.shouldReset },
                    |m: &mut InitializeMasterKeyRequest| { &mut m.shouldReset },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InitializeMasterKeyRequest>(
                    "InitializeMasterKeyRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InitializeMasterKeyRequest {
        static mut instance: ::protobuf::lazy::Lazy<InitializeMasterKeyRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InitializeMasterKeyRequest,
        };
        unsafe {
            instance.get(InitializeMasterKeyRequest::new)
        }
    }
}

impl ::protobuf::Clear for InitializeMasterKeyRequest {
    fn clear(&mut self) {
        self.shouldReset = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InitializeMasterKeyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InitializeMasterKeyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InitializeMasterKeyResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InitializeMasterKeyResponse {
    fn default() -> &'a InitializeMasterKeyResponse {
        <InitializeMasterKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl InitializeMasterKeyResponse {
    pub fn new() -> InitializeMasterKeyResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for InitializeMasterKeyResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InitializeMasterKeyResponse {
        InitializeMasterKeyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<InitializeMasterKeyResponse>(
                    "InitializeMasterKeyResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InitializeMasterKeyResponse {
        static mut instance: ::protobuf::lazy::Lazy<InitializeMasterKeyResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InitializeMasterKeyResponse,
        };
        unsafe {
            instance.get(InitializeMasterKeyResponse::new)
        }
    }
}

impl ::protobuf::Clear for InitializeMasterKeyResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InitializeMasterKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InitializeMasterKeyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartSeedServerRequest {
    // message fields
    pub fd: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartSeedServerRequest {
    fn default() -> &'a StartSeedServerRequest {
        <StartSeedServerRequest as ::protobuf::Message>::default_instance()
    }
}

impl StartSeedServerRequest {
    pub fn new() -> StartSeedServerRequest {
        ::std::default::Default::default()
    }

    // int32 fd = 1;


    pub fn get_fd(&self) -> i32 {
        self.fd
    }
    pub fn clear_fd(&mut self) {
        self.fd = 0;
    }

    // Param is passed by value, moved
    pub fn set_fd(&mut self, v: i32) {
        self.fd = v;
    }
}

impl ::protobuf::Message for StartSeedServerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.fd = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fd != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fd, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fd != 0 {
            os.write_int32(1, self.fd)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartSeedServerRequest {
        StartSeedServerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "fd",
                    |m: &StartSeedServerRequest| { &m.fd },
                    |m: &mut StartSeedServerRequest| { &mut m.fd },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<StartSeedServerRequest>(
                    "StartSeedServerRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StartSeedServerRequest {
        static mut instance: ::protobuf::lazy::Lazy<StartSeedServerRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StartSeedServerRequest,
        };
        unsafe {
            instance.get(StartSeedServerRequest::new)
        }
    }
}

impl ::protobuf::Clear for StartSeedServerRequest {
    fn clear(&mut self) {
        self.fd = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartSeedServerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartSeedServerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StartSeedServerResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StartSeedServerResponse {
    fn default() -> &'a StartSeedServerResponse {
        <StartSeedServerResponse as ::protobuf::Message>::default_instance()
    }
}

impl StartSeedServerResponse {
    pub fn new() -> StartSeedServerResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StartSeedServerResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StartSeedServerResponse {
        StartSeedServerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<StartSeedServerResponse>(
                    "StartSeedServerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static StartSeedServerResponse {
        static mut instance: ::protobuf::lazy::Lazy<StartSeedServerResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const StartSeedServerResponse,
        };
        unsafe {
            instance.get(StartSeedServerResponse::new)
        }
    }
}

impl ::protobuf::Clear for StartSeedServerResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StartSeedServerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StartSeedServerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeSeedRequest {
    // message fields
    pub fd: i32,
    pub hostname: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeSeedRequest {
    fn default() -> &'a NodeSeedRequest {
        <NodeSeedRequest as ::protobuf::Message>::default_instance()
    }
}

impl NodeSeedRequest {
    pub fn new() -> NodeSeedRequest {
        ::std::default::Default::default()
    }

    // int32 fd = 1;


    pub fn get_fd(&self) -> i32 {
        self.fd
    }
    pub fn clear_fd(&mut self) {
        self.fd = 0;
    }

    // Param is passed by value, moved
    pub fn set_fd(&mut self, v: i32) {
        self.fd = v;
    }

    // string hostname = 2;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }
}

impl ::protobuf::Message for NodeSeedRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.fd = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fd != 0 {
            my_size += ::protobuf::rt::value_size(1, self.fd, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.hostname);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fd != 0 {
            os.write_int32(1, self.fd)?;
        }
        if !self.hostname.is_empty() {
            os.write_string(2, &self.hostname)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeSeedRequest {
        NodeSeedRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "fd",
                    |m: &NodeSeedRequest| { &m.fd },
                    |m: &mut NodeSeedRequest| { &mut m.fd },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "hostname",
                    |m: &NodeSeedRequest| { &m.hostname },
                    |m: &mut NodeSeedRequest| { &mut m.hostname },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NodeSeedRequest>(
                    "NodeSeedRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeSeedRequest {
        static mut instance: ::protobuf::lazy::Lazy<NodeSeedRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeSeedRequest,
        };
        unsafe {
            instance.get(NodeSeedRequest::new)
        }
    }
}

impl ::protobuf::Clear for NodeSeedRequest {
    fn clear(&mut self) {
        self.fd = 0;
        self.hostname.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeSeedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeSeedRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeSeedResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeSeedResponse {
    fn default() -> &'a NodeSeedResponse {
        <NodeSeedResponse as ::protobuf::Message>::default_instance()
    }
}

impl NodeSeedResponse {
    pub fn new() -> NodeSeedResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for NodeSeedResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeSeedResponse {
        NodeSeedResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<NodeSeedResponse>(
                    "NodeSeedResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeSeedResponse {
        static mut instance: ::protobuf::lazy::Lazy<NodeSeedResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeSeedResponse,
        };
        unsafe {
            instance.get(NodeSeedResponse::new)
        }
    }
}

impl ::protobuf::Clear for NodeSeedResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeSeedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeSeedResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IsInitializedRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IsInitializedRequest {
    fn default() -> &'a IsInitializedRequest {
        <IsInitializedRequest as ::protobuf::Message>::default_instance()
    }
}

impl IsInitializedRequest {
    pub fn new() -> IsInitializedRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for IsInitializedRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IsInitializedRequest {
        IsInitializedRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<IsInitializedRequest>(
                    "IsInitializedRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IsInitializedRequest {
        static mut instance: ::protobuf::lazy::Lazy<IsInitializedRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IsInitializedRequest,
        };
        unsafe {
            instance.get(IsInitializedRequest::new)
        }
    }
}

impl ::protobuf::Clear for IsInitializedRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IsInitializedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IsInitializedRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IsInitializedResponse {
    // message fields
    pub isInitialized: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IsInitializedResponse {
    fn default() -> &'a IsInitializedResponse {
        <IsInitializedResponse as ::protobuf::Message>::default_instance()
    }
}

impl IsInitializedResponse {
    pub fn new() -> IsInitializedResponse {
        ::std::default::Default::default()
    }

    // bool isInitialized = 1;


    pub fn get_isInitialized(&self) -> bool {
        self.isInitialized
    }
    pub fn clear_isInitialized(&mut self) {
        self.isInitialized = false;
    }

    // Param is passed by value, moved
    pub fn set_isInitialized(&mut self, v: bool) {
        self.isInitialized = v;
    }
}

impl ::protobuf::Message for IsInitializedResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.isInitialized = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.isInitialized != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.isInitialized != false {
            os.write_bool(1, self.isInitialized)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IsInitializedResponse {
        IsInitializedResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "isInitialized",
                    |m: &IsInitializedResponse| { &m.isInitialized },
                    |m: &mut IsInitializedResponse| { &mut m.isInitialized },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<IsInitializedResponse>(
                    "IsInitializedResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static IsInitializedResponse {
        static mut instance: ::protobuf::lazy::Lazy<IsInitializedResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const IsInitializedResponse,
        };
        unsafe {
            instance.get(IsInitializedResponse::new)
        }
    }
}

impl ::protobuf::Clear for IsInitializedResponse {
    fn clear(&mut self) {
        self.isInitialized = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IsInitializedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IsInitializedResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeStatusRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeStatusRequest {
    fn default() -> &'a NodeStatusRequest {
        <NodeStatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl NodeStatusRequest {
    pub fn new() -> NodeStatusRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for NodeStatusRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeStatusRequest {
        NodeStatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<NodeStatusRequest>(
                    "NodeStatusRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeStatusRequest {
        static mut instance: ::protobuf::lazy::Lazy<NodeStatusRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeStatusRequest,
        };
        unsafe {
            instance.get(NodeStatusRequest::new)
        }
    }
}

impl ::protobuf::Clear for NodeStatusRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeStatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NodeStatusResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NodeStatusResponse {
    fn default() -> &'a NodeStatusResponse {
        <NodeStatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl NodeStatusResponse {
    pub fn new() -> NodeStatusResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for NodeStatusResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NodeStatusResponse {
        NodeStatusResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<NodeStatusResponse>(
                    "NodeStatusResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NodeStatusResponse {
        static mut instance: ::protobuf::lazy::Lazy<NodeStatusResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NodeStatusResponse,
        };
        unsafe {
            instance.get(NodeStatusResponse::new)
        }
    }
}

impl ::protobuf::Clear for NodeStatusResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NodeStatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NodeStatusResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetupRequest {
    // message oneof groups
    pub req: ::std::option::Option<SetupRequest_oneof_req>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetupRequest {
    fn default() -> &'a SetupRequest {
        <SetupRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SetupRequest_oneof_req {
    initializeMasterKey(InitializeMasterKeyRequest),
    startSeedServer(StartSeedServerRequest),
    nodeSeed(NodeSeedRequest),
    isInitialized(IsInitializedRequest),
    nodeStatus(NodeStatusRequest),
}

impl SetupRequest {
    pub fn new() -> SetupRequest {
        ::std::default::Default::default()
    }

    // .node.node.InitializeMasterKeyRequest initializeMasterKey = 1;


    pub fn get_initializeMasterKey(&self) -> &InitializeMasterKeyRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(ref v)) => v,
            _ => InitializeMasterKeyRequest::default_instance(),
        }
    }
    pub fn clear_initializeMasterKey(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_initializeMasterKey(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_initializeMasterKey(&mut self, v: InitializeMasterKeyRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(v))
    }

    // Mutable pointer to the field.
    pub fn mut_initializeMasterKey(&mut self) -> &mut InitializeMasterKeyRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(InitializeMasterKeyRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_initializeMasterKey(&mut self) -> InitializeMasterKeyRequest {
        if self.has_initializeMasterKey() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(v)) => v,
                _ => panic!(),
            }
        } else {
            InitializeMasterKeyRequest::new()
        }
    }

    // .node.node.StartSeedServerRequest startSeedServer = 2;


    pub fn get_startSeedServer(&self) -> &StartSeedServerRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::startSeedServer(ref v)) => v,
            _ => StartSeedServerRequest::default_instance(),
        }
    }
    pub fn clear_startSeedServer(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_startSeedServer(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::startSeedServer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_startSeedServer(&mut self, v: StartSeedServerRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::startSeedServer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_startSeedServer(&mut self) -> &mut StartSeedServerRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::startSeedServer(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::startSeedServer(StartSeedServerRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::startSeedServer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_startSeedServer(&mut self) -> StartSeedServerRequest {
        if self.has_startSeedServer() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::startSeedServer(v)) => v,
                _ => panic!(),
            }
        } else {
            StartSeedServerRequest::new()
        }
    }

    // .node.node.NodeSeedRequest nodeSeed = 3;


    pub fn get_nodeSeed(&self) -> &NodeSeedRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::nodeSeed(ref v)) => v,
            _ => NodeSeedRequest::default_instance(),
        }
    }
    pub fn clear_nodeSeed(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_nodeSeed(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::nodeSeed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nodeSeed(&mut self, v: NodeSeedRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::nodeSeed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_nodeSeed(&mut self) -> &mut NodeSeedRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::nodeSeed(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::nodeSeed(NodeSeedRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::nodeSeed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_nodeSeed(&mut self) -> NodeSeedRequest {
        if self.has_nodeSeed() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::nodeSeed(v)) => v,
                _ => panic!(),
            }
        } else {
            NodeSeedRequest::new()
        }
    }

    // .node.node.IsInitializedRequest isInitialized = 4;


    pub fn get_isInitialized(&self) -> &IsInitializedRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(ref v)) => v,
            _ => IsInitializedRequest::default_instance(),
        }
    }
    pub fn clear_isInitialized(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_isInitialized(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_isInitialized(&mut self, v: IsInitializedRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(v))
    }

    // Mutable pointer to the field.
    pub fn mut_isInitialized(&mut self) -> &mut IsInitializedRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(IsInitializedRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_isInitialized(&mut self) -> IsInitializedRequest {
        if self.has_isInitialized() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(v)) => v,
                _ => panic!(),
            }
        } else {
            IsInitializedRequest::new()
        }
    }

    // .node.node.NodeStatusRequest nodeStatus = 5;


    pub fn get_nodeStatus(&self) -> &NodeStatusRequest {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(ref v)) => v,
            _ => NodeStatusRequest::default_instance(),
        }
    }
    pub fn clear_nodeStatus(&mut self) {
        self.req = ::std::option::Option::None;
    }

    pub fn has_nodeStatus(&self) -> bool {
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_nodeStatus(&mut self, v: NodeStatusRequest) {
        self.req = ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(v))
    }

    // Mutable pointer to the field.
    pub fn mut_nodeStatus(&mut self) -> &mut NodeStatusRequest {
        if let ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(_)) = self.req {
        } else {
            self.req = ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(NodeStatusRequest::new()));
        }
        match self.req {
            ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_nodeStatus(&mut self) -> NodeStatusRequest {
        if self.has_nodeStatus() {
            match self.req.take() {
                ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(v)) => v,
                _ => panic!(),
            }
        } else {
            NodeStatusRequest::new()
        }
    }
}

impl ::protobuf::Message for SetupRequest {
    fn is_initialized(&self) -> bool {
        if let Some(SetupRequest_oneof_req::initializeMasterKey(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::startSeedServer(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::nodeSeed(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::isInitialized(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SetupRequest_oneof_req::nodeStatus(ref v)) = self.req {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::initializeMasterKey(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::startSeedServer(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::nodeSeed(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::isInitialized(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.req = ::std::option::Option::Some(SetupRequest_oneof_req::nodeStatus(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &SetupRequest_oneof_req::initializeMasterKey(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::startSeedServer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::nodeSeed(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::isInitialized(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SetupRequest_oneof_req::nodeStatus(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.req {
            match v {
                &SetupRequest_oneof_req::initializeMasterKey(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::startSeedServer(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::nodeSeed(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::isInitialized(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SetupRequest_oneof_req::nodeStatus(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetupRequest {
        SetupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, InitializeMasterKeyRequest>(
                    "initializeMasterKey",
                    SetupRequest::has_initializeMasterKey,
                    SetupRequest::get_initializeMasterKey,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StartSeedServerRequest>(
                    "startSeedServer",
                    SetupRequest::has_startSeedServer,
                    SetupRequest::get_startSeedServer,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, NodeSeedRequest>(
                    "nodeSeed",
                    SetupRequest::has_nodeSeed,
                    SetupRequest::get_nodeSeed,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, IsInitializedRequest>(
                    "isInitialized",
                    SetupRequest::has_isInitialized,
                    SetupRequest::get_isInitialized,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, NodeStatusRequest>(
                    "nodeStatus",
                    SetupRequest::has_nodeStatus,
                    SetupRequest::get_nodeStatus,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetupRequest>(
                    "SetupRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetupRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetupRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetupRequest,
        };
        unsafe {
            instance.get(SetupRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetupRequest {
    fn clear(&mut self) {
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.req = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10proto/node.proto\x12\tnode.node\">\n\x1aInitializeMasterKeyRequest\
    \x12\x20\n\x0bshouldReset\x18\x01\x20\x01(\x08R\x0bshouldReset\"\x1d\n\
    \x1bInitializeMasterKeyResponse\"(\n\x16StartSeedServerRequest\x12\x0e\n\
    \x02fd\x18\x01\x20\x01(\x05R\x02fd\"\x19\n\x17StartSeedServerResponse\"=\
    \n\x0fNodeSeedRequest\x12\x0e\n\x02fd\x18\x01\x20\x01(\x05R\x02fd\x12\
    \x1a\n\x08hostname\x18\x02\x20\x01(\tR\x08hostname\"\x12\n\x10NodeSeedRe\
    sponse\"\x16\n\x14IsInitializedRequest\"=\n\x15IsInitializedResponse\x12\
    $\n\risInitialized\x18\x01\x20\x01(\x08R\risInitialized\"\x13\n\x11NodeS\
    tatusRequest\"\x14\n\x12NodeStatusResponse\"\x82\x03\n\x0cSetupRequest\
    \x12Y\n\x13initializeMasterKey\x18\x01\x20\x01(\x0b2%.node.node.Initiali\
    zeMasterKeyRequestH\0R\x13initializeMasterKey\x12M\n\x0fstartSeedServer\
    \x18\x02\x20\x01(\x0b2!.node.node.StartSeedServerRequestH\0R\x0fstartSee\
    dServer\x128\n\x08nodeSeed\x18\x03\x20\x01(\x0b2\x1a.node.node.NodeSeedR\
    equestH\0R\x08nodeSeed\x12G\n\risInitialized\x18\x04\x20\x01(\x0b2\x1f.n\
    ode.node.IsInitializedRequestH\0R\risInitialized\x12>\n\nnodeStatus\x18\
    \x05\x20\x01(\x0b2\x1c.node.node.NodeStatusRequestH\0R\nnodeStatusB\x05\
    \n\x03reqB&Z$github.com/SigmaGmbH/librustgo/typesJ\xf2\x06\n\x06\x12\x04\
    \0\0#\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\
    \x12\n\x08\n\x01\x08\x12\x03\x04\0;\n\t\n\x02\x08\x0b\x12\x03\x04\0;\n\t\
    \n\x02\x04\0\x12\x03\x06\0<\n\n\n\x03\x04\0\x01\x12\x03\x06\x08\"\n\x0b\
    \n\x04\x04\0\x02\0\x12\x03\x06%:\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x06\
    %)\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x06*5\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x0689\n\t\n\x02\x04\x01\x12\x03\x08\0&\n\n\n\x03\x04\x01\x01\
    \x12\x03\x08\x08#\n\t\n\x02\x04\x02\x12\x03\n\00\n\n\n\x03\x04\x02\x01\
    \x12\x03\n\x08\x1e\n\x0b\n\x04\x04\x02\x02\0\x12\x03\n!.\n\x0c\n\x05\x04\
    \x02\x02\0\x05\x12\x03\n!&\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\n')\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03\n,-\n\t\n\x02\x04\x03\x12\x03\x0c\0\
    \"\n\n\n\x03\x04\x03\x01\x12\x03\x0c\x08\x1f\n\n\n\x02\x04\x04\x12\x04\
    \x0e\0\x11\x01\n\n\n\x03\x04\x04\x01\x12\x03\x0e\x08\x17\n\x0b\n\x04\x04\
    \x04\x02\0\x12\x03\x0f\x02\x0f\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x0f\
    \x02\x07\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03\x0f\x08\n\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03\x0f\r\x0e\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x10\
    \x02\x16\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03\x10\t\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03\x10\x14\x15\n\t\n\x02\x04\x05\x12\x03\x13\0\x1b\n\n\n\x03\x04\
    \x05\x01\x12\x03\x13\x08\x18\n\t\n\x02\x04\x06\x12\x03\x15\0\x1f\n\n\n\
    \x03\x04\x06\x01\x12\x03\x15\x08\x1c\n\t\n\x02\x04\x07\x12\x03\x16\09\n\
    \n\n\x03\x04\x07\x01\x12\x03\x16\x08\x1d\n\x0b\n\x04\x04\x07\x02\0\x12\
    \x03\x16\x207\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03\x16\x20$\n\x0c\n\x05\
    \x04\x07\x02\0\x01\x12\x03\x16%2\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03\
    \x1656\n\t\n\x02\x04\x08\x12\x03\x18\0\x1c\n\n\n\x03\x04\x08\x01\x12\x03\
    \x18\x08\x19\n\t\n\x02\x04\t\x12\x03\x19\0\x1d\n\n\n\x03\x04\t\x01\x12\
    \x03\x19\x08\x1a\n\n\n\x02\x04\n\x12\x04\x1b\0#\x01\n\n\n\x03\x04\n\x01\
    \x12\x03\x1b\x08\x14\n\x0c\n\x04\x04\n\x08\0\x12\x04\x1c\x02\"\x03\n\x0c\
    \n\x05\x04\n\x08\0\x01\x12\x03\x1c\x08\x0b\n\x0b\n\x04\x04\n\x02\0\x12\
    \x03\x1d\x047\n\x0c\n\x05\x04\n\x02\0\x06\x12\x03\x1d\x04\x1e\n\x0c\n\
    \x05\x04\n\x02\0\x01\x12\x03\x1d\x1f2\n\x0c\n\x05\x04\n\x02\0\x03\x12\
    \x03\x1d56\n\x0b\n\x04\x04\n\x02\x01\x12\x03\x1e\x04/\n\x0c\n\x05\x04\n\
    \x02\x01\x06\x12\x03\x1e\x04\x1a\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03\
    \x1e\x1b*\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03\x1e-.\n\x0b\n\x04\x04\n\
    \x02\x02\x12\x03\x1f\x04!\n\x0c\n\x05\x04\n\x02\x02\x06\x12\x03\x1f\x04\
    \x13\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03\x1f\x14\x1c\n\x0c\n\x05\x04\n\
    \x02\x02\x03\x12\x03\x1f\x1f\x20\n\x0b\n\x04\x04\n\x02\x03\x12\x03\x20\
    \x04+\n\x0c\n\x05\x04\n\x02\x03\x06\x12\x03\x20\x04\x18\n\x0c\n\x05\x04\
    \n\x02\x03\x01\x12\x03\x20\x19&\n\x0c\n\x05\x04\n\x02\x03\x03\x12\x03\
    \x20)*\n\x0b\n\x04\x04\n\x02\x04\x12\x03!\x04%\n\x0c\n\x05\x04\n\x02\x04\
    \x06\x12\x03!\x04\x15\n\x0c\n\x05\x04\n\x02\x04\x01\x12\x03!\x16\x20\n\
    \x0c\n\x05\x04\n\x02\x04\x03\x12\x03!#$b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
