syntax = "proto3";
package swisstronik.vesting;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "swisstronik/vesting/params.proto";

option go_package = "swisstronik/x/vesting/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/swisstronik/vesting/params";
  }
  // Balances queries the balances of vesting account.
  rpc Balances(QueryBalancesRequest) returns (QueryBalancesResponse) {
    option (google.api.http).get = "/swisstronik/vesting/balances/{address}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryBalancesRequest is the request type for the Query/Balances RPC method.
message QueryBalancesRequest {
  // address of the clawback vesting account
  string address = 1;
}
// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryBalancesResponse {
  // locked defines the current amount of locked tokens
  repeated cosmos.base.v1beta1.Coin locked = 1
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // unvested defines the current amount of unvested tokens
  repeated cosmos.base.v1beta1.Coin unvested = 2
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  // vested defines the current amount of vested tokens
  repeated cosmos.base.v1beta1.Coin vested = 3
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}